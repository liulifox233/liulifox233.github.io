{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Meltyland","text":"<p>\u8fd9\u91cc\u662f\u6d41\u79bb\u7684\u4e2a\u4eba\u535a\u5ba2</p>"},{"location":"about/","title":"About Me","text":"\u3053\u3061\u3089\u306f\u308b\u308a\u3067\u3059\uff01\u4f60\u53ef\u4ee5\u53eb\u6211\u6d41\u79bb\u3002 <ul> <li> <p>\u4e2d\u6587 \u00b7 English \u00b7 \u65e5\u672c\u8a9e</p> </li> <li> <p> Learning Computer Science / Artificial Intelligence at BUPT</p> </li> <li> <p> Online time 09:00-03:00 UTC+8</p> </li> </ul> <ul> <li> <p>Github: liulifox233 (LiuliFox) (github.com)</p> </li> <li> <p>\u6d1b\u8c37: LiuliFox \u7684\u4e2a\u4eba\u4e2d\u5fc3 - \u6d1b\u8c37 </p> </li> <li> <p>BiliBili: \u6d41\u79bbfox\u7684\u4e2a\u4eba\u7a7a\u95f4</p> </li> <li> <p>Codeforces: LiuliFox - Codeforces</p> </li> </ul>"},{"location":"notes/","title":"Notes","text":"<p>\u8fd9\u91cc\u4e5f\u8bb8\u6709\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0</p>"},{"location":"notes/database/cap/","title":"CAP\u5b9a\u7406\u53ca\u5176\u8bc1\u660e","text":"<p>\u5206\u5e03\u5f0f\u7cfb\u7edf\u6700\u591a\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u7279\u6027\u4e2d\u7684\u4e24\u4e2a\uff1a</p> <ol> <li> <p>\u4e00\u81f4\u6027 (Consistency, C)    \u6240\u6709\u8282\u70b9\u8bbf\u95ee\u540c\u4e00\u4efd\u6700\u65b0\u6570\u636e\u526f\u672c\u3002</p> </li> <li> <p>\u53ef\u7528\u6027 (Availability, A)    \u6bcf\u4e2a\u8bf7\u6c42\u90fd\u80fd\u5728\u6709\u9650\u65f6\u95f4\u5185\u83b7\u5f97\u54cd\u5e94\uff08\u975e\u9519\u8bef\uff09\u3002</p> </li> <li> <p>\u5206\u533a\u5bb9\u9519\u6027 (Partition Tolerance, P)    \u7f51\u7edc\u5206\u533a\u53d1\u751f\u65f6\uff0c\u7cfb\u7edf\u4ecd\u80fd\u7ee7\u7eed\u8fd0\u884c\u3002</p> </li> </ol> \\[ \\boxed{\\text{P} \\implies \\neg (\\text{C} \\land \\text{A})} \\] <p>\u6216</p> \\[ \\boxed{\\text{P}  \\wedge \\text{C}  \\wedge \\text{A}} \\]"},{"location":"notes/database/cap/#_1","title":"\u8bc1\u660e","text":"<p>\u8bbe\u7cfb\u7edf\u7531\u4e24\u4e2a\u8282\u70b9 \\(N_1\\) \u548c \\(N_2\\)\uff0c\u5b58\u50a8\u6570\u636e\u9879 \\(x\\)\uff0c\u521d\u59cb\u503c \\(x = v_0\\) </p> <p>\u4e14\u7f51\u7edc\u5f02\u6b65\u901a\u4fe1\uff08\u6d88\u606f\u5ef6\u8fdf\u65e0\u4e0a\u9650\uff09</p> \\[ \\begin{aligned} t_0 &amp;: \\forall N(x = v_0)\\\\ t_1 &amp;: N_1: \\text{write}(x, v_1) \\\\ t_2 &amp;: N_2: \\text{read}(x) \\\\ [t_1, \\infty] &amp;: \\text{\u7f51\u7edc\u53d1\u751f\u5206\u533a\uff0c} N_1 \\leftrightarrow N_2 \\text{ \u901a\u4fe1\u4e2d\u65ad} \\end{aligned} \\]"},{"location":"notes/database/cap/#case1-textp-wedge-textc","title":"Case1: \\(\\text{P} \\wedge \\text{C}\\)","text":"<p>\u5219\uff1a $$ \\exists t \\in [t_1, t_2], \\, \\text{Response}(\\text{read}(x)) = v_0 \\neq v_1 $$ \u56e0\u6b64 \\(\\neg A\\)</p>"},{"location":"notes/database/cap/#case2-textp-wedge-texta","title":"Case2: \\(\\text{P} \\wedge \\text{A}\\)","text":"<p>\\(N_2\\) \u5fc5\u987b\u8fd4\u56de\u6700\u65b0\u503c \\(v_1\\) </p> <p>\u7136\u800c\uff1a $$ \\forall t \\geq t_2, \\, \\text{Response}(\\text{read}(x)) \\text{ is incomplete} $$</p> <p>\u56e0\u6b64 \\(\\neg C\\)\uff0c\u8bc1\u6bd5</p>"},{"location":"notes/japanese/case-particles/","title":"\u683c\u52a9\u8bcd","text":"<p>Notice</p> <p>\u6b64\u7b14\u8bb0\u7531AI\u751f\u6210\uff0c\u6ce8\u610f\u9274\u522b</p>"},{"location":"notes/japanese/case-particles/#_2","title":"\u683c\u52a9\u8bcd\u7684\u5b9a\u4e49\u4e0e\u4f5c\u7528","text":"<p>\u4ec0\u4e48\u662f\u683c\uff1f</p> <ul> <li>\u683c\uff08\u304b\u304f\uff09\u662f\u65e5\u8bed\u4e2d\u7528\u6765\u8868\u793a\u53e5\u5b50\u6210\u5206\u4e0e\u52a8\u8bcd\u4e4b\u95f4\u5173\u7cfb\u7684\u8bed\u6cd5\u6982\u5ff5\u3002</li> <li>\u5728\u6c49\u8bed\u4e2d\uff0c\u53e5\u5b50\u6210\u5206\u4e4b\u95f4\u7684\u5173\u7cfb\u901a\u5e38\u662f\u901a\u8fc7\u8bed\u5e8f\u548c\u903b\u8f91\u6765\u8868\u8fbe\u7684\u3002\u800c\u5728\u65e5\u8bed\u4e2d\uff0c\u683c\u52a9\u8bcd\uff08\u683c\u52a9\u8a5e\uff09\u7528\u4e8e\u660e\u786e\u5730\u6307\u793a\u8fd9\u4e9b\u5173\u7cfb\u3002</li> </ul> <p>\u793a\u4f8b\u5206\u6790\uff1a</p> <p>\u4ee5\u53e5\u5b50\u201c\u4ece\u53bb\u5e74\u5f00\u59cb\uff0c\u5f20\u4e09\u4e00\u76f4\u5728B\u7ad9\u5403\u996d\u201d\u4e3a\u4f8b\uff1a</p> <ul> <li>\u4ece\u53bb\u5e74\u5f00\u59cb\uff1a\u8868\u793a\u52a8\u4f5c\u7684\u65f6\u95f4\u8d77\u70b9\u3002</li> <li>\u5f20\u4e09\uff1a\u52a8\u4f5c\u7684\u6267\u884c\u8005\u3002</li> <li>\u5728B\u7ad9\uff1a\u52a8\u4f5c\u53d1\u751f\u7684\u5730\u70b9\u3002</li> <li>\u5403\u996d\uff1a\u6838\u5fc3\u52a8\u8bcd\u3002</li> </ul> <p>\u901a\u8fc7\u62c6\u89e3\u53e5\u5b50\uff0c\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a\u6210\u5206\u90fd\u56f4\u7ed5\u7740\u52a8\u8bcd\u201c\u5403\u996d\u201d\u670d\u52a1\uff0c\u4e14\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u5404\u4e0d\u76f8\u540c\u3002\u8fd9\u4e9b\u4e0d\u540c\u7684\u5173\u7cfb\u5c31\u662f\u7531\u683c\u52a9\u8bcd\u6765\u8868\u8fbe\u7684\u3002</p>"},{"location":"notes/japanese/case-particles/#_3","title":"\u683c\u52a9\u8bcd\u5206\u7c7b\u53ca\u7528\u6cd5","text":""},{"location":"notes/japanese/case-particles/#1","title":"1. \uff5e\u304c","text":"<p>\u529f\u80fd\uff1a</p> <ul> <li>\u8868\u793a\u53e5\u5b50\u7684\u4e3b\u8bed\u6216\u72b6\u6001\u7684\u4e3b\u4f53\u3002</li> <li>\u7528\u4e8e\u8868\u8fbe\u4e3b\u89c2\u611f\u53d7\u3001\u613f\u671b\u3001\u80fd\u529b\u7b49\u3002</li> </ul> <p>\u7528\u6cd5\u4e3e\u4f8b\uff1a</p> <ul> <li> <p>\u4e3b\u8bed\uff1a   \u5c71\u7530\u3055\u3093\u304c\u6765\u308b\u3002\u2192 \u5c71\u7530\u5148\u751f\u8981\u6765\u3002</p> </li> <li> <p>\u72b6\u6001\u7684\u4e3b\u4f53\uff08\u5f62\u5bb9\u8bcd/\u5b58\u5728\u8868\u8fbe\uff09\uff1a   \u7a7a\u304c\u9752\u3044\u3002\u2192 \u5929\u7a7a\u662f\u84dd\u8272\u7684\u3002   \u672c\u304c\u3042\u308b\u3002\u2192 \u6709\u4e66\u3002</p> </li> <li> <p>\u8868\u8fbe\u613f\u671b\u6216\u80fd\u529b\uff1a   \u30d1\u30bd\u30b3\u30f3\u304c\u307b\u3057\u3044\u3002\u2192 \u60f3\u8981\u7535\u8111\u3002   \u82f1\u8a9e\u304c\u8a71\u305b\u308b\u3002\u2192 \u4f1a\u8bf4\u82f1\u8bed\u3002   \u30d4\u30a2\u30ce\u304c\u597d\u304d\u3060\u3002\u2192 \u559c\u6b22\u94a2\u7434\u3002</p> </li> </ul>"},{"location":"notes/japanese/case-particles/#2","title":"2. \uff5e\u3092","text":"<p>\u529f\u80fd\uff1a</p> <ul> <li>\u8868\u793a\u52a8\u4f5c\u7684\u76f4\u63a5\u5bf9\u8c61\uff08\u5bbe\u8bed\uff09\u3002</li> <li>\u8868\u793a\u79fb\u52a8\u7684\u8d77\u70b9\u6216\u7ecf\u8fc7\u7684\u573a\u6240\u3002</li> </ul> <p>\u7528\u6cd5\u4e3e\u4f8b\uff1a</p> <ul> <li> <p>\u52a8\u4f5c\u7684\u5bf9\u8c61\uff1a   \u672c\u3092\u8aad\u3080\u3002\u2192 \u8bfb\u4e66\u3002</p> </li> <li> <p>\u79fb\u52a8\u7684\u8d77\u70b9\uff1a   \u5bb6\u3092\u51fa\u308b\u3002\u2192 \u51fa\u95e8\u3002   \u5341\u5b57\u8def\u3092\u66f2\u304c\u308b\u3002\u2192 \u5728\u5341\u5b57\u8def\u53e3\u8f6c\u5f2f\u3002</p> </li> <li> <p>\u62bd\u8c61\u5bbe\u8bed\uff1a   \u697d\u3057\u3044\u4e00\u65e5\u3092\u904e\u3054\u3059\u3002\u2192 \u5ea6\u8fc7\u6109\u5feb\u7684\u4e00\u5929\u3002</p> </li> </ul>"},{"location":"notes/japanese/case-particles/#3","title":"3. \uff5e\u306b","text":"<p>\u529f\u80fd\uff1a</p> <ul> <li>\u8868\u793a\u52a8\u4f5c\u7684\u76ee\u7684\u5730\u3001\u65f6\u95f4\u70b9\u3001\u63a5\u53d7\u8005\u6216\u53d8\u5316\u7684\u7ed3\u679c\u7b49\u3002</li> </ul> <p>\u7528\u6cd5\u4e3e\u4f8b\uff1a</p> <ul> <li> <p>\u76ee\u7684\u5730\uff1a   \u6771\u4eac\u306b\u884c\u304f\u3002\u2192 \u53bb\u4e1c\u4eac\u3002</p> </li> <li> <p>\u65f6\u95f4\u70b9\uff1a   7\u6642\u306b\u8d77\u304d\u308b\u3002\u2192 \u4e03\u70b9\u8d77\u5e8a\u3002</p> </li> <li> <p>\u52a8\u4f5c\u63a5\u53d7\u8005\uff1a   \u5f35\u3055\u3093\u306b\u4f1a\u3046\u3002\u2192 \u89c1\u5f20\u4e09\u3002   \u5c71\u7530\u3055\u3093\u306b\u672c\u3092\u8aad\u307e\u305b\u308b\u3002\u2192 \u8ba9\u5c71\u7530\u5148\u751f\u8bfb\u4e66\u3002</p> </li> <li> <p>\u53d8\u5316\u7ed3\u679c\u6216\u72b6\u6001\uff1a   \u6c34\u304c\u6c37\u306b\u306a\u308b\u3002\u2192 \u6c34\u53d8\u6210\u51b0\u3002</p> </li> <li> <p>\u76f8\u4f3c\u5bf9\u8c61\uff1a   \u304a\u7236\u3055\u3093\u306b\u4f3c\u3066\u3044\u308b\u3002\u2192 \u50cf\u7236\u4eb2\u3002</p> </li> </ul>"},{"location":"notes/japanese/case-particles/#4","title":"4. \uff5e\u3078","text":"<p>\u529f\u80fd\uff1a</p> <ul> <li>\u8868\u793a\u52a8\u4f5c\u7684\u65b9\u5411\u6216\u79fb\u52a8\u76ee\u6807\u3002</li> </ul> <p>\u7528\u6cd5\u4e3e\u4f8b\uff1a</p> <ul> <li>\u98db\u884c\u6a5f\u306f\u5357\u3078\u98db\u3093\u3067\u3044\u304f\u3002\u2192 \u98de\u673a\u5411\u5357\u98de\u53bb\u3002  </li> <li>\u5b66\u6821\u3078\u884c\u304f\u3002\u2192 \u53bb\u5b66\u6821\u3002</li> </ul>"},{"location":"notes/japanese/case-particles/#5","title":"5. \uff5e\u304b\u3089","text":"<p>\u529f\u80fd\uff1a</p> <ul> <li>\u8868\u793a\u52a8\u4f5c\u3001\u65f6\u95f4\u6216\u4e8b\u7269\u7684\u8d77\u70b9\u6216\u6765\u6e90\u3002</li> </ul> <p>\u7528\u6cd5\u4e3e\u4f8b\uff1a</p> <ul> <li> <p>\u5730\u70b9\u8d77\u70b9\uff1a   \u4e2d\u56fd\u304b\u3089\u6765\u305f\u3002\u2192 \u4ece\u4e2d\u56fd\u6765\u3002</p> </li> <li> <p>\u65f6\u95f4\u8d77\u70b9\uff1a   \u660e\u65e5\u304b\u3089\u590f\u4f11\u307f\u3060\u3002\u2192 \u660e\u5929\u5f00\u59cb\u653e\u6691\u5047\u3002</p> </li> <li> <p>\u6765\u6e90\u6216\u539f\u56e0\uff1a   \u30d6\u30c9\u30a6\u304b\u3089\u30ef\u30a4\u30f3\u3092\u4f5c\u308b\u3002\u2192 \u7528\u8461\u8404\u5236\u4f5c\u8461\u8404\u9152\u3002   \u5148\u751f\u304b\u3089\u8912\u3081\u3089\u308c\u308b\u3002\u2192 \u88ab\u8001\u5e08\u8868\u626c\u3002</p> </li> </ul>"},{"location":"notes/japanese/case-particles/#6","title":"6. \uff5e\u307e\u3067","text":"<p>\u529f\u80fd\uff1a</p> <ul> <li>\u8868\u793a\u52a8\u4f5c\u3001\u65f6\u95f4\u6216\u8303\u56f4\u7684\u7ec8\u70b9\u3002</li> </ul> <p>\u7528\u6cd5\u4e3e\u4f8b\uff1a</p> <ul> <li> <p>\u5730\u70b9\u7ec8\u70b9\uff1a   \u5bb6\u307e\u3067\u6b69\u304f\u3002\u2192 \u8d70\u5230\u5bb6\u3002</p> </li> <li> <p>\u65f6\u95f4\u8303\u56f4\uff1a   8\u67081\u65e5\u304b\u30899\u670830\u65e5\u307e\u3067\u590f\u4f11\u307f\u3060\u3002\u2192 \u4ece8\u67081\u65e5\u52309\u670830\u65e5\u653e\u6691\u5047\u3002</p> </li> <li> <p>\u8303\u56f4\u7ec8\u70b9\uff1a   \u5b50\u4f9b\u304b\u3089\u5927\u4eba\u307e\u3067\u4eba\u6c17\u304c\u3042\u308b\u3002\u2192 \u4ece\u5c0f\u5b69\u5230\u5927\u4eba\u90fd\u53d7\u6b22\u8fce\u3002</p> </li> </ul>"},{"location":"notes/japanese/case-particles/#7","title":"7. \uff5e\u3088\u308a","text":"<p>\u529f\u80fd\uff1a</p> <ul> <li>\u8868\u793a\u6bd4\u8f83\u7684\u57fa\u51c6\uff0c\u6216\u67d0\u4e2a\u8d77\u70b9\u3002</li> </ul> <p>\u7528\u6cd5\u4e3e\u4f8b\uff1a</p> <ul> <li> <p>\u6bd4\u8f83\u57fa\u51c6\uff1a   \u5317\u4eac\u306f\u6771\u4eac\u3088\u308a\u4eba\u304c\u591a\u3044\u3002\u2192 \u5317\u4eac\u6bd4\u4e1c\u4eac\u4eba\u591a\u3002</p> </li> <li> <p>\u8d77\u70b9\u7528\u6cd5\uff1a   \u3053\u308c\u3088\u308a\u4f1a\u8b70\u3092\u59cb\u3081\u308b\u3002\u2192 \u4ece\u73b0\u5728\u5f00\u59cb\u5f00\u4f1a\u3002</p> </li> </ul>"},{"location":"notes/japanese/case-particles/#8","title":"8. \uff5e\u3067","text":"<p>\u57fa\u672c\u7528\u6cd5\uff1a</p> <ul> <li> <p>\u5730\u70b9\uff1a\u8868\u793a\u52a8\u4f5c\u53d1\u751f\u7684\u5730\u70b9\u3002   \u98df\u5802\u3067\u3054\u98ef\u3092\u98df\u3079\u308b\u3002\u2192 \u5728\u98df\u5802\u5403\u996d\u3002</p> </li> <li> <p>\u6761\u4ef6\uff1a\u8868\u793a\u4e8b\u7269\u6210\u7acb\u7684\u6761\u4ef6\u3002   \u65e5\u672c\u3067\u306f\u30013\u6708\u304b\u30895\u6708\u307e\u3067\u306f\u6625\u3067\u3059\u3002\u2192 \u5728\u65e5\u672c\uff0c3\u6708\u52305\u6708\u662f\u6625\u5929\u3002</p> </li> <li> <p>\u65b9\u5f0f/\u624b\u6bb5\uff1a\u8868\u793a\u884c\u4e3a\u7684\u65b9\u5f0f\u6216\u624b\u6bb5\u3002   \u30da\u30f3\u3067\u5b57\u3092\u66f8\u304f\u3002\u2192 \u7528\u7b14\u5199\u5b57\u3002</p> </li> <li> <p>\u539f\u6750\u6599\uff1a\u8868\u793a\u5236\u4f5c\u67d0\u7269\u6240\u4f7f\u7528\u7684\u539f\u6750\u6599\u3002   \u6728\u3067\u673a\u3092\u4f5c\u308b\u3002\u2192 \u7528\u6728\u5934\u505a\u684c\u5b50\u3002</p> </li> <li> <p>\u539f\u56e0\uff1a\u8868\u793a\u4e8b\u4ef6\u53d1\u751f\u7684\u539f\u56e0\u3002   \u75c5\u6c17\u3067\u5b66\u6821\u3092\u4f11\u3080\u3002\u2192 \u56e0\u75c5\u8bf7\u5047\u3002</p> </li> <li> <p>\u4f34\u968f\u72b6\u6001\uff1a\u8868\u793a\u4f34\u968f\u7684\u52a8\u4f5c\u6216\u72b6\u6001\u3002   \u88f8\u8db3\u3067\u6b69\u304f\u3002\u2192 \u5149\u811a\u8d70\u8def\u3002</p> </li> <li> <p>\u65f6\u95f4\uff1a\u8868\u793a\u67d0\u4e2a\u52a8\u4f5c\u6216\u72b6\u6001\u6210\u7acb\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u3002   \u65e5\u672c\u8a9e\u304c1\u5e74\u9593\u3067\u4e0a\u624b\u306b\u306a\u3063\u305f\u3002\u2192 \u65e5\u8bed\u5728\u4e00\u5e74\u5185\u53d8\u5f97\u719f\u7ec3\u4e86\u3002</p> </li> </ul>"},{"location":"notes/japanese/case-particles/#9","title":"9. \uff5e\u306e","text":"<p>\u57fa\u672c\u7528\u6cd5\uff1a</p> <ul> <li>\u6240\u5c5e\u5173\u7cfb\uff1a\u8868\u793a\u540d\u8bcd\u4e4b\u95f4\u7684\u6240\u5c5e\u5173\u7cfb\u3002   \u4f1a\u793e\u306e\u4eba \u2192 \u516c\u53f8\u7684\u5458\u5de5   \u673a\u306e\u4e0a \u2192 \u684c\u5b50\u4e0a   \u96e8\u304c\u964d\u308b\u65e5 \u2192 \u4e0b\u96e8\u7684\u65e5\u5b50</li> </ul> <p>\u6ce8\u610f\u70b9\uff1a</p> <ul> <li>\u7684\uff1a\u7528\u4e8e\u8fde\u63a5\u4e24\u4e2a\u540d\u8bcd\uff0c\u8868\u793a\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u6240\u5c5e\u5173\u7cfb\u3002</li> </ul>"},{"location":"notes/japanese/case-particles/#10","title":"10. \uff5e\u3068","text":"<p>\u57fa\u672c\u7528\u6cd5\uff1a</p> <ul> <li> <p>\u5e76\u5217\u4e3b\u8bed\uff1a\u8868\u793a\u591a\u4e2a\u4e3b\u8bed\u5171\u540c\u8fdb\u884c\u67d0\u4e2a\u52a8\u4f5c\u3002   \u7530\u4e2d\u3055\u3093\u3068\u5409\u7530\u3055\u3093\u306f\u7d50\u5a5a\u3057\u307e\u3059\u3002\u2192 \u7530\u4e2d\u548c\u5409\u7530\u7ed3\u5a5a\u3002</p> </li> <li> <p>\u540c\u4f34\uff1a\u8868\u793a\u52a8\u4f5c\u7684\u540c\u4f34\u3002   \u9a6c\u4e91\u3055\u3093\u3068\u771f\u7531\u7f8e\u3055\u3093\u304c\u7d50\u5a5a\u3057\u307e\u3059\u3002\u2192 \u9a6c\u4e91\u548c\u771f\u7531\u7f8e\u7ed3\u5a5a\u3002</p> </li> <li> <p>\u57fa\u51c6\uff1a\u8868\u793a\u6bd4\u8f83\u7684\u57fa\u51c6\u3002   \u3042\u306e\u304b\u3070\u3093\u306f\u79c1\u306e\u304b\u3070\u3093\u3068\u540c\u3058\u3060\u3002\u2192 \u90a3\u4e2a\u5305\u548c\u6211\u7684\u5305\u4e00\u6837\u3002</p> </li> <li> <p>\u5f15\u7528\uff1a\u8868\u793a\u5f15\u7528\u7684\u5185\u5bb9\u3002   \u671d\u8d77\u304d\u305f\u3068\u304d\u306b\u3001\u300c\u304a\u306f\u3088\u3046\u300d\u3068\u8a00\u3044\u307e\u3059\u3002\u2192 \u65e9\u4e0a\u8d77\u6765\u65f6\u8bf4\u201c\u65e9\u4e0a\u597d\u201d\u3002</p> </li> <li> <p>\u7701\u7565\u5f62\u5f0f\uff1a\u53ef\u4ee5\u7701\u7565\u91cd\u590d\u7684\u90e8\u5206\u3002   \u30bf\u30ca\u30ab\u3055\u3093\u3068\u30bf\u30b1\u30c0\u3055\u3093\u3068\u2026 \u2192 \u5854\u7eb3\u5361\u548c\u7af9\u7530\u2026\u2026</p> </li> </ul> <p>\u6ce8\u610f\u70b9\uff1a</p> <ul> <li>\u5ba0\u5177\u6807\u8bb0\uff1a\u62d6\u524d\u9762\u7684\u90e8\u5206\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5c0f\u53e5\u6216\u5ba0\u5177\uff0c\u9700\u8981\u52a0\u4e0a\u300c\u304c\u300d\u3002</li> </ul>"},{"location":"notes/japanese/case-particles/#11","title":"11. \uff5e\u3084","text":"<p>\u57fa\u672c\u7528\u6cd5\uff1a</p> <ul> <li>\u5217\u4e3e\uff1a\u8868\u793a\u5217\u4e3e\u591a\u4e2a\u4e8b\u7269\uff0c\u901a\u5e38\u7528\u4e8e\u4e0d\u5b8c\u5168\u5217\u4e3e\u3002   \u673a\u306e\u4e0a\u306b\u672c\u3084\u30ce\u30fc\u30c8\u306a\u3069\u304c\u3042\u308b\u3002\u2192 \u684c\u5b50\u4e0a\u6709\u4e00\u4e9b\u4e66\u548c\u7b14\u8bb0\u672c\u7b49\u3002</li> </ul> <p>\u6ce8\u610f\u70b9\uff1a</p> <ul> <li>\u8868\u793a\u5217\u4e3e\u65f6\uff0c\u901a\u5e38\u540e\u9762\u4f1a\u52a0\u4e0a\u300c\u306a\u3069\u300d\u4ee5\u5f3a\u8c03\u4e0d\u5b8c\u5168\u5217\u4e3e\u3002</li> </ul>"},{"location":"notes/japanese/plan/","title":"\u65e5\u672c\u8a9e\u3092\u52c9\u5f37\u3057\u307e\u3057\u3087\u3046\uff1f","text":"<p>\u4e3a\u4ec0\u4e48\u7a81\u7136\u60f3\u5b66\u5462\uff1f\u5e94\u8be5\u662f\u4e0d\u7518\u4e8e\u5f53\u4e00\u4e2a\u534a\u540a\u5b50\u5427\u3002\u9ad8\u4e2d\u65f6\u628a\u4e94\u5341\u97f3\u8bb0\u4f4f\u540e\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u5df2\u7ecf\u80fd\u9605\u8bfb\u57fa\u672c\u7684\u65e5\u8bed\u6587\u5b57\u4e86\uff0c\u4e8e\u662f\u987a\u7740\u5728\u9713\u8679\u6587\u5316\u7684\u9053\u8def\u4e0a\u8d8a\u8d70\u8d8a\u8fdc\uff0c\u4e5f\u7531\u6b64\u5165\u5751\u4e86 J-POP/J-ROCK \u7684\u5927\u5751\u3002\u5230\u4eca\u5929\uff0c\u5927\u6982\u4e5f\u6709\u4e24\u5230\u4e09\u5e74\u4e86\u5427\u3002\u7136\u800c\u5728\u6211\u8fd8\u662f\u6ca1\u6709\u80fd\u529b\u6d41\u7545\u5730\u9274\u8d4f\u4efb\u4f55\u4e00\u90e8\u97f3\u4e50/\u6587\u5b66/\u6e38\u620f\u4f5c\u54c1\u3002\u62e5\u6709\u6c49\u5316\u7684\u4f5c\u54c1\u4ec5\u4ec5\u662f\u51b0\u5c71\u4e00\u89d2\uff0c\u800c\u4e00\u90e8\u4f5c\u54c1\u7ecf\u7531\u4ed6\u4eba\u7ffb\u8bd1\u540e\uff0c\u4e5f\u4f1a\u4e22\u5931\u5f88\u5927\u4e00\u90e8\u5206\u4fe1\u606f\u3002</p> <p>\u5728\u5927\u8111\u50f5\u5316\u4e4b\u524d\uff0c\u628a\u65e5\u8bed\u5b66\u4f1a\u5427\u3002</p>"},{"location":"notes/japanese/plan/#_2","title":"\u8ba1\u5212","text":"<p>\u4e09\u4e2a\u6708\u592a\u957f\u3001\u4e00\u4e2a\u6708\u592a\u77ed\uff0c\u6211\u51b3\u5b9a\u7528\u4e24\u4e2a\u6708\u65f6\u95f4\u901f\u901a\u3002</p> <p>\u5b66\u4e60\u8ba1\u5212\u57fa\u4e8e\u4e0b\u9762\u4e24\u4e2a\u5047\u8bbe\uff1a</p> <ul> <li>\u4eba\u7684\u8bb0\u5fc6\u80fd\u529b\u662f\u6709\u9650\u5ea6\u7684\uff0c\u7136\u800c\u9057\u5fd8\u80fd\u529b\u4e5f\u662f\u6709\u9650\u5ea6\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u6bcf\u5929\u80cc30\u4e2a\u5355\u8bcd\uff0c\u5728\u4e00\u4e2a\u6708\u540e\u5c31\u4f1a\u5fd8\u6389\u4e09\u4e2a\uff0c\u4e24\u4e2a\u6708\u7684\u65f6\u95f4\u5c31\u53ea\u80fd\u80cc\u4e0b\u7ea6\u7b49\u4e8e 2 x 30 x 30 x 0.7 = 1260 \u4e2a\u5355\u8bcd  \u4f46\u5982\u679c\u6bcf\u5929\u80cc200\u4e2a\u751a\u81f3300\u4e2a\uff0c\u5373\u4f7f\u635f\u8017\u7387\u7a0d\u5fae\u9ad8\u4e9b\uff0c\u5047\u8bbe 0.5 \u5427\uff0c\u4f1a\u5fd8\u8bb0\u4e00\u534a\u7684\u5355\u8bcd\uff0c\u4f46\u662f\u6700\u540e\u4e5f\u4f1a\u5269\u4e0b 2 x 30 x 200 x 0.5 = 6000 \u4e2a\u5355\u8bcd\u3002\u800c\u8fd9\u4e9b\u5355\u8bcd\u5df2\u7ecf\u5b8c\u5168\u591f\u4f60\u7684\u8bed\u8a00\u80fd\u529b\u8fbe\u5230\u4e00\u4e2a\u8f83\u4e3a\u719f\u7ec3\u7684\u6c34\u5e73\u4e86\u3002</li> <li>\u7cbe\u529b\u548c\u5174\u8da3\u662f\u4f1a\u968f\u65f6\u95f4\u9012\u51cf\u7684\uff0c\u4e00\u5b9a\u65f6\u95f4\u540e\u65e0\u6cd5\u4fdd\u8bc1\u548c\u521a\u5f00\u59cb\u4e00\u81f4\u7684\u5b66\u4e60\u6548\u7387\u3002</li> </ul> <p>\u524d\u4e09\u5929\u5b66\u4e60\u57fa\u672c\u8bed\u6cd5\uff08\u56e0\u4e3a\u901f\u901a\u5566\uff09\uff0c\u540e\u9762\u7684\u65f6\u95f4\u4e5f\u8bb8\u4f1a\u9009\u62e9\u4e00\u90e8\u611f\u5174\u8da3\u7684 GalGame \u7ffb\u8bd1\uff0c\u987a\u5e26\u79ef\u7d2f\u8bcd\u6c47\u91cf\u3002</p> <p>\u5b66\u4e60\u65f6\u95f4\u5e94\u5f53\u9075\u4ece\u67d0\u4e2a\u5355\u8c03\u9012\u51cf\u7684\u6570\u5b66\u516c\u5f0f\uff0c\u6682\u65f6\u8fd8\u6ca1\u62df\u5b9a\u597d\uff0c\u540e\u7eed\u4e5f\u8bb8\u4f1a\u5199\u4e00\u4e2a\u5c0f\u5de5\u5177\u7528\u6765\u7b80\u5316\u8ba1\u7b97\u548c\u8f85\u52a9\u5427\uff0c\u5e94\u8be5\u4f1a\u5305\u62ec\u9884\u6d4b\u548c\u8865\u507f\u7684\u529f\u80fd\u3002</p> <p>\u76ee\u6807\u53ea\u662f\u62e5\u6709\u9274\u8d4f\u65e5\u8bed\u4f5c\u54c1\u7684\u80fd\u529b\uff0c\u6240\u4ee5\u91cd\u70b9\u5728\u9605\u8bfb\u548c\u542c\u529b\u4e0a\u3002\u56e0\u4e3a6\u6708\u4e2d\u65ec\u8981\u8003\u82f1\u8bed\u56db\u7ea7\uff0c\u6240\u4ee5\u5076\u5c14\u4e5f\u4f1a\u63ba\u6742\u82f1\u8bed\u7684\u5b66\u4e60\u3002</p> <p>\u4e5f\u8bb8\u6bcf\u5929\u4f1a\u5728\u535a\u5ba2\u66f4\u65b0\u4e00\u7bc7\u5b66\u4e60\u7b14\u8bb0\uff0c\u4e0d\u8fc7\u4e0d\u4fdd\u8bc1\u8be6\u7ec6\u548c\u8d28\u91cf\uff0c\u53ea\u662f\u5bf9\u5bb9\u6613\u5fd8\u8bb0\u7684\u5185\u5bb9\u7684\u8bb0\u5f55\uff0c\u6216\u8005\u5f53\u5929\u5b66\u4e60\u7684\u8bcd\u6c47\u5217\u8868\u3002</p> <p>\u6070\u597d\u56db\u6708\u4f0a\u59cb\uff0c\u5c31\u4ece\u56db\u6708\u4e00\u53f7\u5230\u9ad8\u8003\u7ed3\u675f\uff08\u8e6d\u4e2a\u9ad8\u8003\u5012\u8ba1\u65f6\u5566\uff09\uff0c\u517166\u5929\u65f6\u95f4\u3002</p> <p>\u65e5\u672c\u8a9e\u3092\u52c9\u5f37\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"2025/08/22/zxhpc-2025-writeup/","title":"ZXHPC 2025 Writeup","text":"Tip <p>Kotoha \u304b\u308f\u3059\u304e\ud83d\ude2d<sup>1</sup></p> <p>\u90fd\u53bb\u542c Kotoha Cover \u7684 #\u3042\u304f\u3042\u8272\u3071\u308c\u3063\u3068</p> <p>\u56e0\u4e3a\u662f\u4e00\u8fb9\u8c03\u6574\u751f\u7269\u949f\u4e00\u8fb9\u6253\u6bd4\u8d5b\uff08\u867d\u7136\u5230\u6700\u540e\u4e5f\u6ca1\u6210\u529f\u628a\u751f\u7269\u949f\u8c03\u6574\u56de\u6765\uff09\uff0c\u51cc\u6668\u4e0a\u5206\u5e94\u8be5\u5f88\u8be1\u5f02\u5427www</p> <p>\u6700\u540e\u62ff\u5230\u4e86 Rank 2 \u7684\u6210\u7ee9\uff0c\u5176\u4e2d <code>md5-new</code> \u548c <code>traffic-detector</code> \u90fd\u62ff\u5230\u4e86 SOTA \u7684\u6210\u7ee9\uff0c\u603b\u4f53\u6765\u8bf4\u8fd8\u662f\u5f88\u6ee1\u610f\u7684\u5427</p> <p></p> <p>\u672c\u6b21\u6bd4\u8d5b\u6211\u4f7f\u7528\u7684\u4ee3\u7801\u5747\u53ef\u5728https://git.byr.moe/LiuliFox/zxhpc-writeup\u67e5\u770b</p>"},{"location":"2025/08/22/zxhpc-2025-writeup/#_1","title":"\u73af\u5883\u4fe1\u606f","text":"<p>\u8bc4\u6d4b\u59ec\u7684CPU\u4fe1\u606f\u5982\u4e0b</p> <pre><code>Architecture:          x86_64\nCPU op-mode(s):        32-bit, 64-bit\nByte Order:            Little Endian\nCPU(s):                40\nOn-line CPU(s) list:   0-39\nThread(s) per core:    1\nCore(s) per socket:    20\nSocket(s):             2\nNUMA node(s):          2\nVendor ID:             GenuineIntel\nCPU family:            6\nModel:                 85\nModel name:            Intel(R) Xeon(R) Gold 6148 CPU @ 2.40GHz\nStepping:              4\nCPU MHz:               2600.001\nCPU max MHz:           2401.0000\nCPU min MHz:           1000.0000\nBogoMIPS:              4800.00\nVirtualization:        VT-x\nL1d cache:             32K\nL1i cache:             32K\nL2 cache:              1024K\nL3 cache:              28160K\nNUMA node0 CPU(s):     0-19\nNUMA node1 CPU(s):     20-39\nFlags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti intel_ppin ssbd mba ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm mpx rdt_a avx512f avx512dq rdseed adx smap clflushopt clwb intel_pt avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts pku ospke md_clear flush_l1d arch_capabilities\n</code></pre> <p>\u7f16\u8bd1\u5668\u4fe1\u606f\uff1a</p> <code>HPCI</code><code>Local</code> <pre><code>g++ (binhub) 10.1.0\nCopyright (C) 2020 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre> <pre><code>g++ (Ubuntu 14.2.0-19ubuntu2) 14.2.0\nCopyright (C) 2024 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre> <p><code>a+b</code>\u3001<code>cos-sim</code>\u3001<code>md5-bf</code>\u3001<code>md5-new</code> \u5747\u4f7f\u7528\u96c6\u7fa4\u7248\u672c\u4e3a 10.1.0 \u7684 g++ \u7f16\u8bd1\u5668</p> <p><code>traffic-detector</code> \u4e3a\u672c\u673a\u7f16\u8bd1\u9759\u6001\u94fe\u63a5\uff0c\u4e0a\u4f20\u4e8c\u8fdb\u5236\u6587\u4ef6</p>"},{"location":"2025/08/22/zxhpc-2025-writeup/#a-plus-b","title":"a-plus-b","text":"\u9898\u9762 a-plus-b <p>A+B Problem</p> <p>\u9898\u76ee\u5185\u5bb9</p> <p>\u4e3a\u4e86\u5e2e\u52a9\u9009\u624b\u719f\u6089\u6bd4\u8d5b\u73af\u5883\u548c\u8bc4\u5206\u5668\uff0c\u6211\u4eec\u51c6\u5907\u4e86\u4e00\u9053\u7b80\u5355\u7684\u9898\u76ee\u3002\u901a\u8fc7\u8fd9\u9053\u9898\uff0c\u4f60\u53ef\u4ee5\u719f\u6089 slurm \u73af\u5883\u548c\u8bc4\u5206\u3001\u63d0\u4ea4\u6d41\u7a0b\u3002</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 A \u548c B\uff0c\u8bf7\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u5305\u542b\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570 A \u548c B (\\(\\(1 \\le A, B \\le 10^9\\)\\))\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a A \u548c B \u7684\u548c\u3002</p> <p>\u6837\u4f8b</p> <p>\u8f93\u5165\u6837\u4f8b <pre><code>3 5\n</code></pre> \u8f93\u51fa\u6837\u4f8b <pre><code>8\n</code></pre> \u8bc4\u5206\u6807\u51c6 \u4e24\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a 5 \u5206\uff0c\u5171 10 \u5206\u3002</p> <p>\u5176\u4ed6</p> <p>\u5173\u4e8e\u8bc4\u5206\u5668\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u89c1\u8bc4\u5206\u5668\u6587\u6863\u3002</p> <p>\u7b7e\u5230\u4e00\u4e0b</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; a + b;\n    return 0;\n}\n</code></pre>"},{"location":"2025/08/22/zxhpc-2025-writeup/#cos-sim","title":"cos-sim","text":"\u9898\u9762 cos-sim <p>Cosine Similarity</p> <p>\u6ce8\u610f\uff1a\u672c\u9898\u53ea\u80fd\u5728 Linux x86 \u7cfb\u7edf\u4e0a\u8fd0\u884c</p> <p>\u9898\u76ee\u5185\u5bb9</p> <p>\u4f59\u5f26\u76f8\u4f3c\u5ea6\u662f\u8861\u91cf\u4e24\u4e2a\u5411\u91cf\u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u65b9\u5411\u76f8\u4f3c\u6027\u7684\u6307\u6807\uff0c\u5b83\u901a\u8fc7\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u5939\u89d2\u7684\u4f59\u5f26\u503c\u6765\u5224\u65ad\u5b83\u4eec\u7684\u76f8\u4f3c\u7a0b\u5ea6\uff0c\u6570\u503c\u8303\u56f4\u5728 \\([-1, 1]\\) \u4e4b\u95f4\u3002\u5176\u5b9a\u4e49\u4e3a\uff1a</p> \\[ \\text{cosine\\_similarity}(A, B) = \\frac{A \\cdot B}{\\|A\\| \\|B\\|} = \\frac{\\sum_{i=1}^{D} A_i B_i}{\\sqrt{\\sum_{i=1}^{D} A_i^2} \\sqrt{\\sum_{i=1}^{D} B_i^2}} \\] <p>\u73b0\u5728\u7ed9\u5b9a \\(N\\) \u4e2a \\(D\\) \u7ef4\u5411\u91cf\uff0c\u6c42\u8fd9\u4e9b\u5411\u91cf\u4e24\u4e24\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002</p> <p>\u4e3a\u4e86\u51cf\u5c11\u8f93\u51fa\u6570\u636e\u91cf\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u6bcf\u4e2a\u5411\u91cf\u9664\u5176\u81ea\u8eab\u4ee5\u5916\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6700\u5927\u7684\u56db\u4e2a\u5411\u91cf\u5bf9\u5e94\u7684\u503c\u3002</p> <p>\u4f60\u7684\u7b54\u6848\u88ab\u89c6\u4e3a\u6b63\u786e\uff0c\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u8f93\u51fa\u6570\u503c\u4e0e\u6807\u51c6\u7ed3\u679c\u7684\u76f8\u5bf9\u6216\u7edd\u5bf9\u8bef\u5dee\u5c0f\u4e8e \\(10^{-6}\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u901a\u8fc7\u6807\u51c6\u8f93\u5165\u8f93\u5165\u5c0f\u7aef\u5e8f\u4e8c\u8fdb\u5236\u4e32\uff0c\u53ef\u53c2\u8003\u793a\u4f8b\u4ee3\u7801\u3002</p> <p>\u9996\u5148\u662f\u4e24\u4e2a <code>int32</code>\uff0c\u5206\u522b\u8868\u793a \\(N\\) \u548c \\(D\\)\u3002</p> <p>\u63a5\u4e0b\u6765\u662f \\(N \\times D\\) \u4e2a <code>float32</code>\uff0c\u8868\u793a \\(N\\) \u4e2a \\(D\\) \u7ef4\u5411\u91cf\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u901a\u8fc7\u6807\u51c6\u8f93\u51fa\u8f93\u51fa\u5c0f\u7aef\u5e8f\u4e8c\u8fdb\u5236\u4e32\uff0c\u53ef\u53c2\u8003\u793a\u4f8b\u4ee3\u7801\u3002</p> <p>\u8f93\u51fa \\(4N\\) \u4e2a <code>float32</code>\uff0c\u8868\u793a\u6bcf\u4e2a\u5411\u91cf\u9664\u5176\u81ea\u8eab\u4ee5\u5916\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6700\u5927\u7684\u56db\u4e2a\u5411\u91cf\u5bf9\u5e94\u7684\u503c\u3002</p> <p>\u8bc4\u5206\u6807\u51c6</p> <p>\u5171\u56db\u4e2a\u6d4b\u8bd5\u70b9\u3002</p> \u6d4b\u8bd5\u70b9 \u5206\u503c \\(N\\) \\(D\\) \\(T_\\text{std}\\) \\(T_\\text{max}\\) 1 25 1000 4096 0.1s 10s 2 25 5000 4096 0.25s 120s 3 25 10000 4096 0.6s 120s 4 25 20000 4096 1.8s 120s <p>\u82e5\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u8fd0\u884c\u65f6\u95f4\u4e3a \\(T\\)\uff0c\u5219\u8be5\u6d4b\u8bd5\u70b9\u5206\u503c\u4e3a</p> \\[ \\text{score} = \\begin{cases} 25 &amp;, T \\leq T_\\text{std} \\\\ 25\\left({\\log\\left(\\frac{T}{T_\\text{max}}\\right)}/{\\log\\left(\\frac{T_\\text{std}}{T_\\text{max}}\\right)}\\right) &amp;, T_\\text{std} &lt; T &lt; T_\\text{max} \\\\ 0 &amp;, T \\geq T_\\text{max} \\end{cases} \\] <p>\u793a\u4f8b\u7a0b\u5e8f</p> <pre><code>#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cstdint&gt;\n\nfloat cosine_similarity(const float *a, const float *b, int D) {\n    float dot_product = 0.0f;\n    float sum_a2 = 0.0f;\n    float sum_b2 = 0.0f;\n    for (int i = 0; i &lt; D; ++i) {\n        dot_product += a[i] * b[i];\n        sum_a2 += a[i] * a[i];\n        sum_b2 += b[i] * b[i];\n    }\n    return dot_product / (std::sqrt(sum_a2) * std::sqrt(sum_b2) + 1e-12);\n}\n\nint main() {\n    uint32_t N, D;\n    std::cin.read(reinterpret_cast&lt;char *&gt;(&amp;N), sizeof(N));\n    std::cin.read(reinterpret_cast&lt;char *&gt;(&amp;D), sizeof(D));\n    std::vector&lt;float&gt; data(N * D);\n    std::cin.read(reinterpret_cast&lt;char *&gt;(data.data()), N * D * sizeof(float));\n\n    for (int i = 0; i &lt; N; ++i) {\n        std::vector&lt;float&gt; cosine_sim(N);\n        for (int j = 0; j &lt; N; ++j) {\n            cosine_sim[j] = cosine_similarity(data.data() + i * D, data.data() + j * D, D);\n        }\n        std::partial_sort(cosine_sim.begin(), cosine_sim.begin() + 5, cosine_sim.begin() + N, std::greater&lt;float&gt;());\n        std::cout.write(reinterpret_cast&lt;char *&gt;(cosine_sim.data() + 1), 4 * sizeof(float));\n    }\n\n    return 0;\n}\n</code></pre> <p>\u8be5\u4ee3\u7801\u4ec5\u652f\u6301\u5c0f\u7aef\u5e8f\u8bbe\u5907\u3002</p> <p>\u8fd9\u4e2a\u9898\u76ee\u7684\u6838\u5fc3\u4efb\u52a1\u662f\uff0c\u7ed9\u6211\u4eec <code>N</code> \u4e2a <code>D</code> \u7ef4\u7684\u5411\u91cf\uff0c\u8981\u6211\u4eec\u7b97\u51fa\u6bcf\u4e2a\u5411\u91cf\u548c\u5176\u4ed6\u6240\u6709\u5411\u91cf\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff0c\u7136\u540e\u627e\u51fa\u6700\u5927\u7684\u90a3\u56db\u4e2a\u3002</p> <p>\u6700\u76f4\u89c2\u3001\u6700\u66b4\u529b\u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u8001\u8001\u5b9e\u5b9e\u5730\u5199\u4e24\u5c42\u5faa\u73af\uff1a\u5916\u5c42\u5faa\u73af\u904d\u5386\u5411\u91cf <code>i</code>\uff0c\u5185\u5c42\u5faa\u73af\u904d\u5386\u5411\u91cf <code>j</code>\uff0c\u7136\u540e\u5728\u6700\u91cc\u9762\u6839\u636e\u516c\u5f0f\u8ba1\u7b97 <code>i</code> \u548c <code>j</code> \u7684\u76f8\u4f3c\u5ea6\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5927\u6982\u662f <code>O(N\u00b2 * D)</code>\u3002\u8003\u8651\u5230 <code>N</code> \u6700\u5927\u80fd\u5230 20000\uff0c<code>D</code> \u662f 4096\uff0c\u8fd9\u4e2a\u8ba1\u7b97\u91cf\u662f\u5929\u6587\u6570\u5b57\uff0c\u80af\u5b9a\u4f1a\u8d85\u65f6\u3002</p>"},{"location":"2025/08/22/zxhpc-2025-writeup/#_2","title":"\u4f18\u5316\u601d\u8def","text":"<p>\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7684\u516c\u5f0f\uff1a</p> \\[ \\text{similarity}(A, B) = \\frac{A \\cdot B}{\\|A\\| \\cdot \\|B\\|} \\] <p>\u5206\u6bcd\u90e8\u5206\u7684 \\(||A||\\) \u548c \\(||B||\\) \u662f\u5411\u91cf\u7684\u6a21\u957f\uff0c\u8ba1\u7b97\u5b83\u9700\u8981\u5f00\u5e73\u65b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u8017\u65f6\u7684\u64cd\u4f5c\u3002\u5982\u679c\u5728 <code>N*N</code> \u7684\u5faa\u73af\u91cc\u53cd\u590d\u8ba1\u7b97\uff0c\u6027\u80fd\u635f\u5931\u4f1a\u975e\u5e38\u5927</p> <p>\u6211\u4eec\u53ef\u4ee5\u9884\u5148\u5c06\u6240\u6709\u5411\u91cf\u90fd\u5904\u7406\u6210\u5355\u4f4d\u5411\u91cf\uff0c\u5373\u5f52\u4e00\u5316</p> <p>\u5f52\u4e00\u5316\u4e4b\u540e\uff0c\u6240\u6709\u5411\u91cf\u7684\u6a21\u957f \\(||V||\\) \u90fd\u53d8\u6210\u4e86 1\u3002\u8fd9\u65f6\u516c\u5f0f\u5c31\u53d8\u6210\u4e86\uff1a</p> \\[ \\text{similarity}(A', B') = \\frac{A' \\cdot B'}{1 \\cdot 1} = A' \\cdot B' \\] <p>\u8ba1\u7b97\u4f59\u5f26\u76f8\u4f3c\u5ea6\u88ab\u7b80\u5316\u6210\u4e86\u53ea\u8ba1\u7b97\u70b9\u79ef\u3002</p> <p>\u8fd9\u4e00\u6b65\u7684\u5f00\u9500\u662f <code>O(N * D)</code>\uff0c\u76f8\u6bd4\u4e8e\u540e\u7eed <code>N\u00b2</code> \u7ea7\u522b\u7684\u8ba1\u7b97\uff0c\u8fd9\u70b9\u9884\u5904\u7406\u7684\u5f00\u9500\u5b8c\u5168\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\uff0c\u4f46\u5b83\u5e26\u6765\u7684\u6536\u76ca\u662f\u5de8\u5927\u7684</p> <p>\u4e4b\u540e\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u9ad8\u6548\u8ba1\u7b97 N*N \u7684\u70b9\u79ef\u77e9\u9635\uff0c\u6211\u9996\u5148\u60f3\u5230\u4e86\u8fd9\u4e2a\u65b9\u5f0f\uff1a</p> <p>\u628a <code>N</code> \u4e2a <code>D</code> \u7ef4\u5411\u91cf\u770b\u6210\u4e00\u4e2a <code>N x D</code> \u7684\u77e9\u9635 <code>M</code>\u3002\u90a3\u4e48\uff0c<code>M</code> \u4e58\u4ee5\u5b83\u81ea\u5df1\u7684\u8f6c\u7f6e <code>M^T</code>\uff0c\u5f97\u5230\u7684\u7ed3\u679c <code>S = M * M^T</code> \u662f\u4e00\u4e2a <code>N x N</code> \u7684\u77e9\u9635\u3002\u8fd9\u4e2a\u7ed3\u679c\u77e9\u9635 <code>S</code> \u91cc\u9762\uff0c<code>S_ij</code> \u7684\u503c\u6b63\u597d\u5c31\u662f\u5411\u91cf <code>i</code> \u548c\u5411\u91cf <code>j</code> \u7684\u70b9\u79ef</p> <p>\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7 BLAS \u5e93\u91cc\u7684 <code>cblas_sgemm</code> \u51fd\u6570\uff08\u901a\u7528\u77e9\u9635\u4e58\u6cd5\uff09\u4e00\u6b65\u5b8c\u6210</p>"},{"location":"2025/08/22/zxhpc-2025-writeup/#_3","title":"\u5c0f\u89c4\u6a21\u4f18\u5316","text":"<p>\u7136\u540e\u5c31\u80fd\u5f00\u9999\u69df...\u4e0d\u5bf9\uff0c\u600e\u4e48\u5c0f\u77e9\u9635\u7b97\u5f97\u8fd9\u4e48\u6162\u5462\uff1f\u66b4\u529b\u9010\u70b9\u8ba1\u7b97\u5728\u5c0f\u89c4\u6a21\u53cd\u800c\u66f4\u5feb\uff01\uff1f</p> <p>\u90a3\u5c31\u6839\u636e N \u7684\u5927\u5c0f\u5224\u65ad\u4f7f\u7528\u66b4\u529b\u8ba1\u7b97\u8fd8\u662f\u77e9\u9635\u4e58\u6cd5\uff01</p> <p>\u5199\u4e86\u4e00\u4e2a <code>benchmark.cpp</code> \u7a0b\u5e8f\u5728\u4e0d\u540c\u7684 <code>N</code> \u503c\u4e0b\u5bf9\u8fd9\u4e24\u4e2a\u65b9\u6848\u8fdb\u884c\u4e86\u6027\u80fd\u6d4b\u8bd5</p> benchmark.cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cstdint&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n#include &lt;cblas.h&gt;\n#include &lt;omp.h&gt;\n#include &lt;chrono&gt;\n\nusing namespace std;\nusing namespace std::chrono;\n\n// \u65b9\u68481\uff1a\u9010\u70b9\u8ba1\u7b97\nvoid brute_force(uint32_t N, uint32_t D, const vector&lt;float&gt;&amp; data) {\n    #pragma omp parallel for\n    for (uint32_t i = 0; i &lt; N; ++i) {\n        const float* vec_i = data.data() + (size_t)i * D;\n        float a=-1,b=-1,c=-1,d=-1;\n        for (uint32_t j = 0; j &lt; N; ++j) {\n            if (i == j) continue;\n            const float* vec_j = data.data() + (size_t)j * D;\n            float sim = cblas_sdot((int)D, vec_i, 1, vec_j, 1);\n            if (sim &gt; a){ d=c; c=b; b=a; a=sim; }\n            else if(sim &gt; b){ d=c; c=b; b=sim; }\n            else if(sim &gt; c){ d=c; c=sim; }\n            else if(sim &gt; d){ d=sim; }\n        }\n    }\n}\n\n// \u65b9\u68482\uff1a\u77e9\u9635\u4e58\u6cd5\nvoid gemm_based(uint32_t N, uint32_t D, const vector&lt;float&gt;&amp; data) {\n    vector&lt;float&gt; cos_matrix((size_t)N * N);\n    cblas_sgemm(\n        CblasRowMajor, CblasNoTrans, CblasTrans,\n        N, N, D,\n        1.0f,\n        data.data(), D,\n        data.data(), D,\n        0.0f,\n        cos_matrix.data(), N\n    );\n    #pragma omp parallel for\n    for (uint32_t i = 0; i &lt; N; ++i) {\n        float* row = cos_matrix.data() + (size_t)i * N;\n        row[i] = -1.0f;\n        float a=-1,b=-1,c=-1,d=-1;\n        for(uint32_t j=0;j&lt;N;j++){\n            float sim = row[j];\n            if(sim &gt; a){ d=c; c=b; b=a; a=sim; }\n            else if(sim &gt; b){ d=c; c=b; b=sim; }\n            else if(sim &gt; c){ d=c; c=sim; }\n            else if(sim &gt; d){ d=sim; }\n        }\n    }\n}\n\nint main() {\n    uint32_t D = 4096;\n    vector&lt;int&gt; testNs = {256, 512, 1024, 1500, 2000, 3000, 4000};\n\n    cout &lt;&lt; \"Benchmarking brute_force vs gemm...\\n\";\n    for (auto N : testNs) {\n        vector&lt;float&gt; data((size_t)N * D);\n        // \u968f\u673a\u521d\u59cb\u5316\n        for (size_t i = 0; i &lt; data.size(); i++) {\n            data[i] = (float)rand() / RAND_MAX;\n        }\n        // \u5f52\u4e00\u5316\n        for (uint32_t i = 0; i &lt; N; i++) {\n            float sum=0;\n            for(uint32_t j=0;j&lt;D;j++) sum += data[i*D+j]*data[i*D+j];\n            float inv = 1.0f/(sqrt(sum)+1e-12f);\n            for(uint32_t j=0;j&lt;D;j++) data[i*D+j] *= inv;\n        }\n\n        auto start = high_resolution_clock::now();\n        brute_force(N, D, data);\n        auto end = high_resolution_clock::now();\n        double t1 = duration_cast&lt;milliseconds&gt;(end - start).count();\n\n        start = high_resolution_clock::now();\n        gemm_based(N, D, data);\n        end = high_resolution_clock::now();\n        double t2 = duration_cast&lt;milliseconds&gt;(end - start).count();\n\n        cout &lt;&lt; \"N=\"&lt;&lt;N&lt;&lt;\" brute=\"&lt;&lt;t1&lt;&lt;\" ms  gemm=\"&lt;&lt;t2&lt;&lt;\" ms  -&gt; faster: \"\n             &lt;&lt; (t1&lt;t2?\"brute\":\"gemm\") &lt;&lt; \"\\n\";\n    }\n\n    return 0;\n}\n</code></pre> <p>\u7ed3\u679c\uff1a <pre><code>Benchmarking brute_force vs gemm...\nN=256 brute=34 ms  gemm=66 ms  -&gt; faster: brute\nN=512 brute=21 ms  gemm=55 ms  -&gt; faster: brute\nN=1024 brute=23 ms  gemm=22 ms  -&gt; faster: gemm\nN=1500 brute=48 ms  gemm=25 ms  -&gt; faster: gemm\nN=2000 brute=165 ms  gemm=49 ms  -&gt; faster: gemm\nN=3000 brute=556 ms  gemm=98 ms  -&gt; faster: gemm\nN=4000 brute=1020 ms  gemm=73 ms  -&gt; faster: gemm\n</code></pre></p> <ul> <li>\u5f53 <code>N</code> \u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff08\u6bd4\u5982\u51e0\u767e\uff09\uff0c<code>cblas_sdot</code> \u53cd\u800c\u66f4\u5feb\u3002\u56e0\u4e3a <code>sgemm</code> \u867d\u7136\u7406\u8bba\u6548\u7387\u9ad8\uff0c\u4f46\u5b83\u672c\u8eab\u6709\u4e00\u4e9b\u56fa\u5b9a\u7684\u542f\u52a8\u5f00\u9500\uff0c\u800c\u4e14\u5185\u5b58\u5206\u914d\u4e5f\u9700\u8981\u65f6\u95f4\u3002\u6570\u636e\u91cf\u5c0f\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u989d\u5916\u5f00\u9500\u5c31\u663e\u5f97\u6bd4\u8f83\u7a81\u51fa\u4e86</li> <li>\u5f53 <code>N</code> \u589e\u5927\u5230\u67d0\u4e2a\u4e34\u754c\u70b9\u4e4b\u540e\uff0c<code>cblas_sgemm</code> \u7684\u4f18\u52bf\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u5b83\u7684\u8ba1\u7b97\u6548\u7387\u589e\u957f\u5f97\u66f4\u5feb</li> </ul> <p>\u901a\u8fc7\u6211\u4eec\u7684\u6d4b\u8bd5\uff0c\u8fd9\u4e2a\u4e34\u754c\u70b9\u5927\u7ea6\u5728 <code>N = 1024</code> \u5de6\u53f3</p> <p>\u56e0\u6b64\u6700\u7ec8\u4f7f\u7528\u6df7\u5408\u7b56\u7565 - \u5982\u679c <code>N &lt; 1024</code>\uff0c\u6211\u4eec\u5c31\u7528\u9010\u70b9\u8ba1\u7b97\u7684\u65b9\u6848 - \u5982\u679c <code>N &gt;= 1024</code>\uff0c\u6211\u4eec\u5c31\u7528\u77e9\u9635\u4e58\u6cd5\u7684\u65b9\u6848</p> <p>\u8fd9\u6837\uff0c\u65e0\u8bba\u8f93\u5165\u6570\u636e\u7684\u89c4\u6a21\u5982\u4f55\uff0c\u7a0b\u5e8f\u90fd\u80fd\u81ea\u52a8\u9009\u62e9\u5f53\u524d\u6700\u4f18\u7684\u7b97\u6cd5\u8def\u5f84</p> <p>\u6700\u7ec8\u5f97\u5206 99.0 pts</p> <p>1pts\u5dee\u5728N=1000\u65f6\uff0c\u61d2\u5f97\u51f9\u5206</p> \u6700\u7ec8\u4f18\u5316\u4ee3\u7801 (99.0pts) <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cstdint&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n#include &lt;cblas.h&gt;\n#include &lt;omp.h&gt;\n\nint main() {\n    uint32_t N, D;\n    std::cin.read(reinterpret_cast&lt;char*&gt;(&amp;N), sizeof(N));\n    std::cin.read(reinterpret_cast&lt;char*&gt;(&amp;D), sizeof(D));\n\n    std::vector&lt;float&gt; data(static_cast&lt;size_t&gt;(N) * D);\n    std::cin.read(reinterpret_cast&lt;char*&gt;(data.data()), N * D * sizeof(float));\n\n    std::vector&lt;float&gt; top4_sim(static_cast&lt;size_t&gt;(N) * 4);\n\n    if (N &lt; 1024) { // 1024 from benchmark.cpp\n        #pragma omp parallel for \n        for (uint32_t i = 0; i &lt; N; ++i) {\n            float sum = 0.0f;\n            const uint32_t base = i * D;\n            for (uint32_t j = 0; j &lt; D; ++j) {\n                float v = data[base + j];\n                sum += v * v;\n            }\n            float denom = std::sqrt(sum) + 1e-12f;\n            float inv = 1.0f / denom;\n            for (uint32_t j = 0; j &lt; D; ++j) {\n                data[base + j] *= inv;\n            }\n        }\n\n        #pragma omp parallel for\n        for (uint32_t i = 0; i &lt; N; ++i) {\n            const float* vec_i = data.data() + static_cast&lt;size_t&gt;(i) * D;\n\n            float a = -1.0f, b = -1.0f, c = -1.0f, d = -1.0f;\n\n            for (uint32_t j = 0; j &lt; N; ++j) {\n                if (i == j) continue;\n                const float* vec_j = data.data() + static_cast&lt;size_t&gt;(j) * D;\n\n                float sim = cblas_sdot((int)D, vec_i, 1, vec_j, 1);\n\n                if (sim &gt; a) { d=c; c=b; b=a; a=sim; }\n                else if (sim &gt; b) { d=c; c=b; b=sim; }\n                else if (sim &gt; c) { d=c; c=sim; }\n                else if (sim &gt; d) { d=sim; }\n            }\n\n            float* out = top4_sim.data() + static_cast&lt;size_t&gt;(i) * 4;\n            out[0] = a; out[1] = b; out[2] = c; out[3] = d;\n        }\n\n    } else {\n        std::vector&lt;float&gt; norms(N);\n        #pragma omp parallel for\n        for (uint32_t i = 0; i &lt; N; ++i) {\n            float sum = 0.0f;\n            for (uint32_t j = 0; j &lt; D; ++j) {\n                float val = data[i * D + j];\n                sum += val * val;\n            }\n            norms[i] = std::sqrt(sum) + 1e-12f;\n            for (uint32_t j = 0; j &lt; D; ++j) {\n                data[i * D + j] /= norms[i];\n            }\n        }\n\n        std::vector&lt;float&gt; cos_matrix(static_cast&lt;size_t&gt;(N) * N);\n        cblas_sgemm(\n            CblasRowMajor, CblasNoTrans, CblasTrans,\n            N, N, D,\n            1.0f,\n            data.data(), D,\n            data.data(), D,\n            0.0f,\n            cos_matrix.data(), N\n        );\n\n        #pragma omp parallel for\n        for (uint32_t i = 0; i &lt; N; ++i) {\n            float* row = cos_matrix.data() + static_cast&lt;size_t&gt;(i) * N;\n            row[i] = -1.0f;\n            float a=-1,b=-1,c=-1,d=-1;\n            for(uint32_t j=0;j&lt;N;j++){\n                float sim = row[j];\n                if(sim &gt; a){ d=c; c=b; b=a; a=sim; }\n                else if(sim &gt; b){ d=c; c=b; b=sim; }\n                else if(sim &gt; c){ d=c; c=sim; }\n                else if(sim &gt; d){ d=sim; }\n            }\n            float* out = top4_sim.data() + static_cast&lt;size_t&gt;(i) * 4;\n            out[0]=a; out[1]=b; out[2]=c; out[3]=d;\n        }\n    }\n\n    for (uint32_t i = 0; i &lt; N; ++i) {\n        std::cout.write(reinterpret_cast&lt;const char*&gt;(top4_sim.data() + static_cast&lt;size_t&gt;(i)*4),\n                        4 * sizeof(float));\n    }\n    return 0;\n}\n</code></pre>"},{"location":"2025/08/22/zxhpc-2025-writeup/#md5-bf","title":"md5-bf","text":"md5-bf <p>MD5 Brute Force</p> <p>\u9898\u76ee\u5185\u5bb9</p> <p>MD5 \u662f\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u4e8e1992\u5e74\u516c\u5f00\u3002\u5b83\u5c06\u4efb\u610f\u957f\u5ea6\u7684\u8f93\u5165\u6620\u5c04\u4e3a128\u4f4d\u7684\u54c8\u5e0c\u503c\u3002\u5c3d\u7ba1 MD5\u5728\u5bc6\u7801\u5b66\u4e0a\u5df2\u88ab\u8bc1\u660e\u4e0d\u591f\u5b89\u5168\uff0c\u4f46\u5b83\u4ecd\u7136\u5728\u6570\u636e\u5b8c\u6574\u6027\u6821\u9a8c\u7b49\u9886\u57df\u5f97\u5230\u5e7f\u6cdb\u5e94\u7528\u3002</p> <p>\u5728\u672c\u9898\u4e2d\uff0c\u4f60\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u52a0\u901fMD5\u54c8\u5e0c\u8ba1\u7b97\u3002\u4f60\u7684\u4efb\u52a1\u662f\u627e\u5230\u4e00\u4e2a\u7ed9\u5b9a\u7684\u76ee\u6807\u54c8\u5e0c\u503c\u5bf9\u5e94\u7684\u539f\u59cb\u8f93\u5165\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u4f60\u5c06\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08PRNG\uff09\u6765\u751f\u6210\u4e00\u7cfb\u5217\u53ef\u80fd\u7684\u8f93\u5165\uff0c\u5e76\u8ba1\u7b97\u5b83\u4eec\u7684MD5\u54c8\u5e0c\u503c\u3002\u4f60\u7684\u76ee\u6807\u662f\u627e\u5230\u7b2c\u4e00\u4e2a\u751f\u6210\u7684\u8f93\u5165\uff0c\u5176MD5\u54c8\u5e0c\u503c\u4e0e\u7ed9\u5b9a\u7684\u76ee\u6807\u54c8\u5e0c\u503c\u5339\u914d\uff0c\u5e76\u8f93\u51fa\u8be5\u8f93\u5165\u5728\u751f\u6210\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <p>\u751f\u6210\u5668\u7531 3 \u4e2a\u5f02\u6216\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08Xorshift\uff09\u7ec4\u6210\uff0c\u521d\u59cb\u79cd\u5b50\u7531 3 \u4e2a 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u3002\u6bcf\u6b21\u8c03\u7528\u751f\u6210\u5668\u65f6\uff0c\u5b83\u4f1a\u66f4\u65b0\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u5e76\u5f97\u52303\u4e2a64\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u7684\u4f2a\u968f\u673a\u6570\uff0c\u7136\u540e\u5728\u6bcf\u4e2a\u6574\u6570\u4e4b\u540e\u63d2\u5165 8 \u4e2a 0 \u5b57\u8282\uff0c\u5f62\u6210\u4e00\u4e2a 48 \u5b57\u8282\u7684\u8f93\u5165\u3002</p> <p>\u751f\u6210\u5668\u7684C++\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>class RndGen\n{\npublic:\n    RndGen(uint64_t s0, uint64_t s1, uint64_t s2)\n    {\n        s_[0] = s0;\n        s_[1] = s1;\n        s_[2] = s2;\n    }\n\n    RndGen() = delete;\n\n    void generate(uint64_t out[6])\n    {\n        out[0] = xorshift64(s_[0]);\n        out[1] = 0;\n        out[2] = xorshift64(s_[1]);\n        out[3] = 0;\n        out[4] = xorshift64(s_[2]);\n        out[5] = 0;\n    }\n\nprivate:\n    uint64_t xorshift64(uint64_t &amp;state)\n    {\n        uint64_t x = state;\n        x ^= (x &lt;&lt; 13);\n        x ^= (x &gt;&gt; 7);\n        x ^= (x &lt;&lt; 17);\n        state = x;\n        return x;\n    }\n    uint64_t s_[4];\n};\n</code></pre> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5305\u542b5\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b92\u884c\uff0c\u517110\u884c\u3002</p> <p>\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u7684\u7b2c\u4e00\u884c\u5305\u542b 3 \u4e2a\u4ee5\u7a7a\u683c\u5206\u9694\u7684 16 \u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u751f\u6210\u5668\u7684\u521d\u59cb\u79cd\u5b50\u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a 16 \u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u76ee\u6807\u54c8\u5e0c\u503c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa5\u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 n\uff0c\u8868\u793a\u8be5\u6d4b\u8bd5\u70b9\u7684\u76ee\u6807\u54c8\u5e0c\u503c\u662f\u7531\u751f\u6210\u5668\u751f\u6210\u7684\u7b2c n \u4e2a\u539f\u59cb\u8f93\u5165\u7684 MD5 \u54c8\u5e0c\u503c\u3002</p> <p>\u6837\u4f8b</p> <p>\u8f93\u5165\u6837\u4f8b</p> <pre><code>f266a54e3e47a23c fdaae989f0a7211c e6aa6f98e36deedf\n82d45fa866fa60b64d71164df84c75c9\n17a7cd855b73cdac cc4323d166e03be9 b00bc0b3bd5894fa\n7218bba8b911ab47c6327bb5dbe61b59\ndea8b42aaeadda81 ec4cc7cb402de9d9 ce3826dac217a356\n1a74d9f4a21cbe42d7eb6476505f8ca9\nca1114b1a8399b94 4f22b32081209bca 3db2ed9884246d92\n38978e0a05d932b7c6abb0969ddf9d42\n8af2347938b775bf d03e9af34bb95deb 3542f798e87dc7b4\nedceface43f62178ada45fd121932c13\n</code></pre> <p>\u8f93\u51fa\u6837\u4f8b</p> <pre><code>1\n12\n123\n1234\n12345\n</code></pre> <p>\u8bc4\u5206\u6807\u51c6</p> <p>10 \u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u7684\u5f97\u5206\u5177\u4f53\u5982\u4e0b\uff1a</p> <ul> <li>\u8f93\u51fa\u7ed3\u679c\u5fc5\u987b\u6b63\u786e\u3002\u7ed3\u5c3e\u7684\u7a7a\u683c\u548c\u6362\u884c\u5c06\u88ab\u5ffd\u7565\u3002\u7ed3\u679c\u4e0d\u6b63\u786e\u7684\uff0c\u8be5\u6d4b\u8bd5\u70b9\u5f970\u5206\u3002</li> <li>\u8ba1\u8be5\u6d4b\u8bd5\u70b9\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a \\(t\\) \u79d2\u3001\u6b63\u786e\u7b54\u6848\u4e3a \\(n\\)\uff0c\u5219\u8be5\u6d4b\u8bd5\u70b9\u5f97\u5206\u4e3a \\(\\dfrac{60}{t} - 1\\)\uff0c\u5176\u4e2d \\(t\\) \u7684\u6700\u5927\u503c\u4e3a 60 \u79d2\u3002\u5982\u679c\u8fd0\u884c\u65f6\u95f4\u8d85\u8fc7 60 \u79d2\uff0c\u5219\u8be5\u6d4b\u8bd5\u70b9\u5f97 0 \u5206\u3002</li> </ul> <p>\u603b\u5206\u4e3a\u6240\u6709\u6d4b\u8bd5\u70b9\u5f97\u5206\u4e4b\u548c\uff0c\u5e76\u6839\u636e\u5168\u90e8\u9009\u624b\u7684\u6700\u9ad8\u5206\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u7ebf\u6027\u7f29\u653e\u5230\u6ee1\u5206 100 \u5206\u3002</p> <p>\u770b\u5230\u9898\u76ee\u7b2c\u4e00\u65f6\u95f4\u5c31\u60f3\u5230\u5148\u7528 SIMD \u52a0\u901f\uff0c\u56e0\u4e3a\u4e0d\u7ba1\u662f\u7ed9\u51fa\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u8fd8\u662fmd5\u503c\u7684\u751f\u6210\uff0c\u90fd\u662f\u5f88\u5bb9\u6613\u5411\u91cf\u5316\u7684\u7b97\u6cd5</p> <p>\u901a\u8fc7 <code>lscpu</code> \u67e5\u770b CPU flags\uff0c\u96c6\u7fa4\u652f\u6301\u6211\u4eec\u4f7f\u7528 AVX2 \u548c AVX512 \u6307\u4ee4\u96c6\u8fdb\u884c SIMD \u4f18\u5316</p> <p>Github \u641c\u7d22 <code>simd</code> \u548c <code>md5</code>\uff0c\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u5c31\u662f minio/md5-simd</p> <p>\u4e8e\u662f\u51fa\u4e8e\u5077\u61d2\u8003\u8651(bushi)\uff0c\u4f7f\u7528\u4e86 Go \u5b9e\u73b0\u7684\u7b2c\u4e00\u7248\u5b9e\u9a8c\u7b97\u6cd5</p> <p>\u5f53\u7136\u5b9e\u9a8c\u662f\u5927\u2606\u5931\u2606\u8d25\u4e86\uff0c\u5b9e\u9a8c\u4e0b\u6765\u6d88\u8017\u65f6\u95f4\u8fdc\u9ad8\u9898\u76ee\u8981\u6c42\u6700\u9ad8\u65f6\u95f4\uff0c\u6211\u662fGolang\u82e6\u624b\u4e0d\u4f1a\u4f18\u5316\u771f\u662f\u592a\u5bf9\u4e0d\u8d77\u4e86\uff0c\u56e0\u6b64\u5207\u6362\u5230\u4e86\u4f20\u7edf\u7684 C++ \u65b9\u6848</p> <p>\u4f7f\u7528\u4e86 ashbob999/md5-simd \u8fd9\u4e2a\u5e93\u53ea\u5b9e\u73b0\u4e86\u6700\u9ad88\u8def\u7684\u5411\u91cf\u5316 MD5 \u8ba1\u7b97\uff0c\u4f46\u4e3a\u4e86\u7b80\u5316MD5\u7b97\u6cd5\u5b9e\u73b0\uff0c\u53ef\u4ee5\u4e4b\u540e\u518d\u4f18\u5316\u5230 AVX512 16\u8def\u8ba1\u7b97</p> <p>\u9898\u76ee\u5728\u6bd4\u8d5b\u671f\u95f4\u66f4\u65b0\u4e86\uff0c\u6807\u4e3a<code>md5-bf</code>\u7684\u4ee3\u7801\u4e3a\u65e7\u9898\u76ee\u5b9e\u73b0\uff0c\u6807\u4e3a<code>md5-new</code>\u7684\u5219\u4e3a\u65b0\u7248</p> \u53c2\u8003\u4ee3\u7801 Ver1.0 ( md5-bf test1\u7528\u65f6\u7ea621.703960709s ) <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;cstdint&gt;\n#include &lt;stdexcept&gt;\n#include &lt;omp.h&gt;\n\n#include \"md5-simd/source/simd/md5-simd.h\"\n\n// \u9898\u76ee\u63d0\u4f9b\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668 (PRNG)\nclass RndGen\n{\npublic:\nRndGen(uint64_t s0, uint64_t s1, uint64_t s2)\n{\n    s_[0] = s0;\n    s_[1] = s1;\n    s_[2] = s2;\n}\n\nRndGen() = delete;\n\n// \u751f\u621048\u5b57\u8282\u7684\u8f93\u5165\u6570\u636e\nvoid generate(uint64_t out[6])\n{\n    out[0] = xorshift64(s_[0]);\n    out[1] = 0;\n    out[2] = xorshift64(s_[1]);\n    out[3] = 0;\n    out[4] = xorshift64(s_[2]);\n    out[5] = 0;\n}\n\nprivate:\nuint64_t xorshift64(uint64_t &amp;state)\n{\n    uint64_t x = state;\n    x ^= (x &lt;&lt; 13);\n    x ^= (x &gt;&gt; 7);\n    x ^= (x &lt;&lt; 17);\n    state = x;\n    return x;\n}\n// s_[3] is unused padding to avoid false sharing\nuint64_t s_[4];\n};\n\n\n// \u8f85\u52a9\u51fd\u6570\uff1a\u5c0616\u8fdb\u5236\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a16\u5b57\u8282\u7684MD5\u6458\u8981 (4\u4e2a uint32_t)\n// MD5\u7684\u8f93\u51fa\u662f\u5c0f\u7aef\u5e8f\u7684\uff0c\u8fd9\u4e2a\u51fd\u6570\u6b63\u786e\u5904\u7406\u5b57\u8282\u5e8f\nvoid parse_hex_digest(const std::string&amp; hex, uint32_t digest[4]) {\nif (hex.length() != 32) {\n    throw std::runtime_error(\"Invalid hex digest length.\");\n}\nfor (int i = 0; i &lt; 4; ++i) {\n    uint64_t part = std::stoull(hex.substr(i * 8, 8), nullptr, 16);\n    // MD5\u7684\u6bcf\u4e2a32\u4f4d\u5b57\u5728\u8f93\u51fa\u65f6\u662f\u5c0f\u7aef\u5b57\u8282\u5e8f\n    digest[i] = ((part &amp; 0xFF000000) &gt;&gt; 24) |\n                ((part &amp; 0x00FF0000) &gt;&gt; 8)  |\n                ((part &amp; 0x0000FF00) &lt;&lt; 8)  |\n                ((part &amp; 0x000000FF) &lt;&lt; 24);\n}\n}\n\n\nint main()\n{\n// \u52a0\u901fC++\u6807\u51c6IO\nstd::ios_base::sync_with_stdio(false);\nstd::cin.tie(NULL);\n\n// 1. \u8bfb\u53d6\u8f93\u5165\nstd::string s0_hex, s1_hex, s2_hex;\nstd::cin &gt;&gt; s0_hex &gt;&gt; s1_hex &gt;&gt; s2_hex;\n\nstd::string target_hex;\nstd::cin &gt;&gt; target_hex;\n\n// 2. \u89e3\u6790\u8f93\u5165\nuint64_t s0 = std::stoull(s0_hex, nullptr, 16);\nuint64_t s1 = std::stoull(s1_hex, nullptr, 16);\nuint64_t s2 = std::stoull(s2_hex, nullptr, 16);\n\nuint32_t target_digest[4];\ntry {\n    parse_hex_digest(target_hex, target_digest);\n} catch (const std::exception&amp; e) {\n    std::cerr &lt;&lt; \"Error parsing target hash: \" &lt;&lt; e.what() &lt;&lt; std::endl;\n    return 1;\n}\n\n// \u5171\u4eab\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u7ed3\u679c\u3002volatile \u786e\u4fdd\u6240\u6709\u7ebf\u7a0b\u80fd\u770b\u5230\u6700\u65b0\u503c\u3002\nvolatile long long found_n = -1;\n\n// 3. \u4f7f\u7528OpenMP\u5e76\u884c\u8ba1\u7b97\n#pragma omp parallel\n{\n    // \u6bcf\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u81ea\u5df1\u7684ID\u548c\u603b\u7ebf\u7a0b\u6570\n    int thread_id = omp_get_thread_num();\n    int num_threads = omp_get_num_threads();\n\n    // \u6bcf\u4e2a\u7ebf\u7a0b\u62e5\u6709\u81ea\u5df1\u7684\u751f\u6210\u5668\u5b9e\u4f8b\uff0c\u907f\u514d\u72b6\u6001\u51b2\u7a81\n    RndGen generator(s0, s1, s2);\n\n    // \u6bcf\u4e2a\u7ebf\u7a0b\u62e5\u6709\u81ea\u5df1\u7684MD5\u8ba1\u7b97\u5668\u5b9e\u4f8b\n    md5_simd::MD5_SIMD md5_calc;\n\n    // \u51c6\u5907\u8ba1\u7b97\u6240\u9700\u7684\u6570\u636e\u7ed3\u6784\n    uint64_t input_buffer[6];\n    const char* inputs[1] = { reinterpret_cast&lt;const char*&gt;(input_buffer) };\n    uint64_t lengths[1] = { 48 }; // \u8f93\u5165\u957f\u5ea6\u56fa\u5b9a\u4e3a48\u5b57\u8282\n\n    // \"\u5feb\u8fdb\"\u751f\u6210\u5668\u72b6\u6001\uff0c\u4f7f\u6bcf\u4e2a\u7ebf\u7a0b\u4ece\u6b63\u786e\u7684\u4ea4\u9519\u8d77\u70b9\u5f00\u59cb\n    uint64_t dummy_buffer[6];\n    for (int i = 0; i &lt; thread_id; ++i) {\n        generator.generate(dummy_buffer);\n    }\n\n    // 4. \u5f00\u59cb\u5e76\u884c\u641c\u7d22\u5faa\u73af\n    // \u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6b65\u957f\u662f\u603b\u7ebf\u7a0b\u6570\n    for (long long n = thread_id + 1; found_n == -1; n += num_threads) {\n\n        // \u751f\u6210\u7b2cn\u4e2a\u8f93\u5165\n        generator.generate(input_buffer);\n\n        // \u8ba1\u7b97MD5\u54c8\u5e0c\n        // \u4f7f\u7528&lt;1, false&gt;\u6a21\u677f\u53c2\u6570\u8868\u793a\u4e00\u6b21\u8ba1\u7b971\u4e2a\u54c8\u5e0c\uff0c\u5e76\u4e14\u4e0d\u505a\u957f\u5ea6\u68c0\u67e5\uff08\u56e0\u4e3a\u957f\u5ea6\u56fa\u5b9a\uff09\n        md5_calc.calculate&lt;1, false&gt;(inputs, lengths);\n\n        // \u6bd4\u8f83\u7ed3\u679c\n        std::string result_hex = md5_calc.hexdigest(0);\n        uint32_t result_digest[4];\n        try {\n            parse_hex_digest(result_hex, result_digest);\n            bool match = true;\n            for (int i = 0; i &lt; 4; ++i) {\n                if (result_digest[i] != target_digest[i]) {\n                    match = false;\n                    break;\n                }\n            }\n\n            if (match) {\n                // \u5982\u679c\u627e\u5230\uff0c\u5c31\u66f4\u65b0\u5171\u4eab\u53d8\u91cf\n                // \u5373\u4f7f\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u627e\u5230\uff0c\u8fd9\u4e5f\u80fd\u786e\u4fdd\u6211\u4eec\u5f97\u5230\u7684\u662f\u6700\u5c0f\u7684n\n                #pragma omp critical\n                {\n                    if (found_n == -1 || n &lt; found_n) {\n                        found_n = n;\n                    }\n                }\n            }\n        } catch (const std::exception&amp; e) {\n            // \u5ffd\u7565\u89e3\u6790\u9519\u8bef\n        }\n\n        // \u4e3a\u4e86\u8df3\u5230\u4e0b\u4e00\u4e2a\u5c5e\u4e8e\u672c\u7ebf\u7a0b\u7684\u4efb\u52a1\uff0c\u9700\u8981\u5c06\u751f\u6210\u5668\u72b6\u6001\u63a8\u8fdb (num_threads - 1) \u6b21\n        if (num_threads &gt; 1) {\n            for (int i = 0; i &lt; num_threads - 1; ++i) {\n                generator.generate(dummy_buffer);\n            }\n        }\n    }\n}\n\n// 5. \u8f93\u51fa\u7ed3\u679c\nif (found_n != -1) {\n    std::cout &lt;&lt; found_n &lt;&lt; std::endl;\n}\n\nreturn 0;\n}\n</code></pre> <p>Ver1.0\u662f\u6700\u57fa\u672c\u7684\u5b9e\u73b0\uff0c\u5206\u6790\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u6709\u95ee\u9898\u7684\u90e8\u5206\u6709</p> <ol> <li>MD5 \u6ca1\u6709\u7528\u5230 SIMD \u52a0\u901f\uff0c\u4f7f\u7528SIMD\u53ef\u4ee5\u83b7\u5f97\u6700\u9ad816x\u7684\u52a0\u901f</li> <li>\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u751f\u6210\u5668\u5b9e\u4f8b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u4ece\u7b2c\u4e00\u4e2a\u968f\u673a\u6570\u5f00\u59cb\u4e00\u76f4\u751f\u6210\u5230\u5c5e\u4e8e\u81ea\u5df1\u7684md5\u8ba1\u7b97\u90e8\u5206\uff0c\u91cd\u590d\u8ba1\u7b97</li> <li>\u968f\u673a\u6570\u751f\u6210\u5668\u6ca1\u6709\u7528\u5230 SIMD \u52a0\u901f</li> </ol> <p>\u7ecfprofiling\uff0c<code>RndGen</code>\u5360\u7528\u7684\u65f6\u95f4\u548c8\u8def<code>SIMD</code>\u8ba1\u7b97\u65f6\u95f4\u5927\u81f4\u76f8\u5f53\uff0c<code>RndGen</code>\u4e0d\u662f\u53ef\u5ffd\u7565\u7684\u5f00\u9500</p> <p><code>RndGen</code>\u5b9e\u9645\u4e0a\u662fXorshift\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u53d8\u79cd\uff0c\u800c<code>Xorshift</code>\u5728<code>GF(2)</code>\u4e0a\u662f\u7ebf\u6027\u7684</p> <p>\u56e0\u6b64\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u968f\u673a\u6570\u751f\u6210\u8fc7\u7a0b\u7528\u4e8c\u5143\u57df<code>GF(2)</code>\u4e0a\u7684\u77e9\u9635\u4e58\u6cd5\u8868\u793a\uff08<code>XOR</code>\u76f8\u5f53\u4e8e\u4e58\u6cd5\uff0c<code>AND</code>\u76f8\u5f53\u4e8e\u52a0\u6cd5\uff09</p>"},{"location":"2025/08/22/zxhpc-2025-writeup/#rndgen","title":"RndGen\u7684\u6570\u5b66\u8868\u793a","text":"<ul> <li>\u72b6\u6001\u7a7a\u95f4\uff1a</li> </ul> \\[ \\mathcal{S} = (\\mathrm{GF}(2)^{64})^3 \\] <ul> <li>\u72b6\u6001\u8f6c\u79fb\uff1a</li> </ul> \\[ (s_0,s_1,s_2) \\;\\mapsto\\; (A s_0,\\, A s_1,\\, A s_2), \\] <p>\u5176\u4e2d:</p> \\[ A=(I \\oplus L_{17})(I \\oplus R_{7})(I \\oplus L_{13}) \\] <ul> <li>\u8f93\u51fa\u51fd\u6570\uff1a</li> </ul> \\[ \\text{Out}(s_0,s_1,s_2) = (A s_0,\\,0,\\,A s_1,\\,0,\\,A s_2,\\,0). \\] <p>\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u88ab\u5229\u7528\u4e8e\u7ebf\u7a0b\u5feb\u901f\u8df3\u8fc7\u5c5e\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u7684<code>MD5</code>\u8ba1\u7b97\u4efb\u52a1\uff0c\u53ea\u9700\u9884\u5148\u8ba1\u7b97\u597d</p> \\[ T = A^{\\text{BATCH}  \\times  \\text{thread\\_num}} \\] <p>\u5c06\\(T\\)\u4e0e\u5f53\u524d\u72b6\u6001\u76f8\u4e58\uff0c\u5373\u53ef\u5728<code>O(1)</code>\u5185\u5b8c\u6210\u8df3\u5230\u5c5e\u4e8e\u5f53\u524d\u7ebf\u7a0b\u7684<code>BATCH</code></p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u540d\u5b57\u53eb<code>Xorshift Jump</code></p> RndGen <pre><code>class RndGen {\npublic:\n    RndGen(uint64_t s0, uint64_t s1, uint64_t s2) {\n        state_vec = _mm512_setr_epi64(s0, s1, s2, 0, 0, 0, 0, 0);\n    }\n\n    void generate(uint64_t out[6]) {\n        update_state();\n        alignas(64) uint64_t temp[8];\n        _mm512_store_epi64(temp, state_vec);\n        out[0] = temp[0]; out[1] = 0;\n        out[2] = temp[1]; out[3] = 0;\n        out[4] = temp[2]; out[5] = 0;\n    }\n\n    void generate_batch(int n, uint64_t out[][6]) {\n        for (int i = 0; i &lt; n; ++i) {\n            update_state();\n            alignas(64) uint64_t temp[8];\n            _mm512_store_epi64(temp, state_vec);\n            out[i][0] = temp[0]; out[i][1] = 0;\n            out[i][2] = temp[1]; out[i][3] = 0;\n            out[i][4] = temp[2]; out[i][5] = 0;\n        }\n    }\n\n    void apply_bitmask_jump(const BitMaskJump&amp; jump_mask) {\n        alignas(64) uint64_t temp[8];\n        _mm512_store_epi64(temp, state_vec);\n\n        for (int lane = 0; lane &lt; 8; ++lane) {\n            uint64_t new_val = 0;\n            for (int bit = 0; bit &lt; 64; ++bit) {\n                if (temp[lane] &amp; (1ULL &lt;&lt; bit)) {\n                    new_val ^= jump_mask.masks[bit];\n                }\n            }\n            temp[lane] = new_val;\n        }\n\n        state_vec = _mm512_load_epi64(temp);\n    }\n\nprivate:\n    __m512i state_vec;\n\n    inline void update_state() {\n        __m512i x = state_vec;\n        x = _mm512_xor_si512(x, _mm512_slli_epi64(x, 13));\n        x = _mm512_xor_si512(x, _mm512_srli_epi64(x, 7));\n        x = _mm512_xor_si512(x, _mm512_slli_epi64(x, 17));\n        state_vec = x;\n    }\n};\n\nvoid apply_precomputed_jump(RndGen&amp; generator, int jump_index) {\n    if (jump_index &gt;= 0 &amp;&amp; jump_index &lt; 40) {\n        generator.apply_bitmask_jump(PRECOMPUTED_JUMPS[jump_index]);\n    }\n}\n</code></pre> <p>\u5176\u4e2d<code>PRECOMPUTED_JUMPS</code>\u662f40\u4e2a\u5df2\u7ecf\u5728\u7f16\u8bd1\u524d\u8ba1\u7b97\u597d\u7684\u7528\u4e8e\u8df3\u8f6c\u5230\u5bf9\u5e94\u8d77\u59cb\u4f4d\u7f6e\u7684\u63a9\u7801</p>                      \u6d41\u79bb\u6d41\u79bb\uff0c\u4f60\u8fd9\u4e2a\u968f\u673a\u6570\u751f\u6210\u5668\u867d\u7136\u597d\uff0c\u4f46\u662f\u4e0d\u662f\u6709\u70b9\u6d6a\u8d39\u4e86\uff1f                                           \u786e\u5b9e\u786e\u5b9e\uff0c\u5411\u91cf\u5bc4\u5b58\u5668\u90fd\u8fd8\u6ca1\u6ee1\u5462\uff0c\u800c\u4e14\u8fd8\u9700\u8981\u8f6c\u7f6e\u624d\u80fd\u4f20\u9012\u7ed9 MD5 \u8ba1\u7b97\u5b9e\u4f8b                      <p>\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 <code>Xorshift Jump</code> \u5bf9SIMD\u64cd\u4f5c\u8fdb\u884c\u5e76\u884c\u4f18\u5316\uff0cAVX512 \u7684\u5411\u91cf\u5bc4\u5b58\u5668\uff0c\u6700\u591a\u80fd\u5b58\u50a88\u4e2a <code>u64</code> \u7684\u72b6\u6001\uff0c\u800c\u4f7f\u7528 AVX512 \u5411\u91cf\u7684 MD5 \u5b9e\u4f8b\u4e00\u6b21\u8ba1\u7b97\u9700\u8981 \\(16 \\times 3\\) \u4e2a\u72b6\u6001\uff0c\u56e0\u6b64\u6211\u4eec\u901a\u8fc7 6 \u4e2a\u5411\u91cf\u5728\u4e00\u4e2a <code>RndGen</code> \u5bf9\u8c61\u91cc\u50a8\u5b58 16 \u7ec4\u72b6\u6001\uff0c\u4e00\u7ec4\u72b6\u6001\u7531\u4e09\u4e2a <code>u64</code>\u72b6\u6001\u5171 24bytes \u7ec4\u6210</p> <p>\u5982\u679c\u6211\u4eec\u4e4b\u524d\u662f\u5728\u540c\u4e00\u4e2a\u5411\u91cf\u5bc4\u5b58\u5668\u91cc\u50a8\u5b58\u540c\u4e00\u7ec4\u72b6\u6001\uff0c\u90a3\u8fd9\u4e2a\u4f18\u5316\u5c31\u76f8\u5f53\u4e8e\u628a\u540c\u4e00\u7ec4\u72b6\u6001\u8f6c\u7f6e\u5206\u6563\u5728\u4e09\u4e2a\u4e0d\u540c\u5411\u91cf\u5bc4\u5b58\u5668\u91cc\uff0c\u521a\u597d MD5 \u5b9e\u4f8b\u8ba1\u7b97\u6240\u9700\u8981\u7684\u5c31\u662f\u8fd9\u6837\u8f6c\u7f6e\u540e\u7684 <code>SoA</code> \u6392\u5217\u7684\u72b6\u6001\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u540c\u65f6\u505a\u4e86\u4e24\u7ec4\u4f18\u5316\uff1asimd \u52a0\u901f\u968f\u673a\u6570\u8ba1\u7b97\uff0c\u540c\u65f6\u8282\u7701\u4e86\u8f6c\u7f6e\u7684\u64cd\u4f5c\u5f00\u9500</p> <p>\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u7684\u5e76\u884c\u7b56\u7565:</p> <ul> <li>\u6211\u4eec\u8bbe\u5b9a\u4e00\u4e2a\u8ba1\u7b97\u6700\u5c0f\u5355\u5143 <code>BLOCK</code> \u4e3a 8192 \u6b21\u8fed\u4ee3</li> <li>\u9996\u5148\u901a\u8fc7 40 \u4e2a\u7ebf\u7a0b\u5728\u7ebf\u7a0b\u7ea7\u522b\u5e76\u884c\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u72b6\u6001\u76f8\u5dee \\(8192 \\times 16\\) \u7ec4\u72b6\u6001\uff0c\u5373 16 \u4e2a BLOCK</li> <li>\u7ebf\u7a0b\u5185\u90e8\u901a\u8fc7 SIMD \u5e76\u884c\uff0c\u540c\u65f6\u8ba1\u7b97 16 \u7ec4\u72b6\u6001\uff0c\u6bcf\u7ec4\u72b6\u6001\u4e4b\u95f4\u76f8\u5dee\u4e00\u4e2a BLOCK</li> <li>\u5f53\u7ebf\u7a0b\u8fed\u4ee3 8192 \u6b21\u540e\uff0c\u672c\u6279\u6b21\u4efb\u52a1\u5c31\u5b8c\u6210\u4e86\uff0c\u6b64\u65f6\u4f7f\u7528 Xorshift \u8df3\u8fc7\u5176\u4ed6\u7ebf\u7a0b\u8d1f\u8d23\u7684 BLOCK\uff0c\u6765\u5230\u4e0b\u4e00\u4e2a\u81ea\u5df1\u8d1f\u8d23\u7684\u6279\u6b21</li> </ul> <p>\u591a\u7ebf\u7a0b\u52a0\u4e0a 8 \u8def SIMD \u5e76\u884c\uff0c\u7406\u8bba\u4e0a\u80fd\u6bd4\u9010\u4e2a\u8ba1\u7b97\u5feb <code>8 \u00d7 \u7ebf\u7a0b\u6570</code> \u500d</p> <p>\u7ecf\u8fc7\u706b\u7130\u56fe\u67e5\u770b\uff0c\u6211\u4eec\u7684 MD5 \u8ba1\u7b97\u5360\u6bd4\u4ece 50% \u63d0\u5347\u5230\u4e86 90%\uff0c\u53ef\u559c\u53ef\u8d3a\u53ef\u559c\u53ef\u8d3a</p> \u6700\u7ec8\u4f18\u5316\u4ee3\u7801 (270.2pts) <pre><code>#include \"table.h\"\n#include &lt;cstdint&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;immintrin.h&gt;\n#include &lt;iostream&gt;\n#include &lt;omp.h&gt;\n#include &lt;stdexcept&gt;\n\nusing __reg = __m512i;\nclass RndGen {\npublic:\n  RndGen(uint64_t s0, uint64_t s1, uint64_t s2) {\n    uint64_t base_s0 = s0;\n    uint64_t base_s1 = s1;\n    uint64_t base_s2 = s2;\n    for (int i = 0; i &lt; 16; i++) {\n      if (i != 0) {\n        s0 = apply_jump_to_state_scalar(base_s0, TRANSPOSED_JUMPS[i]);\n        s1 = apply_jump_to_state_scalar(base_s1, TRANSPOSED_JUMPS[i]);\n        s2 = apply_jump_to_state_scalar(base_s2, TRANSPOSED_JUMPS[i]);\n      }\n      // \u5e94\u7528\u8df3\u8f6c\n\n      // \u5b58\u50a8\u72b6\u6001\n      s0_states[i] = s0;\n      s1_states[i] = s1;\n      s2_states[i] = s2;\n    }\n\n    // \u5c06\u72b6\u6001\u52a0\u8f7d\u5230AVX512\u5411\u91cf\u4e2d\n    load_states_to_vectors();\n  }\n\n  // \u91cd\u8f7d\u7248\u672c\uff1a\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u8df3\u8f6c\u7d22\u5f15\n  void jump_all_states_with_index(int jump_index) {\n    if (jump_index &lt; 0)\n      return;\n\n    // \u5c06\u5411\u91cf\u72b6\u6001\u4fdd\u5b58\u56de\u6570\u7ec4\uff0c\u4ee5\u4fbf\u6807\u91cf\u5904\u7406\n    save_vectors_to_states();\n\n    // \u5bf9\u6bcf\u4e2a\u72b6\u6001\u5e94\u7528\u6307\u5b9a\u7684\u8df3\u8f6c\n    for (int i = 0; i &lt; 16; i++) {\n      s0_states[i] = apply_jump_to_state_scalar(s0_states[i],\n                                                TRANSPOSED_JUMPS[jump_index]);\n      s1_states[i] = apply_jump_to_state_scalar(s1_states[i],\n                                                TRANSPOSED_JUMPS[jump_index]);\n      s2_states[i] = apply_jump_to_state_scalar(s2_states[i],\n                                                TRANSPOSED_JUMPS[jump_index]);\n    }\n\n    // \u91cd\u65b0\u52a0\u8f7d\u5230\u5411\u91cf\u4e2d\n    load_states_to_vectors();\n  }\n\n  // \u5b58\u50a816\u4e2a\u72b6\u6001\u7684\u6570\u7ec4\n  uint64_t s0_states[16];\n  uint64_t s1_states[16];\n  uint64_t s2_states[16];\n\n  // AVX512\u5411\u91cf\u5b58\u50a8\u72b6\u6001\uff08\u4f7f\u7528\u4e24\u4e2a\u5411\u91cf\u5904\u740616\u4e2a\u72b6\u6001\uff09\n  __m512i vec_s0_lo, vec_s0_hi;\n  __m512i vec_s1_lo, vec_s1_hi;\n  __m512i vec_s2_lo, vec_s2_hi;\n\n  // \u5c06\u72b6\u6001\u6570\u7ec4\u52a0\u8f7d\u5230AVX512\u5411\u91cf\u4e2d\n  void load_states_to_vectors() {\n    vec_s0_lo = _mm512_loadu_si512((const void *)s0_states);\n    vec_s0_hi = _mm512_loadu_si512((const void *)(s0_states + 8));\n    vec_s1_lo = _mm512_loadu_si512((const void *)s1_states);\n    vec_s1_hi = _mm512_loadu_si512((const void *)(s1_states + 8));\n    vec_s2_lo = _mm512_loadu_si512((const void *)s2_states);\n    vec_s2_hi = _mm512_loadu_si512((const void *)(s2_states + 8));\n  }\n\n  // \u5c06AVX512\u5411\u91cf\u4fdd\u5b58\u56de\u72b6\u6001\u6570\u7ec4\n  void save_vectors_to_states() {\n    _mm512_storeu_si512((void *)s0_states, vec_s0_lo);\n    _mm512_storeu_si512((void *)(s0_states + 8), vec_s0_hi);\n    _mm512_storeu_si512((void *)s1_states, vec_s1_lo);\n    _mm512_storeu_si512((void *)(s1_states + 8), vec_s1_hi);\n    _mm512_storeu_si512((void *)s2_states, vec_s2_lo);\n    _mm512_storeu_si512((void *)(s2_states + 8), vec_s2_hi);\n  }\n\n  // AVX512\u7248\u672c\u7684\u72b6\u6001\u66f4\u65b0\u51fd\u6570\n  void update_states_avx512() {\n    // xorshift64\u64cd\u4f5c - \u4f7f\u7528AVX512\u6307\u4ee4\n    __m512i shift13 = _mm512_set1_epi64(13);\n    __m512i shift7 = _mm512_set1_epi64(7);\n    __m512i shift17 = _mm512_set1_epi64(17);\n\n    // \u66f4\u65b0 vec_s0_lo\n    vec_s0_lo =\n        _mm512_xor_si512(vec_s0_lo, _mm512_sllv_epi64(vec_s0_lo, shift13));\n    vec_s0_lo =\n        _mm512_xor_si512(vec_s0_lo, _mm512_srlv_epi64(vec_s0_lo, shift7));\n    vec_s0_lo =\n        _mm512_xor_si512(vec_s0_lo, _mm512_sllv_epi64(vec_s0_lo, shift17));\n\n    // \u66f4\u65b0 vec_s0_hi\n    vec_s0_hi =\n        _mm512_xor_si512(vec_s0_hi, _mm512_sllv_epi64(vec_s0_hi, shift13));\n    vec_s0_hi =\n        _mm512_xor_si512(vec_s0_hi, _mm512_srlv_epi64(vec_s0_hi, shift7));\n    vec_s0_hi =\n        _mm512_xor_si512(vec_s0_hi, _mm512_sllv_epi64(vec_s0_hi, shift17));\n\n    // \u66f4\u65b0 vec_s1_lo\n    vec_s1_lo =\n        _mm512_xor_si512(vec_s1_lo, _mm512_sllv_epi64(vec_s1_lo, shift13));\n    vec_s1_lo =\n        _mm512_xor_si512(vec_s1_lo, _mm512_srlv_epi64(vec_s1_lo, shift7));\n    vec_s1_lo =\n        _mm512_xor_si512(vec_s1_lo, _mm512_sllv_epi64(vec_s1_lo, shift17));\n\n    // \u66f4\u65b0 vec_s1_hi\n    vec_s1_hi =\n        _mm512_xor_si512(vec_s1_hi, _mm512_sllv_epi64(vec_s1_hi, shift13));\n    vec_s1_hi =\n        _mm512_xor_si512(vec_s1_hi, _mm512_srlv_epi64(vec_s1_hi, shift7));\n    vec_s1_hi =\n        _mm512_xor_si512(vec_s1_hi, _mm512_sllv_epi64(vec_s1_hi, shift17));\n\n    // \u66f4\u65b0 vec_s2_lo\n    vec_s2_lo =\n        _mm512_xor_si512(vec_s2_lo, _mm512_sllv_epi64(vec_s2_lo, shift13));\n    vec_s2_lo =\n        _mm512_xor_si512(vec_s2_lo, _mm512_srlv_epi64(vec_s2_lo, shift7));\n    vec_s2_lo =\n        _mm512_xor_si512(vec_s2_lo, _mm512_sllv_epi64(vec_s2_lo, shift17));\n\n    // \u66f4\u65b0 vec_s2_hi\n    vec_s2_hi =\n        _mm512_xor_si512(vec_s2_hi, _mm512_sllv_epi64(vec_s2_hi, shift13));\n    vec_s2_hi =\n        _mm512_xor_si512(vec_s2_hi, _mm512_srlv_epi64(vec_s2_hi, shift7));\n    vec_s2_hi =\n        _mm512_xor_si512(vec_s2_hi, _mm512_sllv_epi64(vec_s2_hi, shift17));\n  }\n\n  // \u6807\u91cf\u7248\u672c\u7684\u8df3\u8f6c\u5e94\u7528\u51fd\u6570\n  uint64_t apply_jump_to_state_scalar(uint64_t state,\n                                      const TransposedBitMaskJump &amp;jump_mask) {\n    uint64_t result = 0;\n\n    // \u5904\u74068\u4e2a\u5217\u5757\uff08\u6bcf\u4e2a\u57578\u5217\uff09\n    for (int block = 0; block &lt; 8; ++block) {\n      uint64_t block_result = 0;\n\n      // \u5904\u7406\u5757\u5185\u76848\u5217\n      for (int col_in_block = 0; col_in_block &lt; 8; ++col_in_block) {\n        int col = block * 8 + col_in_block;\n        uint64_t col_mask = jump_mask.T[col];\n\n        // \u8ba1\u7b97 parity (popcount % 2)\n        int parity = __builtin_popcountll(col_mask &amp; state) &amp; 1;\n        block_result |= (static_cast&lt;uint64_t&gt;(parity) &lt;&lt; col_in_block);\n      }\n\n      result |= (block_result &lt;&lt; (block * 8));\n    }\n\n    return result;\n  }\n};\nnamespace md5_avx512_soa {\n\nclass MD5 {\npublic:\n  static constexpr int HASH_COUNT = 16;\n  static constexpr int BLOCK_SIZE = 64;\n  static constexpr int WORDS_PER_BLOCK = BLOCK_SIZE / sizeof(uint32_t);\n\n  struct InputSoA {\n    __reg words[WORDS_PER_BLOCK];\n  };\n\n  MD5() {\n    init();\n    reset();\n    target_digest_a = _mm512_setzero_si512();\n    target_digest_b = _mm512_setzero_si512();\n    target_digest_c = _mm512_setzero_si512();\n    target_digest_d = _mm512_setzero_si512();\n  }\n\n  MD5 operator=(const MD5 &amp;) = delete;\n  MD5(MD5 &amp;) = delete;\n  MD5(const MD5 &amp;) = delete;\n  MD5(MD5 &amp;&amp;) = delete;\n  MD5(const MD5 &amp;&amp;) = delete;\n\n  void set_target_digest(const uint32_t target[4]) {\n    target_digest_a = _mm512_set1_epi32((int)target[0]);\n    target_digest_b = _mm512_set1_epi32((int)target[1]);\n    target_digest_c = _mm512_set1_epi32((int)target[2]);\n    target_digest_d = _mm512_set1_epi32((int)target[3]);\n  }\n\n  int find_match_index() const {\n    if (!finalized)\n      return -1;\n    __mmask16 match_a = _mm512_cmpeq_epi32_mask(digest_a, target_digest_a);\n    __mmask16 match_b = _mm512_cmpeq_epi32_mask(digest_b, target_digest_b);\n    __mmask16 match_c = _mm512_cmpeq_epi32_mask(digest_c, target_digest_c);\n    __mmask16 match_d = _mm512_cmpeq_epi32_mask(digest_d, target_digest_d);\n    __mmask16 all_match = match_a &amp; match_b &amp; match_c &amp; match_d;\n    if (all_match != 0) {\n      uint32_t bitmap = (uint32_t)all_match;\n      return (int)_tzcnt_u32(bitmap);\n    }\n    return -1;\n  }\n\n  void reset() {\n    finalized = false;\n    state[0] = _mm512_set1_epi32(0x67452301);\n    state[1] = _mm512_set1_epi32(0xefcdab89);\n    state[2] = _mm512_set1_epi32(0x98badcfe);\n    state[3] = _mm512_set1_epi32(0x10325476);\n    digest_a = _mm512_setzero_si512();\n    digest_b = _mm512_setzero_si512();\n    digest_c = _mm512_setzero_si512();\n    digest_d = _mm512_setzero_si512();\n  }\n\n  void calculate(RndGen &amp;generator) {\n    reset();\n    transform(generator);\n    finalize();\n  }\n\nprivate:\n  void init() {\n    reset();\n    for (int i = 0; i &lt; (int)(sizeof(k) / sizeof(k[0])); i++) {\n      kv[i] = _mm512_set1_epi32((int)k[i]);\n    }\n  }\n\n  void transform(RndGen &amp;generator) {\n    // \u66f4\u65b0\u968f\u673a\u6570\u751f\u6210\u5668\u72b6\u6001\n    generator.update_states_avx512();\n\n    // \u76f4\u63a5\u63d0\u53d6\u5e76\u4f7f\u7528\u968f\u673a\u6570\uff0c\u907f\u514d\u4e34\u65f6\u6570\u7ec4\u5b58\u50a8\n    __m256i s0_lo_low = _mm512_cvtepi64_epi32(generator.vec_s0_lo);\n    __m256i s0_hi_low = _mm512_cvtepi64_epi32(generator.vec_s0_hi);\n    __reg x0 =\n        _mm512_inserti32x8(_mm512_castsi256_si512(s0_lo_low), s0_hi_low, 1);\n\n    __m256i s0_lo_high =\n        _mm512_cvtepi64_epi32(_mm512_srli_epi64(generator.vec_s0_lo, 32));\n    __m256i s0_hi_high =\n        _mm512_cvtepi64_epi32(_mm512_srli_epi64(generator.vec_s0_hi, 32));\n    __reg x1 =\n        _mm512_inserti32x8(_mm512_castsi256_si512(s0_lo_high), s0_hi_high, 1);\n\n    __m256i s1_lo_low = _mm512_cvtepi64_epi32(generator.vec_s1_lo);\n    __m256i s1_hi_low = _mm512_cvtepi64_epi32(generator.vec_s1_hi);\n    __reg x4 =\n        _mm512_inserti32x8(_mm512_castsi256_si512(s1_lo_low), s1_hi_low, 1);\n\n    __m256i s1_lo_high =\n        _mm512_cvtepi64_epi32(_mm512_srli_epi64(generator.vec_s1_lo, 32));\n    __m256i s1_hi_high =\n        _mm512_cvtepi64_epi32(_mm512_srli_epi64(generator.vec_s1_hi, 32));\n    __reg x5 =\n        _mm512_inserti32x8(_mm512_castsi256_si512(s1_lo_high), s1_hi_high, 1);\n\n    __m256i s2_lo_low = _mm512_cvtepi64_epi32(generator.vec_s2_lo);\n    __m256i s2_hi_low = _mm512_cvtepi64_epi32(generator.vec_s2_hi);\n    __reg x8 =\n        _mm512_inserti32x8(_mm512_castsi256_si512(s2_lo_low), s2_hi_low, 1);\n\n    __m256i s2_lo_high =\n        _mm512_cvtepi64_epi32(_mm512_srli_epi64(generator.vec_s2_lo, 32));\n    __m256i s2_hi_high =\n        _mm512_cvtepi64_epi32(_mm512_srli_epi64(generator.vec_s2_hi, 32));\n    __reg x9 =\n        _mm512_inserti32x8(_mm512_castsi256_si512(s2_lo_high), s2_hi_high, 1);\n\n    // \u9884\u5148\u8ba1\u7b97\u5e38\u91cf\uff0c\u907f\u514d\u91cd\u590d\u8bbe\u7f6e\n    const __reg x2 = _mm512_setzero_si512();\n    const __reg x3 = _mm512_setzero_si512();\n    const __reg x6 = _mm512_setzero_si512();\n    const __reg x7 = _mm512_setzero_si512();\n    const __reg x10 = _mm512_setzero_si512();\n    const __reg x11 = _mm512_setzero_si512();\n    const __reg x12 = _mm512_set1_epi32(0x80u);\n    const __reg x13 = _mm512_setzero_si512();\n    const __reg x14 = _mm512_set1_epi32(384u);\n    const __reg x15 = _mm512_setzero_si512();\n\n    __reg a = state[0], b = state[1], c = state[2], d = state[3];\n\n    /* Round 1 - \u4fdd\u6301\u539f\u6709\u903b\u8f91 */\n    FF&lt;7&gt;(a, b, c, d, x0, kv[0]);\n    FF&lt;12&gt;(d, a, b, c, x1, kv[1]);\n    FF&lt;17&gt;(c, d, a, b, x2, kv[2]);\n    FF&lt;22&gt;(b, c, d, a, x3, kv[3]);\n    FF&lt;7&gt;(a, b, c, d, x4, kv[4]);\n    FF&lt;12&gt;(d, a, b, c, x5, kv[5]);\n    FF&lt;17&gt;(c, d, a, b, x6, kv[6]);\n    FF&lt;22&gt;(b, c, d, a, x7, kv[7]);\n    FF&lt;7&gt;(a, b, c, d, x8, kv[8]);\n    FF&lt;12&gt;(d, a, b, c, x9, kv[9]);\n    FF&lt;17&gt;(c, d, a, b, x10, kv[10]);\n    FF&lt;22&gt;(b, c, d, a, x11, kv[11]);\n    FF&lt;7&gt;(a, b, c, d, x12, kv[12]);\n    FF&lt;12&gt;(d, a, b, c, x13, kv[13]);\n    FF&lt;17&gt;(c, d, a, b, x14, kv[14]);\n    FF&lt;22&gt;(b, c, d, a, x15, kv[15]);\n\n    /* Round 2 */\n    GG&lt;5&gt;(a, b, c, d, x1, kv[16]);\n    GG&lt;9&gt;(d, a, b, c, x6, kv[17]);\n    GG&lt;14&gt;(c, d, a, b, x11, kv[18]);\n    GG&lt;20&gt;(b, c, d, a, x0, kv[19]);\n    GG&lt;5&gt;(a, b, c, d, x5, kv[20]);\n    GG&lt;9&gt;(d, a, b, c, x10, kv[21]);\n    GG&lt;14&gt;(c, d, a, b, x15, kv[22]);\n    GG&lt;20&gt;(b, c, d, a, x4, kv[23]);\n    GG&lt;5&gt;(a, b, c, d, x9, kv[24]);\n    GG&lt;9&gt;(d, a, b, c, x14, kv[25]);\n    GG&lt;14&gt;(c, d, a, b, x3, kv[26]);\n    GG&lt;20&gt;(b, c, d, a, x8, kv[27]);\n    GG&lt;5&gt;(a, b, c, d, x13, kv[28]);\n    GG&lt;9&gt;(d, a, b, c, x2, kv[29]);\n    GG&lt;14&gt;(c, d, a, b, x7, kv[30]);\n    GG&lt;20&gt;(b, c, d, a, x12, kv[31]);\n\n    /* Round 3 */\n    HH&lt;4&gt;(a, b, c, d, x5, kv[32]);\n    HH&lt;11&gt;(d, a, b, c, x8, kv[33]);\n    HH&lt;16&gt;(c, d, a, b, x11, kv[34]);\n    HH&lt;23&gt;(b, c, d, a, x14, kv[35]);\n    HH&lt;4&gt;(a, b, c, d, x1, kv[36]);\n    HH&lt;11&gt;(d, a, b, c, x4, kv[37]);\n    HH&lt;16&gt;(c, d, a, b, x7, kv[38]);\n    HH&lt;23&gt;(b, c, d, a, x10, kv[39]);\n    HH&lt;4&gt;(a, b, c, d, x13, kv[40]);\n    HH&lt;11&gt;(d, a, b, c, x0, kv[41]);\n    HH&lt;16&gt;(c, d, a, b, x3, kv[42]);\n    HH&lt;23&gt;(b, c, d, a, x6, kv[43]);\n    HH&lt;4&gt;(a, b, c, d, x9, kv[44]);\n    HH&lt;11&gt;(d, a, b, c, x12, kv[45]);\n    HH&lt;16&gt;(c, d, a, b, x15, kv[46]);\n    HH&lt;23&gt;(b, c, d, a, x2, kv[47]);\n\n    /* Round 4 */\n    II&lt;6&gt;(a, b, c, d, x0, kv[48]);\n    II&lt;10&gt;(d, a, b, c, x7, kv[49]);\n    II&lt;15&gt;(c, d, a, b, x14, kv[50]);\n    II&lt;21&gt;(b, c, d, a, x5, kv[51]);\n    II&lt;6&gt;(a, b, c, d, x12, kv[52]);\n    II&lt;10&gt;(d, a, b, c, x3, kv[53]);\n    II&lt;15&gt;(c, d, a, b, x10, kv[54]);\n    II&lt;21&gt;(b, c, d, a, x1, kv[55]);\n    II&lt;6&gt;(a, b, c, d, x8, kv[56]);\n    II&lt;10&gt;(d, a, b, c, x15, kv[57]);\n    II&lt;15&gt;(c, d, a, b, x6, kv[58]);\n    II&lt;21&gt;(b, c, d, a, x13, kv[59]);\n    II&lt;6&gt;(a, b, c, d, x4, kv[60]);\n    II&lt;10&gt;(d, a, b, c, x11, kv[61]);\n    II&lt;15&gt;(c, d, a, b, x2, kv[62]);\n    II&lt;21&gt;(b, c, d, a, x9, kv[63]);\n\n    state[0] = _mm512_add_epi32(state[0], a);\n    state[1] = _mm512_add_epi32(state[1], b);\n    state[2] = _mm512_add_epi32(state[2], c);\n    state[3] = _mm512_add_epi32(state[3], d);\n  }\n\n  void finalize() {\n    if (!finalized) {\n      digest_a = state[0];\n      digest_b = state[1];\n      digest_c = state[2];\n      digest_d = state[3];\n      finalized = true;\n    }\n  }\n\n  static inline __reg F(__reg x, __reg y, __reg z) {\n    return _mm512_xor_si512(z, _mm512_and_si512(x, _mm512_xor_si512(y, z)));\n  }\n\n  static inline __reg G(__reg x, __reg y, __reg z) {\n    return _mm512_xor_si512(y, _mm512_and_si512(z, _mm512_xor_si512(x, y)));\n  }\n\n  static inline __reg H(__reg x, __reg y, __reg z) {\n    return _mm512_xor_si512(_mm512_xor_si512(x, y), z);\n  }\n\n  static inline __reg I(__reg x, __reg y, __reg z) {\n    return _mm512_xor_si512(\n        y,\n        _mm512_or_si512(x, _mm512_xor_si512(z, _mm512_set1_epi32(0xFFFFFFFF))));\n  }\n\n  template &lt;int N&gt; static inline __reg rotate_left(__reg x) {\n    return _mm512_or_si512(_mm512_slli_epi32(x, N),\n                           _mm512_srli_epi32(x, 32 - N));\n  }\n\n  template &lt;int S&gt;\n  static inline void FF(__reg &amp;a, __reg b, __reg c, __reg d, __reg x,\n                        __reg ac) {\n    __reg f = F(b, c, d);\n    __reg sum =\n        _mm512_add_epi32(_mm512_add_epi32(a, f), _mm512_add_epi32(x, ac));\n    a = _mm512_add_epi32(b, rotate_left&lt;S&gt;(sum));\n  }\n\n  template &lt;int S&gt;\n  static inline void GG(__reg &amp;a, __reg b, __reg c, __reg d, __reg x,\n                        __reg ac) {\n    __reg g = G(b, c, d);\n    __reg sum =\n        _mm512_add_epi32(_mm512_add_epi32(a, g), _mm512_add_epi32(x, ac));\n    a = _mm512_add_epi32(b, rotate_left&lt;S&gt;(sum));\n  }\n\n  template &lt;int S&gt;\n  static inline void HH(__reg &amp;a, __reg b, __reg c, __reg d, __reg x,\n                        __reg ac) {\n    __reg h = H(b, c, d);\n    __reg sum =\n        _mm512_add_epi32(_mm512_add_epi32(a, h), _mm512_add_epi32(x, ac));\n    a = _mm512_add_epi32(b, rotate_left&lt;S&gt;(sum));\n  }\n\n  template &lt;int S&gt;\n  static inline void II(__reg &amp;a, __reg b, __reg c, __reg d, __reg x,\n                        __reg ac) {\n    __reg i = I(b, c, d);\n    __reg sum =\n        _mm512_add_epi32(_mm512_add_epi32(a, i), _mm512_add_epi32(x, ac));\n    a = _mm512_add_epi32(b, rotate_left&lt;S&gt;(sum));\n  }\n\n  __reg state[4];\n  __reg digest_a, digest_b, digest_c, digest_d;\n  __reg target_digest_a, target_digest_b, target_digest_c, target_digest_d;\n  bool finalized;\n\n  inline static constexpr uint32_t r[] = {7, 12, 17, 22, 5, 9,  14, 20,\n                                          4, 11, 16, 23, 6, 10, 15, 21};\n\n  inline static constexpr uint32_t k[] = {\n      0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a,\n      0xa8304613, 0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,\n      0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821, 0xf61e2562, 0xc040b340,\n      0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n      0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8,\n      0x676f02d9, 0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,\n      0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70, 0x289b7ec6, 0xeaa127fa,\n      0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,\n      0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92,\n      0xffeff47d, 0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,\n      0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};\n\n  __reg kv[sizeof(k) / sizeof(*k)];\n};\n\n} // namespace md5_avx512_soa\n\n// \u89e3\u6790 hex digest\uff08\u4fdd\u6301\u539f\u6765\u5b57\u8282\u7ffb\u8f6c\u5904\u7406\uff09\nvoid parse_hex_digest(const std::string &amp;hex, uint32_t digest[4]) {\n  if (hex.length() != 32) {\n    throw std::runtime_error(\"Invalid hex digest length.\");\n  }\n  for (int i = 0; i &lt; 4; ++i) {\n    uint64_t part = std::stoull(hex.substr(i * 8, 8), nullptr, 16);\n    digest[i] = ((part &amp; 0xFF000000) &gt;&gt; 24) | ((part &amp; 0x00FF0000) &gt;&gt; 8) |\n                ((part &amp; 0x0000FF00) &lt;&lt; 8) | ((part &amp; 0x000000FF) &lt;&lt; 24);\n  }\n}\nint main() {\n  std::ios_base::sync_with_stdio(false);\n  std::cin.tie(NULL);\n\n  const int num_threads = 40;\n  omp_set_num_threads(num_threads);\n\n  constexpr int PHYSICAL_BATCH_SIZE = 16;         // SIMD lane \u6570\n  constexpr long long SIMD_BATCH_SIZE = 1024 * 8; // 8192\n  constexpr long long STEPS_PER_JUMP = 8192;      // \u6bcf\u4e2a jump \u5355\u4f4d\u8df3 8192 \u6b65\n  constexpr long long THREAD_BATCH_SIZE =\n      SIMD_BATCH_SIZE * PHYSICAL_BATCH_SIZE; // 131072\n\n  static_assert(THREAD_BATCH_SIZE % STEPS_PER_JUMP == 0,\n                \"THREAD_BATCH_SIZE must be multiple of STEPS_PER_JUMP\");\n  constexpr int JUMP_UNITS_PER_BATCH =\n      THREAD_BATCH_SIZE / STEPS_PER_JUMP; // \u5e94\u4e3a 16\n\n  for (int test_case = 0; test_case &lt; 5; ++test_case) {\n    std::string s0_hex, s1_hex, s2_hex;\n    if (!(std::cin &gt;&gt; s0_hex &gt;&gt; s1_hex &gt;&gt; s2_hex))\n      return 0;\n    std::string target_hex;\n    if (!(std::cin &gt;&gt; target_hex))\n      return 0;\n\n    uint64_t s0 = std::stoull(s0_hex, nullptr, 16);\n    uint64_t s1 = std::stoull(s1_hex, nullptr, 16);\n    uint64_t s2 = std::stoull(s2_hex, nullptr, 16);\n\n    uint32_t target_digest[4];\n    try {\n      parse_hex_digest(target_hex, target_digest);\n    } catch (const std::exception &amp;e) {\n      std::cerr &lt;&lt; \"Error parsing target hash: \" &lt;&lt; e.what() &lt;&lt; std::endl;\n      return 1;\n    }\n\n    volatile long long found_n = -1;\n\n#pragma omp parallel\n    {\n      int thread_id = omp_get_thread_num();\n\n      RndGen generator(s0, s1, s2);\n      if (thread_id &gt; 0) {\n        generator.jump_all_states_with_index(thread_id * PHYSICAL_BATCH_SIZE);\n      }\n\n      md5_avx512_soa::MD5 md5_calc;\n      md5_calc.set_target_digest(target_digest);\n\n      long long base_n = (long long)thread_id * THREAD_BATCH_SIZE + 1;\n\n      while (found_n == -1) {\n        for (long long simd_iter = 0; simd_iter &lt; SIMD_BATCH_SIZE;\n             ++simd_iter) {\n          md5_calc.calculate(generator);\n\n          int match_index = md5_calc.find_match_index();\n          if (match_index != -1) {\n            // \u8ba1\u7b97\u771f\u5b9e n \u503c\n            long long current_n =\n                base_n + simd_iter + match_index * SIMD_BATCH_SIZE;\n            long long expected = -1;\n            if (__atomic_compare_exchange(&amp;found_n, &amp;expected, &amp;current_n,\n                                          false, __ATOMIC_SEQ_CST,\n                                          __ATOMIC_SEQ_CST)) {\n            }\n            break;\n          }\n        }\n\n        if (found_n != -1) {\n          break;\n        }\n\n        generator.jump_all_states_with_index(40 * 16 - 1);\n\n        base_n += (long long)40 * THREAD_BATCH_SIZE;\n      }\n    }\n\n    if (found_n != -1) {\n      std::cout &lt;&lt; found_n &lt;&lt; std::endl;\n    } else {\n      std::cout &lt;&lt; -1 &lt;&lt; std::endl;\n    }\n  }\n\n  return 0;\n}\n</code></pre>"},{"location":"2025/08/22/zxhpc-2025-writeup/#llm-challenge","title":"llm-challenge","text":"\u9898\u9762 llm-challenge <p>LLM\u6311\u6218</p> <p>\u6ce8\u610f\uff1a\u672c\u9898\u53ea\u80fd\u5728 Linux x86 \u7cfb\u7edf\u4e0a\u8fd0\u884c</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u8bf7\u9009\u62e9\u5408\u9002\u7684 LLM \u6a21\u578b\u53ca\u63a8\u7406\u7cfb\u7edf\uff0c\u5b8c\u6210\u7ed9\u5b9a\u7684100\u9053\u6d4b\u8bd5\u9898\u3002\u4f60\u9700\u8981\u517c\u987e\u8fd0\u884c\u65f6\u95f4\u4e0e\u6b63\u786e\u7387\uff0c\u4ee5\u83b7\u5f97\u5c3d\u53ef\u80fd\u9ad8\u7684\u5206\u6570\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u9664\u4e86\u6253\u8868\u548c\u8c03\u7528\u5916\u90e8LLM\u4ee5\u5916\u7684\u5404\u79cd\u65b9\u6cd5\u4f18\u5316\u8fd0\u884c\u65f6\u95f4\u4e0e\u6d4b\u8bd5\u5f97\u5206\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u4f7f\u7528\u9ad8\u6548\u63a8\u7406\u6846\u67b6</li> <li>\u4f7f\u7528\u91cf\u5316\u3001\u7a00\u758f\u5316\u6a21\u578b</li> <li>\u5728\u95ee\u9898\u57fa\u7840\u4e0a\u6dfb\u52a0\u5176\u4ed6prompt</li> <li>\u4f7f\u7528\u601d\u7ef4\u94fe</li> <li>\u8c03\u6574\u4ece\u6a21\u578b\u56de\u7b54\u4e2d\u63d0\u53d6\u7b54\u6848\u7684\u65b9\u5f0f</li> <li>\u53ea\u9009\u62e9\u90e8\u5206\u95ee\u9898\u4f5c\u7b54</li> <li>\u63d0\u524d\u5b8c\u6210\u6a21\u578b\u52a0\u8f7d\uff0c\u4ec5\u5728<code>zxscorer</code>\u4e2d\u5904\u7406\u8f93\u5165</li> </ul> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u4e3a\u4e00\u7cfb\u5217\u56db\u9009\u4e00\u7684\u5355\u9009\u9898\uff0c\u5404\u9898\u76ee\u4e4b\u95f4\u4ee5\u8fde\u7eed\u4e24\u4e2a\u6362\u884c\u7b26\u5206\u9694\uff08\u4fdd\u8bc1\u9898\u76ee\u5185\u4e0d\u5b58\u5728\u8fde\u7eed\u4e24\u4e2a\u6362\u884c\u7b26\uff09\u3002</p> <p>\u5b9e\u9645\u8f93\u5165\u4e2d\u6bcf\u4e2a\u9898\u76ee\u7684\u5e73\u5747\u5b57\u7b26\u6570\u4e3a473\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u9700\u6309\u7167\u9898\u76ee\u8f93\u5165\u7684\u987a\u5e8f\uff0c\u6bcf\u884c\u586b\u5199\u4e00\u4e2a\u5b57\u7b26\uff08A/B/C/D\uff09\uff0c\u4ee5\u6b64\u8868\u793a\u5bf9\u5e94\u9898\u76ee\u7684\u7b54\u6848\u3002</p> <p>\u8f93\u5165\u6837\u4f8b</p> <p>\u793a\u4f8b\u4ec5\u5305\u542b5\u9053\u9898\u76ee\uff0c\u5b9e\u9645\u8f93\u5165\u5305\u542b100\u9053\u9898\u76ee\u3002</p> <pre><code>A person walked 3 miles to the east, then turned north and walked 10 miles, then turned west and walked 6 miles, and finally turned south and walked 16 miles. Approximately how far is the person from his starting point in miles?\nA. 3.4\nB. 6.7\nC. 9.2\nD. 12.8\n\nThis question refers to the following information.\n\"We conclude that, in the field of public education, the doctrine of \"separate but equal\" has no place. Separate educational facilities are inherently unequal. Therefore, we hold that the plaintiffs and others similarly situated for whom the actions have been brought are, by reason of the segregation complained of, deprived of the equal protection of the laws guaranteed by the Fourteenth Amendment.\"\nBrown v. Board of Education, 1954\nDesegregation of schools was, in part, a response to unfulfilled promises from which of the following initiatives?\nA. The Great Society\nB. The Square Deal\nC. The New Deal\nD. Reconstruction\n\nStatement 1| For any two variables x and y having joint distribution p(x, y), we always have H[x, y] \u2265 H[x] + H[y] where H is entropy function. Statement 2| For some directed graphs, moralization decreases the number of edges present in the graph.\nA. True, True\nB. False, False\nC. True, False\nD. False, True\n\nThis question refers to the following information.\n\"To slacken the tempo would mean falling behind. And those who fall behind get beaten. But we do not want to be beaten. No, we refuse to be beaten! One feature of the history of old Russia was the continual beatings she suffered because of her backwardness. She was beaten by the Mongol khans. She was beaten by the Turkish beys. She was beaten by the Swedish feudal lords. She was beaten by the Polish and Lithuanian gentry. She was beaten by the British and French capitalists. She was beaten by the Japanese barons. All beat her\u2013\u2013because of her backwardness, because of her military backwardness, cultural backwardness, political backwardness, industrial backwardness, agricultural backwardness. They beat her because it was profitable and could be done with impunity. You remember the words of the pre-revolutionary poet: \"You are poor and abundant, mighty and impotent, Mother Russia.\" Those gentlemen were quite familiar with the verses of the old poet. They beat her, saying: \"You are abundant,\" so one can enrich oneself at your expense. They beat her, saying: \"You are poor and impotent,\" so you can be beaten and plundered with impunity. Such is the law of the exploiters\u2013\u2013to beat the backward and the weak. It is the jungle law of capitalism. You are backward, you are weak\u2013\u2013therefore you are wrong; hence you can be beaten and enslaved. You are mighty\u2013\u2013therefore you are right; hence we must be wary of you.\nThat is why we must no longer lag behind.\"\nJoseph Stalin, speech delivered at the first All-Union Conference of Leading Personnel of Socialist Industry, February 4, 1931\nStalin's speech is most strongly influenced by which of the following?\nA. Appeasement\nB. Fascism\nC. Communism\nD. Secret treaties\n\nWhich of the following forms of dementia has the highest prevalence rate?\nA. Alzheimer's\nB. Vascular\nC. Parkinson's\nD. Fronto-temporal lobe\n</code></pre> <p>\u8f93\u51fa\u6837\u4f8b</p> <pre><code>B\nD\nB\nC\nA\n</code></pre> <p>\u8bc4\u5206\u6807\u51c6</p> <p>\u82e5\u8fd0\u884c\u65f6\u95f4\u4e3a\\(T\\)\u5206\u949f\uff0c\u5219\u8fd0\u884c\u65f6\u95f4\u90e8\u5206\u7684\u5f97\u5206\u4e3a</p> \\[ S_1 = \\begin{cases} 100 &amp;, T \\leq 0.5 \\\\ 100\\left({\\log\\left(\\frac{T}{30}\\right)}/{\\log\\left(\\frac{0.5}{30}\\right)}\\right) &amp;, 0.5 &lt; T &lt; 30 \\\\ 0 &amp;, T \\geq 30 \\end{cases} \\] <p>\u82e5\u7b54\u6848\u6b63\u786e\u7684\u95ee\u9898\u6570\u91cf\u4e3a\\(C\\)\uff0c\u5219\u6b63\u786e\u7387\u90e8\u5206\u7684\u5f97\u5206\u4e3a</p> \\[ S_2 = \\frac{100}{65}\\max(C - 35, 0) \\] <p>\u6700\u7ec8\u5f97\u5206\u4e3a\u4e24\u90e8\u5206\u5f97\u5206\u7684\u51e0\u4f55\u5e73\u5747\u503c\uff0c\u5373\\(S=\\sqrt{S_1S_2}\\)\uff0c\u5e76\u6839\u636e\u5168\u90e8\u9009\u624b\u7684\u6700\u9ad8\u5206\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u7ebf\u6027\u7f29\u653e\u5230\u6ee1\u5206 100 \u5206\u3002</p> <p>\u8fd9\u4e00\u9898\u5927\u90e8\u5206\u7684\u96be\u5ea6\u5176\u5b9e\u662f\u5728\u914d\u73af\u5883\u4e0a\uff0c\u4f46\u6211\u9009\u62e9\u4e86\u4e00\u4e2a\u53d6\u5de7\u7684\u65b9\u5f0f\uff1a\u4f7f\u7528 llamafile</p> README.md <p>llamafile lets you distribute and run LLMs with a single file. (announcement blog post)</p> <p>Our goal is to make open LLMs much more accessible to both developers and end users. We're doing that by combining llama.cpp with Cosmopolitan Libc into one framework that collapses all the complexity of LLMs down to a single-file executable (called a \"llamafile\") that runs locally on most computers, with no installation.</p> <p>\u4e00\u952e\u8fd0\u884c\uff0c\u5728\u670d\u52a1\u5668\u4e0a\u53ef\u4ee5\u65e0\u987b\u914d\u7f6e\u4efb\u4f55\u73af\u5883\u76f4\u63a5\u8fd0\u884c</p> <p>\u5bf9\u4e8e\u6a21\u578b\uff0c\u6211\u5c1d\u8bd5\u4e86\u8fd9\u51e0\u4e2a\u6a21\u578b</p> <ul> <li> <p>https://huggingface.co/Mozilla/Qwen2.5-7B-Instruct-1M-llamafile</p> </li> <li> <p>https://huggingface.co/Mozilla/Qwen3-4B-llamafile</p> </li> <li> <p>https://huggingface.co/Mozilla/Qwen2.5-0.5B-Instruct-llamafile</p> </li> <li> <p>https://huggingface.co/Mozilla/Llama-3.2-1B-Instruct-llamafile</p> </li> <li> <p>https://huggingface.co/zai-org/glm-4-9b</p> </li> </ul> <p>\u5176\u4e2d glm-4-9b \u7684\u6b63\u786e\u7387\u6700\u9ad8\uff0c\u4e00\u822c\u80fd\u5230 80% \u5de6\u53f3\uff0c\u4f46\u901f\u5ea6\u6bd4 Qwen2.5-7B-Instruct-1M-llamafile \u6162\u4e86\u975e\u5e38\u591a</p> <p>Qwen3 \u7cfb\u5217\u56e0\u4e3a\u601d\u7ef4\u94fe\u7684\u5173\u7cfb\uff0c\u8f93\u51fa\u4e0d\u6613\u8c03\u6574\uff0c\u7efc\u5408\u8003\u8651\u540e\u6392\u9664\u4e86 Qwen3 \u7cfb\u5217\u6a21\u578b</p> <p>\u7efc\u5408\u8003\u8651\uff0cQwen2.5-7B-Instruct-1M-llamafile \u662f\u5f97\u5206\u6700\u9ad8\u7684\u6a21\u578b\uff0c\u53d6\u5f97\u4e86\u6700\u9ad8\u7684\u6210\u7ee9\uff0858.16pts\uff09</p> <p>\u6211\u8003\u8651\u8fc7\u9650\u5236 max token \u4e3a 1 \u5e76\u7528 grammar \u9650\u5236\u8f93\u51fa\u4e3a A/B/C/D\uff0c\u4f46\u6b63\u786e\u7387\u592a\u4f4e\u5f97\u4e0d\u507f\u5931\uff0c\u6545\u6ca1\u6709\u7ee7\u7eed\u6df1\u5165\u8c03\u8bd5</p> <pre><code>Run log:\nTest case: Test 1\nDuration: 158.023s\nDiff result: 72\nTip: \nScore: 58.15746228385942\nPassed\n</code></pre> \u6700\u7ec8\u4f18\u5316\u4ee3\u7801 (58.16pts) <pre><code>#!/usr/bin/env python3\nimport sys\nimport re\nimport time\nimport requests\nimport json\nimport argparse\nimport traceback\nfrom typing import List, Optional\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nCHOICES = [\"A\", \"B\", \"C\", \"D\"]\nANSWER_GRAMMAR = re.compile(r\"\\b([ABCD])\\b\")\n\nSYSTEM_PROMPT = (\n    \"Answer multiple-choice questions. You may explain, \"\n    \"but your final line must contain only the correct option letter (A, B, C, or D).\"\n)\n\nFEW_SHOT = [\n    {\"role\": \"user\", \"content\": \"Capital of France?\\nA. London\\nB. Berlin\\nC. Paris\\nD. Madrid\"},\n    {\"role\": \"assistant\", \"content\": \"Paris is the capital of France.\\nC\"},\n    {\"role\": \"user\", \"content\": \"Atomic number 1?\\nA. He\\nB. O\\nC. H\\nD. C\"},\n    {\"role\": \"assistant\", \"content\": \"Hydrogen has atomic number 1.\\nC\"},\n]\n\ndef split_questions(raw: str) -&gt; List[str]:\n    parts = [p.strip() for p in re.split(r\"\\n\\s*\\n\", raw) if p.strip()]\n    return parts\n\ndef extract_think_content(text: str) -&gt; str:\n    match = re.search(r\"&lt;think&gt;(.*?)&lt;/think&gt;\", text, re.DOTALL)\n    if match:\n        return match.group(1).strip()\n    return text.strip()\n\ndef extract_choice(text: str) -&gt; Optional[str]:\n    lines = [line.strip() for line in text.strip().splitlines() if line.strip()]\n    if lines:\n        last_line = lines[-1]\n        if last_line in CHOICES:\n            return last_line\n    cand = ANSWER_GRAMMAR.findall(text[-16:])\n    if cand:\n        return cand[-1]\n    cand = ANSWER_GRAMMAR.findall(text)\n    if cand:\n        return cand[-1]\n    return None\n\nclass LlamaTCPsolver:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 8080, debug: bool = False):\n        self.host = host\n        self.port = port\n        self.url = f\"http://{host}:{port}/v1/chat/completions\"\n        self.debug = debug\n        if self.debug:\n            print(f\"[DEBUG] LlamaTCPsolver initialized for server at {self.url}\")\n\n    def solve(self, question: str) -&gt; str:\n        messages = [{\"role\": \"system\", \"content\": SYSTEM_PROMPT}]\n        messages.extend(FEW_SHOT)\n        messages.append({\"role\": \"user\", \"content\": question })\n\n        payload = {\n            \"model\": \"qwen2.5-7b\",\n            \"messages\": messages,\n            \"max_tokens\": 1024,\n            \"temperature\": 0.0,\n        }\n\n        if self.debug:\n            print(f\"[DEBUG] Sending payload:\\n{json.dumps(payload, indent=2, ensure_ascii=False)}\")\n\n        max_retries = 1\n        attempt = 0\n        while attempt &lt; max_retries:\n            attempt += 1\n            try:\n                resp = requests.post(\n                    self.url,\n                    headers={\"Content-Type\": \"application/json\"},\n                    data=json.dumps(payload),\n                    timeout=120,\n                )\n\n                if self.debug:\n                    print(f\"[DEBUG] Received response status: {resp.status_code}\")\n                    print(f\"[DEBUG] Received raw response body:\\n{resp.text}\")\n\n                resp.raise_for_status()\n                data = resp.json()\n\n                if self.debug:\n                    print(f\"[DEBUG] Parsed response JSON:\\n{json.dumps(data, indent=2, ensure_ascii=False)}\")\n\n                text = data[\"choices\"][0][\"message\"][\"content\"]\n                choice = extract_choice(text)\n\n                if choice:\n                    return choice\n            except requests.exceptions.ConnectionError as e:\n                if self.debug:\n                    print(f\"[DEBUG] Connection Error: Could not connect to {self.url}. Ensure llamafile server is running.\", file=sys.stderr)\n                break\n            except requests.exceptions.HTTPError as e:\n                if self.debug:\n                    print(f\"[DEBUG] HTTP Error: {e.response.status_code} - {e.response.reason}\", file=sys.stderr)\n                    print(f\"[DEBUG] Response body: {e.response.text}\", file=sys.stderr)\n                break\n            except Exception as e:\n                if self.debug:\n                    print(f\"[DEBUG] An unexpected exception occurred: {e}\", file=sys.stderr)\n                    traceback.print_exc(file=sys.stderr)\n                time.sleep(0.5)\n                continue\n\n        if self.debug:\n            print(f\"[DEBUG] Failed to get a valid response after {max_retries} attempts.\", file=sys.stderr)\n        return \"E\"\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 8080, debug: bool = False):\n        self.host = host\n        self.port = port\n        self.url = f\"http://{host}:{port}/v1/chat/completions\"\n        self.debug = debug\n        if self.debug:\n            print(f\"[DEBUG] LlamaTCPsolver initialized for server at {self.url}\")\n\n    def solve(self, question: str) -&gt; str:\n        if self.debug:\n            print(f\"[DEBUG] Solving question:\\n{question}\\n\")\n\n        messages = [{\"role\": \"system\", \"content\": SYSTEM_PROMPT}]\n        messages.extend(FEW_SHOT)\n        messages.append({\"role\": \"user\", \"content\": question })\n\n        payload = {\n            \"model\": \"qwen2.5-7b-instruct\",\n            \"messages\": messages,\n            \"max_tokens\": 1024,\n            \"temperature\": 0.0,\n        }\n\n        if self.debug:\n            print(f\"[DEBUG] Payload: {json.dumps(payload, ensure_ascii=False)}\")\n\n        max_retries = 1\n        attempt = 0\n        while attempt &lt; max_retries:\n            attempt += 1\n            try:\n                if self.debug:\n                    print(f\"[DEBUG] Sending request attempt {attempt} of {max_retries} for question: {question}\")\n                resp = requests.post(\n                    self.url,\n                    headers={\"Content-Type\": \"application/json\"},\n                    data=json.dumps(payload),\n                    timeout=120,\n                )\n                resp.raise_for_status()\n                data = resp.json()\n                if self.debug:\n                    print(f\"[DEBUG] Full response JSON: {json.dumps(data, ensure_ascii=False)}\")\n                text = data[\"choices\"][0][\"message\"][\"content\"]\n                choice = extract_choice(text)\n                if self.debug:\n                    print(f\"[DEBUG] Received raw: '{text}', extracted choice: {choice}\")\n                if choice:\n                    return choice\n            except requests.exceptions.ConnectionError:\n                if self.debug:\n                    print(f\"[DEBUG] Connection Error: Could not connect to {self.url}. Ensure llamafile server is running.\")\n                break\n            except Exception as e:\n                if self.debug:\n                    print(f\"[DEBUG] Exception on attempt {attempt} for {question}: {e}\")\n                    traceback.print_exc()\n                time.sleep(0.5)\n                continue\n\n        if self.debug:\n            print(f\"[DEBUG] Failed to get a valid response after {max_retries} attempts for question: {question}\")\n        return \"E\"\ndef main():\n    parser = argparse.ArgumentParser(description=\"Solve multiple-choice questions via a running Llamafile server\")\n    parser.add_argument(\"--host\", default=\"127.0.0.1\", help=\"Llamafile server host (default: 127.0.0.1)\")\n    parser.add_argument(\"--port\", type=int, default=8090, help=\"Llamafile server port (default: 8090)\")\n    parser.add_argument(\"--debug\", action=\"store_true\", help=\"Enable debug logs\")\n    parser.add_argument(\"--workers\", type=int, default=4, help=\"Number of concurrent worker threads\")\n    args = parser.parse_args()\n\n    raw = sys.stdin.read()\n    questions = split_questions(raw)\n\n    if not questions:\n        print(\"[!] No questions found in standard input. Exiting.\")\n        return\n\n    if args.debug:\n        print(f\"[DEBUG] Loaded {len(questions)} questions from stdin.\")\n\n    solver = LlamaTCPsolver(args.host, args.port, debug=args.debug)\n    results = [None] * len(questions)  # \u9884\u5206\u914d\u7ed3\u679c\u5217\u8868\uff0c\u6309\u539f\u59cb\u987a\u5e8f\u5b58\u50a8\n\n    def process_question(idx: int, q: str):\n        truncated_q = q.split('\\n')[0] # Truncate for cleaner logs\n        try:\n            if args.debug:\n                print(f\"[DEBUG] Q{idx+1}: Starting to solve: '{truncated_q}'\")\n            ans = solver.solve(q)\n            results[idx] = ans\n            if args.debug:\n                print(f\"[DEBUG] Q{idx+1}: Finished. Answer: {ans}\")\n        except Exception as e:\n            results[idx] = \"E\"\n            if args.debug:\n                print(f\"[DEBUG] Q{idx+1}: An error occurred while processing: {e}\", file=sys.stderr)\n\n    # \u63d0\u4ea4\u4efb\u52a1\uff08\u4fdd\u7559\u539f\u59cb\u987a\u5e8f\u7d22\u5f15\uff09\n    with ThreadPoolExecutor(max_workers=args.workers) as executor:\n        futures = [\n            executor.submit(process_question, idx, q)\n            for idx, q in enumerate(questions)\n        ]\n        # \u963b\u585e\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n        for future in as_completed(futures):\n            future.result()  # \u4ec5\u7b49\u5f85\uff0c\u4e0d\u5904\u7406\u7ed3\u679c\uff08\u5df2\u901a\u8fc7 results \u5217\u8868\u5b58\u50a8\uff09\n\n    # \u6309\u539f\u59cb\u987a\u5e8f\u8f93\u51fa\n    for ans in results:\n        print(ans, flush=True)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"2025/08/22/zxhpc-2025-writeup/#traffic-detector","title":"traffic-detector","text":"\u9898\u9762 traffic-detector <p>Traffic Detector</p> <p>\u6ce8\u610f\uff1a\u672c\u9898\u65e0\u6cd5\u5728\u672c\u5730\u6d4b\u8bd5\uff0c\u53ea\u80fd\u5728\u96c6\u7fa4\u73af\u5883\u6d4b\u8bd5\u6216\u63d0\u4ea4</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6076\u610f\u6d41\u91cf\u68c0\u6d4b\u662f\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u4e2d\u7684\u91cd\u8981\u7814\u7a76\u8bfe\u9898\uff0c\u5982\u4f55\u5206\u6790\u5927\u91cf\u7684\u7f51\u7edc\u6570\u636e\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u91cd\u96be\u70b9\u3002\u73b0\u6709\u7eaf\u6587\u672c\u683c\u5f0f\u7684\u7f51\u7edc\u6d41\u91cf\uff0c\u5305\u542b\u6709\u4e24\u79cd\u534f\u8bae\u7684\u6d41\u91cf\u6570\u636e\uff1aTCP/DNS\u3002\u5177\u4f53\u7684\u683c\u5f0f\u5982\u4e0b\uff1a</p> <ul> <li>TCP\u6d41\u91cf\uff1a<code>\u65f6\u95f4\u6233 TCP \u6e90IP \u76ee\u7684IP \u6e90\u7aef\u53e3 \u76ee\u7684\u7aef\u53e3 flags \u6570\u636e\u957f\u5ea6 \u5341\u516d\u8fdb\u5236\u6570\u636e</code></li> <li>DNS\u6d41\u91cf\uff1a<code>\u65f6\u95f4\u6233 DNS \u6e90IP \u76ee\u7684IP \u6e90\u7aef\u53e3 \u76ee\u7684\u7aef\u53e3 \u57df\u540d\u957f\u5ea6 \u57df\u540d</code></li> </ul> <p>\u8f93\u5165\u6570\u636e\u6309\u7167\u65f6\u95f4\u6233\u589e\u5e8f\u7ed9\u51fa\u3002</p> <p>\u5728\u6b63\u5e38\u7684\u6d41\u91cf\u4e2d\uff0c\u6df7\u6742\u6709\u4e24\u79cd\u6076\u610f\u6d41\u91cf\uff1aTCP\u7aef\u53e3\u626b\u63cf\u548cDNS\u96a7\u9053\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u6700\u7b80\u5355\u7684\u6a21\u578b\uff0c\u5c06\u6240\u6709\u201c\u6e90IP\u53ea\u53d1\u9001\u4e00\u4e2aSYN\u5305\u4fbf\u6ca1\u6709\u540e\u7eed\u6d41\u91cf\u201d\u7684\u6d41\u89c6\u4e3a\u7aef\u53e3\u626b\u63cf\uff0c\u5c06\u6240\u6709\u57df\u540d\u524d\u7f00\u5927\u4e8e\u7b49\u4e8e30\u7684DNS\u67e5\u8be2\u89c6\u4e3aDNS\u96a7\u9053\u3002\u8bf7\u4f60\u7edf\u8ba1\u6240\u6709\u7684\u6076\u610f\u884c\u4e3a\uff0c\u5e76\u7ed9\u51fa\u7edf\u8ba1\u6570\u636e</p> <p>\u8bf7\u4e0d\u8981\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u5176\u4ed6\u65e0\u5173\u7279\u5f81\u8fdb\u884c\u4f18\u5316\uff0c\u5982DNS\u96a7\u9053\u5bf9\u5e94\u7684\u4e3b\u57df\u540d\u4e0e\u6b63\u5e38DNS\u8bf7\u6c42\u7684\u4e3b\u57df\u540d\u5dee\u5f02\u7b49\u3002\u8bf7\u4e25\u683c\u6309\u7167\u4ee5\u4e0a\u7684\u89c4\u5219\u8fdb\u884c\u7edf\u8ba1\uff0c\u5e76\u5b8c\u6210\u6587\u4ef6IO\u3001\u7b97\u6cd5\u76f8\u5173\u7684\u4f18\u5316\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p><code>IP \u6076\u610f\u884c\u4e3a \u53d1\u751f\u6b21\u6570</code>\uff0c\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u4f5c\u4e3a\u5206\u9694\uff0c\u5176\u4e2d\u6076\u610f\u884c\u4e3a\u662f<code>portscan</code>/<code>tunnelling</code>\u4e2d\u7684\u4e00\u4e2a\uff0c\u53d1\u751f\u6b21\u6570\u5bf9\u4e8e\u7aef\u53e3\u626b\u63cf\u800c\u8a00\u662f\u6240\u6709\u7aef\u53e3\u626b\u63cfTCP\u6d41\u7684\u4e2a\u6570\uff0c\u5bf9\u4e8eDNS\u96a7\u9053\u800c\u8a00\u662f\u6240\u6709\u901a\u8fc7DNS\u96a7\u9053\u4f20\u8f93\u7684\u6570\u636e\u603b\u91cf\uff08\u5373\u5b50\u57df\u540d\u524d\u7f00\u7684\u957f\u5ea6\uff0c\u6309\u5b57\u7b26\u8ba1\uff09\u3002\u9898\u76ee\u5bf9\u8f93\u51fa\u6570\u636e\u7684\u987a\u5e8f\u6709\u8981\u6c42\uff0c\u9700\u8981\u5148\u8f93\u51fa\u6240\u6709<code>portscan</code>\u7edf\u8ba1\uff0c\u518d\u8f93\u51fa\u6240\u6709<code>tunnelling</code>\u7edf\u8ba1\uff0c\u540c\u65f6\u6bcf\u4efd\u7edf\u8ba1\u6309\u7167\u5b57\u5178\u5e8f\u5347\u5e8f\u5bf9IP\u8fdb\u884c\u6392\u5e8f\uff08\u5982<code>1.1.1.7</code> &lt; <code>1.1.1.70</code> &lt; <code>1.1.1.8</code>\uff09\u3002</p> <p>\u6837\u4f8b</p> <p>\u8f93\u5165\u6837\u4f8b <pre><code>0.01 TCP 114.5.1.4 192.168.1.100 1919 810 SYN 0\n0.02 DNS 192.168.1.1 8.8.8.8 61212 53 42 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.example.com\n</code></pre> \u8f93\u51fa\u6837\u4f8b <pre><code>114.5.1.4 portscan 1\n192.168.1.1 tunnelling 30\n</code></pre></p> <p>\u8bc4\u5206\u89c4\u5219</p> \\[ \\text{score} = 25\\cdot\\log_2\\left(\\frac{300\\text{s}}{T}\\right) \\] <p>\u53c2\u8003\u7a0b\u5e8f</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\nstruct Packet {\n    double timestamp;\n    std::string protocol;\n    std::string src_ip, dst_ip;\n    int src_port = -1, dst_port = -1;\n    std::string flags;\n    int data_len = 0;\n    std::string data;\n};\n\nPacket parse_line(const std::string&amp; line) {\n    Packet pkt;\n    std::istringstream iss(line);\n    iss &gt;&gt; pkt.timestamp &gt;&gt; pkt.protocol &gt;&gt; pkt.src_ip &gt;&gt; pkt.dst_ip;\n    if (pkt.protocol == \"TCP\" || pkt.protocol == \"DNS\") {\n        iss &gt;&gt; pkt.src_port &gt;&gt; pkt.dst_port;\n        if (pkt.protocol == \"TCP\") {\n            iss &gt;&gt; pkt.flags;\n        }\n        iss &gt;&gt; pkt.data_len;\n        if (iss.peek() == ' ' || iss.peek() == '\\t') iss.get();\n        std::getline(iss, pkt.data);\n        if (!pkt.data.empty() &amp;&amp; pkt.data[0] == ' ') pkt.data.erase(0, 1);\n    }\n    return pkt;\n}\n\nstd::string get_dns_prefix(const std::string&amp; domain) {\n    size_t dot = domain.find('.');\n    if (dot != std::string::npos) return domain.substr(0, dot);\n    return \"\";\n}\n\nint main() {\n    std::ifstream fin(\"network_traffic.txt\");\n    if (!fin) {\n        std::cerr &lt;&lt; \"\u8bfb\u53d6network_traffic.txt\u5931\u8d25!\\n\";\n        return 1;\n    }\n\n    struct FiveTuple {\n        std::string src_ip, dst_ip;\n        int src_port, dst_port;\n    };\n    auto tuple_str = [](const FiveTuple&amp; t) {\n        return t.src_ip + \"|\" + t.dst_ip + \"|\" + std::to_string(t.src_port) + \"|\" + std::to_string(t.dst_port);\n    };\n\n    // \u7aef\u53e3\u626b\u63cf\n    std::map&lt;std::string, std::vector&lt;Packet&gt;&gt; syn_flows;\n\n    // DNS\u96a7\u9053\n    std::map&lt;std::string, int&gt; dnstunnel_count; // src_ip -&gt; \u6b21\u6570\n\n    std::string line;\n    while (std::getline(fin, line)) {\n        if (line.empty()) continue;\n        Packet pkt = parse_line(line);\n\n        // \u7aef\u53e3\u626b\u63cf\n        if (pkt.protocol == \"TCP\") {\n            FiveTuple key{pkt.src_ip, pkt.dst_ip, pkt.src_port, pkt.dst_port};\n            syn_flows[tuple_str(key)].push_back(pkt);\n        }\n        // DNS\u96a7\u9053\n        else if (pkt.protocol == \"DNS\" &amp;&amp; !pkt.data.empty()) {\n            std::string prefix = get_dns_prefix(pkt.data);\n            if (prefix.length() &gt;= 30) {\n                dnstunnel_count[pkt.src_ip]+=prefix.length();\n            }\n        }\n    }\n\n    // \u8f93\u51fa\u7aef\u53e3\u626b\u63cf\n    std::map&lt;std::string, int&gt; portscan_ip_count;\n    for (const auto&amp; kv : syn_flows) {\n        const std::vector&lt;Packet&gt;&amp; pkts = kv.second;\n        if (pkts.size() == 1 &amp;&amp; pkts[0].flags == \"SYN\") {\n            portscan_ip_count[pkts[0].src_ip]++;\n        }\n    }\n\n    // \u7edf\u4e00\u8f93\u51fa\uff0c\u4f18\u5148\u7aef\u53e3\u626b\u63cf\uff0c\u540e\u96a7\u9053\n    for (const auto&amp; kv : portscan_ip_count) {\n        std::cout &lt;&lt; kv.first &lt;&lt; \" portscan \" &lt;&lt; kv.second &lt;&lt; std::endl;\n    }\n    for (const auto&amp; kv : dnstunnel_count) {\n        std::cout &lt;&lt; kv.first &lt;&lt; \" tunnelling \" &lt;&lt; kv.second &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u884c\u4e3a\u975e\u5e38\u590d\u6742\uff0c\u6211\u4eec\u5148\u770b\u770b profile \u7ed3\u679c</p> <p>\u672c\u6b21\u6bd4\u8d5b\u6211\u4e3b\u8981\u4f7f\u7528 samply \u4f5c\u4e3a profile \u5de5\u5177\u8fdb\u884c\uff0c\u8fd9\u4e2a\u5de5\u5177\u80fd\u91c7\u6837\u7a0b\u5e8f\u8fd0\u884c\u6570\u636e\u5e76\u7528 <code>profiler.firefox.com</code> \u4f5c\u4e3a\u524d\u7aef\u753b\u51fa\u76f4\u89c2\u7684\u706b\u7130\u56fe\u5e76\u663e\u793a\u70ed\u70b9\u4ee3\u7801</p> <p></p> <p>\u53ef\u4ee5\u53d1\u73b0\u5927\u90e8\u5206\u7684\u65f6\u95f4\u90fd\u662f\u82b1\u5728 <code>std::map</code> \u7684\u63d2\u5165\u4e0e\u67e5\u627e\u64cd\u4f5c\u4e0a\uff0c<code>std::map</code> \u7684\u5185\u90e8\u5b9e\u73b0\u662f\u7ea2\u9ed1\u6811\uff0c\u5bf9\u4e8e\u5927\u91cf\u63d2\u5165\u67e5\u627e\u7684\u884c\u4e3a\uff0chashmap \u624d\u662f\u66f4\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784</p>"},{"location":"2025/08/22/zxhpc-2025-writeup/#traffic-detector-ver10","title":"traffic-detector Ver1.0","text":"<p>\u67e5\u770b\u8fd9\u4e2a Hashmaps Benchmarks \uff0c\u8003\u8651\u5230\u9759\u6001\u94fe\u63a5\u5230\u7a0b\u5e8f\u4e2d\u7684\u96be\u5ea6\uff0c\u6211\u9009\u62e9\u4e86 <code>absl::flat_hash_map</code></p> <p>\u4e3a\u4e86\u4f18\u5316 hashmap \u901f\u5ea6\uff0c\u6211\u5c06\u539f\u6765\u7531\u591a\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u6210\u7684 string key (src_ip + \"|\" + ...) \u66ff\u6362\u4e3a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 FiveTuple \u7ed3\u6784\u4f53\uff0c\u51cf\u5c11\u4e86\u5b57\u7b26\u4e32\u62fc\u63a5\u64cd\u4f5c</p> <p>\u5206\u6790\u9898\u76ee\uff0c\u5176\u5b9e\u6211\u4eec\u4e0d\u9700\u8981\u5b8c\u6574\u89e3\u6790\u548c\u50a8\u5b58\u6bcf\u4e00\u884c\uff0c\u53ea\u9700\u8981\u5728\u534f\u8bae\u662f \"TCP\" \u6216 \"DNS\" \u624d\u53bb\u89e3\u6790\u540e\u7eed\u7684\u5b57\u6bb5\uff08\u5982\u7aef\u53e3\u3001Flags\u3001\u57df\u540d\u7b49\uff09\u3002\u5bf9\u4e8e\u4e0d\u5173\u5fc3\u7684\u534f\u8bae\uff0c\u89e3\u6790\u5de5\u4f5c\u5728\u534f\u8bae\u540d\u4e4b\u540e\u5c31\u505c\u6b62\u4e86</p> <p>\u901a\u8fc7\u8fd9\u4e9b\u4f18\u5316\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u4ece\u9700\u8981 <code>233.565s</code> \u52a0\u901f\u5230\u4e86\u53ea\u9700\u9700\u8981 <code>86.318s</code>\uff0c\u52a0\u901f\u7ea6 2.7\u500d</p> traffic-detector Ver1.0 <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n#include \"absl/container/flat_hash_map.h\"\n#include &lt;map&gt;\n#include &lt;vector&gt;\n\nstruct FiveTuple {\n    std::string src_ip, dst_ip;\n    int src_port, dst_port;\n\n    bool operator==(const FiveTuple&amp; o) const {\n        return src_ip == o.src_ip &amp;&amp; dst_ip == o.dst_ip &amp;&amp;\n               src_port == o.src_port &amp;&amp; dst_port == o.dst_port;\n    }\n};\n\nstruct HashFiveTuple {\n    size_t operator()(const FiveTuple&amp; t) const {\n        size_t h1 = std::hash&lt;std::string&gt;{}(t.src_ip);\n        size_t h2 = std::hash&lt;std::string&gt;{}(t.dst_ip);\n        size_t h3 = std::hash&lt;int&gt;{}(t.src_port);\n        size_t h4 = std::hash&lt;int&gt;{}(t.dst_port);\n        return h1 ^ (h2 &lt;&lt; 1) ^ (h3 &lt;&lt; 2) ^ (h4 &lt;&lt; 3);\n    }\n};\n\nstd::string get_dns_prefix(const std::string&amp; domain) {\n    size_t pos = domain.find('.');\n    if (pos != std::string::npos) return domain.substr(0, pos);\n    return \"\";\n}\n\nint main() {\n    absl::flat_hash_map&lt;FiveTuple, std::vector&lt;std::string&gt;, HashFiveTuple&gt; syn_flows;\n    absl::flat_hash_map&lt;std::string, int&gt; dnstunnel_count;\n\n    std::string line;\n    while (std::getline(std::cin, line)) {\n        if (line.empty()) continue;\n        const char* p = line.c_str();\n\n        // timestamp\n        while (*p &amp;&amp; *p != ' ') ++p; while (*p==' ') ++p;\n        // protocol\n        const char* prot_start = p;\n        while (*p &amp;&amp; *p != ' ') ++p; std::string protocol(prot_start, p - prot_start);\n        while (*p==' ') ++p;\n        // src_ip\n        const char* src_start = p;\n        while (*p &amp;&amp; *p != ' ') ++p; std::string src_ip(src_start, p - src_start);\n        while (*p==' ') ++p;\n        // dst_ip\n        const char* dst_start = p;\n        while (*p &amp;&amp; *p != ' ') ++p; std::string dst_ip(dst_start, p - dst_start);\n        while (*p==' ') ++p;\n\n        if (protocol == \"TCP\") {\n            // src_port\n            const char* s = p;\n            while (*p &amp;&amp; *p != ' ') ++p; int src_port = std::stoi(std::string(s, p-s));\n            while (*p==' ') ++p;\n            // dst_port\n            s = p; while (*p &amp;&amp; *p != ' ') ++p; int dst_port = std::stoi(std::string(s,p-s));\n            while (*p==' ') ++p;\n            // flags\n            const char* fstart = p; while (*p &amp;&amp; *p != ' ') ++p; std::string flags(fstart,p-fstart);\n\n            FiveTuple key{src_ip,dst_ip,src_port,dst_port};\n            syn_flows[key].push_back(flags);\n        }\n        else if (protocol == \"DNS\") {\n            // skip src_port dst_port length\n            for (int i=0;i&lt;3;++i){\n                while (*p &amp;&amp; *p != ' ') ++p; while (*p==' ') ++p;\n            }\n            // domain\n            std::string domain(p);\n            std::string prefix = get_dns_prefix(domain);\n            if (prefix.size() &gt;= 30) dnstunnel_count[src_ip] += prefix.size();\n        }\n    }\n\n    // portscan\u7edf\u8ba1\n    std::map&lt;std::string,int&gt; portscan_ip_count;\n    for (auto&amp; kv : syn_flows) {\n        const auto&amp; flags_vec = kv.second;\n        if (flags_vec.size() == 1 &amp;&amp; flags_vec[0]==\"SYN\")\n            portscan_ip_count[kv.first.src_ip]++;\n    }\n\n    // \u8f93\u51fa\n    for (auto&amp; kv : portscan_ip_count) std::cout &lt;&lt; kv.first &lt;&lt; \" portscan \" &lt;&lt; kv.second &lt;&lt; \"\\n\";\n    std::map&lt;std::string,int&gt; tunnelling_sorted(dnstunnel_count.begin(), dnstunnel_count.end());\n    for (auto&amp; kv : tunnelling_sorted) std::cout &lt;&lt; kv.first &lt;&lt; \" tunnelling \" &lt;&lt; kv.second &lt;&lt; \"\\n\";\n\n    return 0;\n}\n</code></pre>"},{"location":"2025/08/22/zxhpc-2025-writeup/#traffic-detector-ver20","title":"traffic-detector Ver2.0","text":"<p>\u518d\u6b21\u67e5\u770b\u706b\u7130\u56fe</p> <p></p> <p>\u6211\u4eec\u53d1\u73b0 <code>std::getline</code> \u548c\u89e3\u6790\u5360\u7528\u4e86\u5927\u91cf\u65f6\u95f4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f18\u5316\u4e00\u4e0b IO \u6027\u80fd</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u5feb\u7684 <code>mmap</code> \u5c06\u6587\u4ef6\u76f4\u63a5\u6620\u5c04\u5230\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u4ee3\u66ff\u4f20\u7edf\u7684 std::ifstream \u548c std::getline\uff0c\u6b64\u65f6\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u8d1f\u8d23\u5c06\u6587\u4ef6\u5185\u5bb9\u6309\u9700\u8f7d\u5165\u5185\u5b58</p> <p>\u6211\u4eec\u4e0d\u4f7f\u7528 <code>std::string</code> \u89e3\u6790\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u6539\u6210 <code>const char*</code> \u6307\u9488\u8fdb\u884c\u624b\u52a8\u89e3\u6790\uff0c\u96f6\u5185\u5b58\u62f7\u8d1d</p> <p>\u6211\u4eec\u8fd8\u53d1\u73b0\uff0c\u867d\u7136\u9898\u76ee\u8981\u6c42\u5c06 ip \u6309\u7167\u5b57\u7b26\u4e32\u987a\u5e8f\u6392\u5e8f\uff0c\u53ef\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u201c\u4f2a\u5b57\u7b26\u4e32\u6392\u5e8f\u201d\uff0c\u5c06 ip \u7528 u32 \u683c\u5f0f\u50a8\u5b58\uff0c\u7528\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\u8ba9 ip \u6309\u7167\u5b57\u7b26\u4e32\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u6781\u5927\u52a0\u5feb hashmap \u7684\u901f\u5ea6</p> ip_str_less <pre><code>inline int compare_num_str(int x, int y) {\n    if (x &lt; 10) {\n        if (y &lt; 10) {\n            return x - y;\n        } else if (y &lt; 100) {\n            int cmp = x - (y / 10);\n            if (cmp != 0) return cmp;\n            return -1;\n        } else {\n            int cmp = x - (y / 100);\n            if (cmp != 0) return cmp;\n            return -1;\n        }\n    } else if (x &lt; 100) {\n        if (y &lt; 10) {\n            int cmp = (x / 10) - y;\n            if (cmp != 0) return cmp;\n            return 1;\n        } else if (y &lt; 100) {\n            int cmp = (x / 10) - (y / 10);\n            if (cmp != 0) return cmp;\n            return (x % 10) - (y % 10);\n        } else {\n            int cmp = (x / 10) - (y / 100);\n            if (cmp != 0) return cmp;\n            cmp = (x % 10) - (y / 10 % 10);\n            if (cmp != 0) return cmp;\n            return -1;\n        }\n    } else {\n        if (y &lt; 10) {\n            int cmp = (x / 100) - y;\n            if (cmp != 0) return cmp;\n            return 1;\n        } else if (y &lt; 100) {\n            int cmp = (x / 100) - (y / 10);\n            if (cmp != 0) return cmp;\n            cmp = (x / 10 % 10) - (y % 10);\n            if (cmp != 0) return cmp;\n            return 1;\n        } else {\n            int cmp = (x / 100) - (y / 100);\n            if (cmp != 0) return cmp;\n            cmp = (x / 10 % 10) - (y / 10 % 10);\n            if (cmp != 0) return cmp;\n            return (x % 10) - (y % 10);\n        }\n    }\n}\n\n// \u6bd4\u8f83\u4e24\u4e2aIP\u7684\u5b57\u5178\u5e8f\uff08\u8003\u8651\u70b9\u53f7\uff09\ninline bool ip_str_less(uint32_t ip1, uint32_t ip2) {\n    int a1 = (ip1 &gt;&gt; 24) &amp; 0xFF;\n    int b1 = (ip1 &gt;&gt; 16) &amp; 0xFF;\n    int c1 = (ip1 &gt;&gt; 8) &amp; 0xFF;\n    int d1 = ip1 &amp; 0xFF;\n\n    int a2 = (ip2 &gt;&gt; 24) &amp; 0xFF;\n    int b2 = (ip2 &gt;&gt; 16) &amp; 0xFF;\n    int c2 = (ip2 &gt;&gt; 8) &amp; 0xFF;\n    int d2 = ip2 &amp; 0xFF;\n\n    int cmp = compare_num_str(a1, a2);\n    if (cmp &lt; 0) return true;\n    if (cmp &gt; 0) return false;\n\n    cmp = compare_num_str(b1, b2);\n    if (cmp &lt; 0) return true;\n    if (cmp &gt; 0) return false;\n\n    cmp = compare_num_str(c1, c2);\n    if (cmp &lt; 0) return true;\n    if (cmp &gt; 0) return false;\n\n    cmp = compare_num_str(d1, d2);\n    return cmp &lt; 0;\n}\n</code></pre> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u5b8c\u6574\u50a8\u5b58\u4e00\u4e2a TCP \u6d41\u7684\u5168\u90e8 flags\uff0c\u53ea\u9700\u8981\u7528\u4e00\u4e2a int \u6765\u6807\u8bb0\u72b6\u6001\uff1a1 \u4ee3\u8868\u53ea\u770b\u5230\u4e86 SYN \u5305\uff08\u6f5c\u5728\u7684 portscan\uff09\uff0c-1 \u4ee3\u8868\u770b\u5230\u4e86\u540e\u7eed\u5305\uff08\u6b63\u5e38\u901a\u4fe1\u6216\u5df2\u7ed3\u675f\uff09</p> <p>\u4f46\u662f\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u8fd8\u662f\u4e00\u4e2a\u5355\u7ebf\u7a0b\u7a0b\u5e8f\uff0c\u5e76\u6ca1\u6709\u53d1\u6325\u96c6\u7fa4\u7684\u591a\u6838\u4f18\u52bf</p> <p>\u4e8e\u662f\u6211\u4eec\u53c8\u505a\u4e86\u4ee5\u4e0b\u4f18\u5316</p> <ul> <li> <p>\u4ee3\u7801\u4e0d\u518d\u9010\u884c\u8bfb\u53d6\u6587\u4ef6\uff0c\u800c\u662f\u5c06\u6574\u4e2a\u6587\u4ef6\u5185\u5bb9\uff08\u901a\u8fc7 mmap \u6620\u5c04\u5230\u5185\u5b58\uff09\u5206\u5272\u6210\u591a\u4e2a\u5757\uff08chunks\uff09\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u5904\u7406\u4e00\u4e2a\u72ec\u7acb\u7684\u5757</p> </li> <li> <p>\u6bcf\u4e2a\u7ebf\u7a0b\u62e5\u6709\u81ea\u5df1\u7684\u54c8\u5e0c\u8868 (thread_syn_flows, thread_dnstunnel) \u6765\u5b58\u50a8\u4e2d\u95f4\u7ed3\u679c\uff0c\u907f\u514d\u4e86\u7ebf\u7a0b\u95f4\u56e0\u4e89\u62a2\u9501\u800c\u9020\u6210\u7684\u6027\u80fd\u74f6\u9888\uff0c\u76f4\u5230\u6240\u6709\u7ebf\u7a0b\u5904\u7406\u5b8c\u6bd5\u540e\u624d\u8fdb\u884c\u4e00\u6b21\u6027\u7684\u7ed3\u679c\u5408\u5e76\u5e76\u6392\u5e8f\u7ed3\u679c</p> </li> </ul> <p>\u901a\u8fc7\u8fd9\u4e9b\u4f18\u5316\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u4ece\u9700\u8981 <code>86.318s</code> \u52a0\u901f\u5230\u4e86\u53ea\u9700\u9700\u8981 <code>9.473s</code>\uff0c\u52a0\u901f\u7ea6 9.1 \u500d</p> traffic-detector Ver2.0 <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;omp.h&gt;  // \u6dfb\u52a0OpenMP\u5934\u6587\u4ef6\n\n#include \"absl/hash/hash.h\"\n#include \"absl/container/flat_hash_map.h\"\n#include \"absl/strings/str_format.h\"\n\n// \u6bd4\u8f83\u4e24\u4e2a0-255\u6574\u6570\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff08\u5b57\u5178\u5e8f\uff09\ninline int compare_num_str(int x, int y) {\n    if (x &lt; 10) {\n        if (y &lt; 10) {\n            return x - y;\n        } else if (y &lt; 100) {\n            int cmp = x - (y / 10);\n            if (cmp != 0) return cmp;\n            return -1;\n        } else {\n            int cmp = x - (y / 100);\n            if (cmp != 0) return cmp;\n            return -1;\n        }\n    } else if (x &lt; 100) {\n        if (y &lt; 10) {\n            int cmp = (x / 10) - y;\n            if (cmp != 0) return cmp;\n            return 1;\n        } else if (y &lt; 100) {\n            int cmp = (x / 10) - (y / 10);\n            if (cmp != 0) return cmp;\n            return (x % 10) - (y % 10);\n        } else {\n            int cmp = (x / 10) - (y / 100);\n            if (cmp != 0) return cmp;\n            cmp = (x % 10) - (y / 10 % 10);\n            if (cmp != 0) return cmp;\n            return -1;\n        }\n    } else {\n        if (y &lt; 10) {\n            int cmp = (x / 100) - y;\n            if (cmp != 0) return cmp;\n            return 1;\n        } else if (y &lt; 100) {\n            int cmp = (x / 100) - (y / 10);\n            if (cmp != 0) return cmp;\n            cmp = (x / 10 % 10) - (y % 10);\n            if (cmp != 0) return cmp;\n            return 1;\n        } else {\n            int cmp = (x / 100) - (y / 100);\n            if (cmp != 0) return cmp;\n            cmp = (x / 10 % 10) - (y / 10 % 10);\n            if (cmp != 0) return cmp;\n            return (x % 10) - (y % 10);\n        }\n    }\n}\n\n// \u6bd4\u8f83\u4e24\u4e2aIP\u7684\u5b57\u5178\u5e8f\uff08\u8003\u8651\u70b9\u53f7\uff09\ninline bool ip_str_less(uint32_t ip1, uint32_t ip2) {\n    int a1 = (ip1 &gt;&gt; 24) &amp; 0xFF;\n    int b1 = (ip1 &gt;&gt; 16) &amp; 0xFF;\n    int c1 = (ip1 &gt;&gt; 8) &amp; 0xFF;\n    int d1 = ip1 &amp; 0xFF;\n\n    int a2 = (ip2 &gt;&gt; 24) &amp; 0xFF;\n    int b2 = (ip2 &gt;&gt; 16) &amp; 0xFF;\n    int c2 = (ip2 &gt;&gt; 8) &amp; 0xFF;\n    int d2 = ip2 &amp; 0xFF;\n\n    int cmp = compare_num_str(a1, a2);\n    if (cmp &lt; 0) return true;\n    if (cmp &gt; 0) return false;\n\n    cmp = compare_num_str(b1, b2);\n    if (cmp &lt; 0) return true;\n    if (cmp &gt; 0) return false;\n\n    cmp = compare_num_str(c1, c2);\n    if (cmp &lt; 0) return true;\n    if (cmp &gt; 0) return false;\n\n    cmp = compare_num_str(d1, d2);\n    return cmp &lt; 0;\n}\n\n// \u4e94\u5143\u7ec4\u7ed3\u6784\uff08\u53ea\u5173\u5fc3 TCP \u4e94\u5143\u7ec4\uff09\nstruct FiveTuple {\n    uint32_t src_ip, dst_ip;\n    int16_t src_port, dst_port;\n\n    bool operator==(const FiveTuple&amp; o) const {\n        return src_ip == o.src_ip &amp;&amp; dst_ip == o.dst_ip &amp;&amp;\n               src_port == o.src_port &amp;&amp; dst_port == o.dst_port;\n    }\n};\n\n// \u54c8\u5e0c\u51fd\u6570\ntemplate &lt;typename H&gt;\nH AbslHashValue(H h, const FiveTuple&amp; t) {\n    return H::combine(std::move(h), t.src_ip, t.dst_ip, t.src_port, t.dst_port);\n}\n\n// \u624b\u52a8\u89e3\u6790\u6574\u6570\ninline int parse_int(const char*&amp; p) {\n    int res = 0;\n    while (*p &gt;= '0' &amp;&amp; *p &lt;= '9') {\n        res = res * 10 + (*p - '0');\n        ++p;\n    }\n    return res;\n}\n\n// \u8df3\u8fc7\u7a7a\u683c\ninline void skip_ws(const char*&amp; p) {\n    while (*p == ' ') ++p;\n}\n\n// \u89e3\u6790 IPv4 \u5730\u5740\u4e3a uint32_t\nuint32_t parse_ipv4(const char* start, const char* end) {\n    uint32_t a = 0, b = 0, c = 0, d = 0;\n    const char* p = start;\n    while (p &lt; end &amp;&amp; *p != '.') a = a * 10 + (*p++ - '0'); if (p &lt; end) ++p;\n    while (p &lt; end &amp;&amp; *p != '.') b = b * 10 + (*p++ - '0'); if (p &lt; end) ++p;\n    while (p &lt; end &amp;&amp; *p != '.') c = c * 10 + (*p++ - '0'); if (p &lt; end) ++p;\n    while (p &lt; end)              d = d * 10 + (*p++ - '0');\n    return (a &lt;&lt; 24) | (b &lt;&lt; 16) | (c &lt;&lt; 8) | d;\n}\n\n// \u5c06 uint32_t IP \u8f6c\u4e3a\u5b57\u7b26\u4e32\uff08\u8f93\u51fa\u7528\uff09\nstd::string ipv4_to_string(uint32_t ip) {\n    return absl::StrFormat(\"%d.%d.%d.%d\",\n        (ip &gt;&gt; 24) &amp; 0xFF,\n        (ip &gt;&gt; 16) &amp; 0xFF,\n        (ip &gt;&gt; 8) &amp; 0xFF,\n        ip &amp; 0xFF);\n}\n\nint main() {\n    // I/O: Assume stdin is a regular file and use mmap\n    struct stat st;\n    if (fstat(fileno(stdin), &amp;st) != 0 || !S_ISREG(st.st_mode)) {\n        std::cerr &lt;&lt; \"\u8f93\u5165\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u89c4\u6587\u4ef6\u3002\\n\";\n        return 1;\n    }\n\n    size_t file_size = st.st_size;\n    if (file_size == 0) {\n        return 0; // Empty file, nothing to do\n    }\n\n    // mmap the file\n    int fd = fileno(stdin);\n    posix_fadvise(fd, 0, 0, POSIX_FADV_SEQUENTIAL);\n    void* mapped = mmap(nullptr, file_size, PROT_READ, MAP_PRIVATE, fd, 0);\n    if (mapped == MAP_FAILED) {\n        perror(\"mmap failed\");\n        return 1;\n    }\n    const char* data = static_cast&lt;const char*&gt;(mapped);\n\n    // \u8ba1\u7b97\u7ebf\u7a0b\u6570\uff08\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u6216\u9ed8\u8ba48\u7ebf\u7a0b\uff09\n    int num_threads = omp_get_max_threads();\n    if (num_threads &gt; 16) num_threads = 16;  // \u9650\u5236\u6700\u5927\u7ebf\u7a0b\u6570\n\n    // \u8ba1\u7b97\u5206\u5757\u8fb9\u754c\uff08\u6309\u884c\u5bf9\u9f50\uff09\n    std::vector&lt;std::pair&lt;size_t, size_t&gt;&gt; chunks;\n    size_t chunk_size = (file_size + num_threads - 1) / num_threads;\n    size_t start = 0;\n\n    for (int i = 0; i &lt; num_threads; ++i) {\n        size_t end = start + chunk_size;\n        if (end &gt; file_size) end = file_size;\n\n        // \u8c03\u6574\u5757\u7ed3\u675f\u4f4d\u7f6e\u5230\u884c\u5c3e\n        size_t pos = end;\n        while (pos &lt; file_size &amp;&amp; data[pos] != '\\n' &amp;&amp; data[pos] != '\\r') {\n            ++pos;\n        }\n        if (pos &lt; file_size) {\n            ++pos;  // \u5305\u542b\u6362\u884c\u7b26\n        }\n        end = pos;\n\n        // \u8c03\u6574\u5757\u8d77\u59cb\u4f4d\u7f6e\uff08\u5982\u679c\u975e\u9996\u5757\uff09\n        if (start &gt; 0) {\n            size_t pos = start;\n            while (pos &gt; 0 &amp;&amp; data[pos-1] != '\\n' &amp;&amp; data[pos-1] != '\\r') {\n                --pos;\n            }\n            start = pos;\n        }\n\n        // \u6709\u6548\u5757\u624d\u6dfb\u52a0\n        if (start &lt; end &amp;&amp; start &lt; file_size) {\n            chunks.push_back({start, end});\n        }\n\n        // \u4e0b\u4e00\u4e2a\u5757\u8d77\u59cb\n        start = end;\n        if (start &gt;= file_size) break;\n    }\n\n    // \u521b\u5efa\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\n    std::vector&lt;absl::flat_hash_map&lt;FiveTuple, int&gt;&gt; thread_syn_flows(chunks.size());\n    std::vector&lt;absl::flat_hash_map&lt;uint32_t, int&gt;&gt; thread_dnstunnel(chunks.size());\n\n    // \u591a\u7ebf\u7a0b\u5904\u7406\u6bcf\u4e2a\u5757\n    #pragma omp parallel for schedule(static)\n    for (int i = 0; i &lt; chunks.size(); ++i) {\n        size_t chunk_start = chunks[i].first;\n        size_t chunk_end = chunks[i].second;\n\n        // \u9884\u5206\u914d\u54c8\u5e0c\u8868\uff08\u6839\u636e\u5757\u5927\u5c0f\u4f30\u7b97\uff09\n        size_t expected_flows = (chunk_end - chunk_start) / 100;\n        thread_syn_flows[i].reserve(expected_flows);\n        thread_dnstunnel[i].reserve(expected_flows / 10);\n\n        const char* p = data + chunk_start;\n        const char* end_ptr = data + chunk_end;\n\n        while (p &lt; end_ptr) {\n            // \u8df3\u8fc7\u7a7a\u884c\n            while (p &lt; end_ptr &amp;&amp; (*p == '\\r' || *p == '\\n')) ++p;\n            if (p &gt;= end_ptr) break;\n\n            const char* line_start = p;\n\n            // \u8df3\u8fc7\u65f6\u95f4\u6233\uff08\u5230\u7b2c\u4e00\u4e2a\u7a7a\u683c\uff09\n            while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n            if (p &gt;= end_ptr) break;\n            skip_ws(p);\n\n            // \u89e3\u6790\u534f\u8bae\n            const char* prot_start = p;\n            while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n            if (p == prot_start) continue; // \u7a7a\u884c\n            int prot_len = p - prot_start;\n            skip_ws(p);\n\n            if (prot_len == 3 &amp;&amp; memcmp(prot_start, \"TCP\", 3) == 0) {\n                // \u89e3\u6790 src_ip\n                const char* src_ip_start = p;\n                while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n                uint32_t src_ip = parse_ipv4(src_ip_start, p);\n                skip_ws(p);\n\n                // dst_ip\n                const char* dst_ip_start = p;\n                while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n                uint32_t dst_ip = parse_ipv4(dst_ip_start, p);\n                skip_ws(p);\n\n                // src_port\n                int src_port = parse_int(p);\n                skip_ws(p);\n\n                // dst_port\n                int dst_port = parse_int(p);\n                skip_ws(p);\n\n                // flags\n                const char* flag_start = p;\n                while (p &lt; end_ptr &amp;&amp; *p != ' ' &amp;&amp; *p != '\\r' &amp;&amp; *p != '\\n') ++p;\n                bool is_syn = (p - flag_start == 3 &amp;&amp; memcmp(flag_start, \"SYN\", 3) == 0);\n\n                // \u6784\u9020 key\n                FiveTuple key{src_ip, dst_ip, static_cast&lt;int16_t&gt;(src_port), static_cast&lt;int16_t&gt;(dst_port)};\n\n                // \u4fee\u6b63\u540e\u7684TCP\u6d41\u7edf\u8ba1\u903b\u8f91\n                if (is_syn) {\n                    // \u4ec5\u5f53\u6d41\u4e0d\u5b58\u5728\u65f6\u63d2\u51651\uff0c\u5df2\u5b58\u5728\u5219\u5ffd\u7565\n                    thread_syn_flows[i].try_emplace(key, 1);\n                } else {\n                    // \u975eSYN\u5305\uff1a\u76f4\u63a5\u8bbe\u7f6e\u4e3a-1\uff08\u8986\u76d6\u4efb\u4f55\u73b0\u6709\u503c\uff09\n                    thread_syn_flows[i][key] = -1;\n                }\n\n                // \u8df3\u5230\u884c\u5c3e\n                while (p &lt; end_ptr &amp;&amp; *p != '\\n') ++p;\n                if (p &lt; end_ptr) ++p;\n\n            } else if (prot_len == 3 &amp;&amp; memcmp(prot_start, \"DNS\", 3) == 0) {\n                // \u89e3\u6790 src_ip\n                const char* src_ip_start = p;\n                while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n                uint32_t src_ip = parse_ipv4(src_ip_start, p);\n                skip_ws(p);\n\n                // \u8df3\u8fc7 dst_ip\n                while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n                skip_ws(p);\n\n                // \u8df3\u8fc7 src_port, dst_port, domain_length\n                for (int i = 0; i &lt; 3; ++i) {\n                    while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n                    skip_ws(p);\n                }\n\n                // \u89e3\u6790\u57df\u540d\n                const char* domain_start = p;\n                while (p &lt; end_ptr &amp;&amp; *p != '\\r' &amp;&amp; *p != '\\n' &amp;&amp; *p != ' ') ++p;\n                int domain_len = p - domain_start;\n\n                // \u8ba1\u7b97\u524d\u7f00\u957f\u5ea6\uff08\u7b2c\u4e00\u4e2a '.' \u524d\uff09\n                const char* dot = domain_start;\n                while (dot &lt; p &amp;&amp; *dot != '.') ++dot;\n                int prefix_len = dot - domain_start;\n\n                if (prefix_len &gt;= 30) {\n                    thread_dnstunnel[i][src_ip] += prefix_len;\n                }\n\n                // \u8df3\u5230\u4e0b\u4e00\u884c\n                while (p &lt; end_ptr &amp;&amp; *p != '\\n') ++p;\n                if (p &lt; end_ptr) ++p;\n            } else {\n                // \u8df3\u5230\u884c\u5c3e\n                while (p &lt; end_ptr &amp;&amp; *p != '\\n') ++p;\n                if (p &lt; end_ptr) ++p;\n            }\n        }\n    }\n\n    // \u89e3\u9664 mmap\n    munmap(const_cast&lt;char*&gt;(data), file_size);\n    close(fd);\n\n    // \u5408\u5e76\u7ebf\u7a0b\u7ed3\u679c\n    absl::flat_hash_map&lt;FiveTuple, int&gt; global_syn_flows;\n    absl::flat_hash_map&lt;uint32_t, int&gt; global_dnstunnel;\n\n    // \u5408\u5e76SYN\u6d41\uff1a\u53ea\u8981\u4efb\u4e00\u7ebf\u7a0b\u6807\u8bb0\u4e3a-1\uff0c\u5168\u5c40\u5373\u4e3a-1\n    for (int i = 0; i &lt; chunks.size(); ++i) {\n        for (const auto&amp; [flow, value] : thread_syn_flows[i]) {\n            auto it = global_syn_flows.find(flow);\n            if (it == global_syn_flows.end()) {\n                global_syn_flows[flow] = value;\n            } else {\n                // \u4f18\u5148\u4fdd\u7559-1\uff08\u6709\u540e\u7eed\u5305\uff09\n                if (value == -1) {\n                    it-&gt;second = -1;\n                }\n            }\n        }\n    }\n\n    // \u5408\u5e76DNS\u96a7\u9053\n    for (int i = 0; i &lt; chunks.size(); ++i) {\n        for (const auto&amp; [ip, count] : thread_dnstunnel[i]) {\n            global_dnstunnel[ip] += count;\n        }\n    }\n\n    // \u6536\u96c6 portscan \u7ed3\u679c\uff08\u53ea\u53d6\u503c\u4e3a1\u7684\u6d41\uff09\n    std::vector&lt;std::pair&lt;uint32_t, int&gt;&gt; portscan_raw;\n    for (const auto&amp; [flow, value] : global_syn_flows) {\n        if (value == 1) {\n            portscan_raw.emplace_back(flow.src_ip, 1);\n        }\n    }\n\n    // \u6309IP\u5b57\u5178\u5e8f\u6392\u5e8f\uff08\u8003\u8651\u70b9\u53f7\uff09\n    std::sort(portscan_raw.begin(), portscan_raw.end(), \n        [](const auto&amp; a, const auto&amp; b) {\n            return ip_str_less(a.first, b.first);\n        });\n\n    // \u5408\u5e76\u76f8\u540c IP \u7684 portscan\n    std::vector&lt;std::pair&lt;uint32_t, int&gt;&gt; final_portscan;\n    for (const auto&amp; item : portscan_raw) {\n        if (!final_portscan.empty() &amp;&amp; final_portscan.back().first == item.first) {\n            final_portscan.back().second += item.second;\n        } else {\n            final_portscan.push_back(item);\n        }\n    }\n\n    // \u6536\u96c6 tunnelling \u5e76\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\n    std::vector&lt;std::pair&lt;uint32_t, int&gt;&gt; tunnelling_raw(global_dnstunnel.begin(), global_dnstunnel.end());\n    std::sort(tunnelling_raw.begin(), tunnelling_raw.end(), \n        [](const auto&amp; a, const auto&amp; b) {\n            return ip_str_less(a.first, b.first);\n        });\n\n    // \u8f93\u51fa\u7ed3\u679c\n    for (const auto&amp; p : final_portscan) {\n        std::cout &lt;&lt; ipv4_to_string(p.first) &lt;&lt; \" portscan \" &lt;&lt; p.second &lt;&lt; '\\n';\n    }\n    for (const auto&amp; p : tunnelling_raw) {\n        std::cout &lt;&lt; ipv4_to_string(p.first) &lt;&lt; \" tunnelling \" &lt;&lt; p.second &lt;&lt; '\\n';\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"2025/08/22/zxhpc-2025-writeup/#traffic-detector-ver30","title":"traffic-detector Ver3.0","text":"\u6d41\u79bb\u6d41\u79bb\uff0c\u4f60\u8fd9\u4e2a ip_str_less \u867d\u7136\u597d\uff0c\u4f46\u662f\u4e0d\u662f\u5206\u652f\u6709\u70b9\u592a\u591a\u4e86\uff1f                                           \u786e\u5b9e\u786e\u5b9e\uff0c\u8fd9\u4e48\u591a\u5206\u652f\u5bf9 CPU \u7684 `\u5206\u652f\u9884\u6d4b` \u592a\u4e0d\u53cb\u597d\u4e86\uff0c\u4f46\u662f\u6ca1\u5173\u7cfb\uff0cLUT \u4f1a\u51fa\u624b\u261d\ufe0f\ud83e\udd13                      <p>\u5728\u539f\u6765\u7684 <code>ip_str_less</code> \u51fd\u6570\u4e2d\uff0c\u6bcf\u6bd4\u8f83\u4e00\u4e2a ip \u81f3\u5c11\u9700\u8981 8 \u4e2a\u5206\u652f\uff0c\u8fd9\u592a\u6162\u4e86</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165\u7f16\u8bd1\u671f\u751f\u6210\u67e5\u627e\u8868 (Look-Up Table, LUT)\uff1a \u901a\u8fc7 constexpr \u51fd\u6570 generate_lex_lut \u5728\u7f16\u8bd1\u65f6\u5c31\u751f\u6210\u4e00\u4e2a\u5168\u5c40\u6570\u7ec4 g_lex_lut\uff0c \u5c060-255\u7684\u6570\u5b57\u6620\u5c04\u5230\u5b83\u4eec\u7684\u5b57\u5178\u5e8f\u6392\u540d\u3002\u4f8b\u5982\uff0cg_lex_lut[10] \u7684\u503c\u4f1a\u5927\u4e8e g_lex_lut[2]\u3002\u8fd9\u6837\uff0c\u539f\u672c\u590d\u6742\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u5c31\u53d8\u6210\u4e86 O(1) \u7684\u6570\u7ec4\u67e5\u8be2</p> ip_str_less <pre><code>constexpr int compare_num_str(int x, int y) {\n    if (x &lt; 10) {\n        if (y &lt; 10) {\n            return x - y;\n        } else if (y &lt; 100) {\n            int cmp = x - (y / 10);\n            if (cmp != 0) return cmp;\n            return -1;\n        } else {\n            int cmp = x - (y / 100);\n            if (cmp != 0) return cmp;\n            return -1;\n        }\n    } else if (x &lt; 100) {\n        if (y &lt; 10) {\n            int cmp = (x / 10) - y;\n            if (cmp != 0) return cmp;\n            return 1;\n        } else if (y &lt; 100) {\n            int cmp = (x / 10) - (y / 10);\n            if (cmp != 0) return cmp;\n            return (x % 10) - (y % 10);\n        } else {\n            int cmp = (x / 10) - (y / 100);\n            if (cmp != 0) return cmp;\n            cmp = (x % 10) - (y / 10 % 10);\n            if (cmp != 0) return cmp;\n            return -1;\n        }\n    } else {\n        if (y &lt; 10) {\n            int cmp = (x / 100) - y;\n            if (cmp != 0) return cmp;\n            return 1;\n        } else if (y &lt; 100) {\n            int cmp = (x / 100) - (y / 10);\n            if (cmp != 0) return cmp;\n            cmp = (x / 10 % 10) - (y % 10);\n            if (cmp != 0) return cmp;\n            return 1;\n        } else {\n            int cmp = (x / 100) - (y / 100);\n            if (cmp != 0) return cmp;\n            cmp = (x / 10 % 10) - (y / 10 % 10);\n            if (cmp != 0) return cmp;\n            return (x % 10) - (y % 10);\n        }\n    }\n}\n\ntemplate&lt;typename T&gt;\nconstexpr void constexpr_swap(T&amp; a, T&amp; b) {\n    T temp = a;\n    a = b;\n    b = temp;\n}\n\nconstexpr auto generate_lex_lut() {\n    std::array&lt;int, 256&gt; nums{};\n    std::array&lt;int, 256&gt; lut{};\n    for (int i = 0; i &lt; 256; ++i) nums[i] = i;\n    for (int i = 0; i &lt; 256; ++i) {\n        int min_idx = i;\n        for (int j = i + 1; j &lt; 256; ++j) {\n            if (compare_num_str(nums[j], nums[min_idx]) &lt; 0) min_idx = j;\n        }\n        if (min_idx != i) constexpr_swap(nums[i], nums[min_idx]);\n    }\n    for (int rank = 0; rank &lt; 256; ++rank) lut[nums[rank]] = rank;\n    return lut;\n}\nconstexpr auto g_lex_lut = generate_lex_lut();\n\ninline bool ip_str_less(uint32_t ip1, uint32_t ip2) {\n    int a1 = (ip1 &gt;&gt; 24) &amp; 0xFF, b1 = (ip1 &gt;&gt; 16) &amp; 0xFF, c1 = (ip1 &gt;&gt; 8) &amp; 0xFF, d1 = ip1 &amp; 0xFF;\n    int a2 = (ip2 &gt;&gt; 24) &amp; 0xFF, b2 = (ip2 &gt;&gt; 16) &amp; 0xFF, c2 = (ip2 &gt;&gt; 8) &amp; 0xFF, d2 = ip2 &amp; 0xFF;\n    if (g_lex_lut[a1] != g_lex_lut[a2]) return g_lex_lut[a1] &lt; g_lex_lut[a2];\n    if (g_lex_lut[b1] != g_lex_lut[b2]) return g_lex_lut[b1] &lt; g_lex_lut[b2];\n    if (g_lex_lut[c1] != g_lex_lut[c2]) return g_lex_lut[c1] &lt; g_lex_lut[c2];\n    return g_lex_lut[d1] &lt; g_lex_lut[d2];\n}\n</code></pre> <p>\u6211\u4eec\u540c\u65f6\u4e5f\u53ef\u4ee5\u66ff\u6362\u6389\u539f\u6765\u7684 <code>std::sort</code>\uff0c\u4f7f\u7528 \u201c\u6392\u5e8f\u952e\u201d\uff0c\u8fd9\u4e2a\u952e\u7684\u6784\u9020\u65b9\u5f0f\u4fdd\u8bc1\u4e86\u952e\u7684\u6570\u503c\u5927\u5c0f\u987a\u5e8f\u662f\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u5b57\u5178\u5e8f</p> <p>\u505a\u5b8c\u8fd9\u4e2a\u4f18\u5316\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u4e3b\u8981\u74f6\u9888\u662f\u5e76\u884c\u90e8\u5206\u7ed3\u675f\u540e\u7684\u5408\u5e76\u9636\u6bb5\uff0c\u8fd9\u4e2a\u5408\u5e76\u9636\u6bb5\u53ea\u80fd\u4e32\u884c\u5904\u7406</p> <p>\u56e0\u6b64\u6211\u4eec\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u4f18\u5316\u4e3a\u589e\u91cf\u5f0f\u5e76\u884c\u5408\u5e76</p> <ul> <li> <p>\u521b\u5efa\u4e86\u56fa\u5b9a\u6570\u91cf\u7684\u5168\u5c40\u201c\u5206\u7247\u201d\uff08global_syn_shards, global_dns_shards\uff09\uff0c\u4f8b\u59821024\u4e2a\u3002\u6bcf\u4e2a\u5206\u7247\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684 hash_map\uff0c\u5e76\u914d\u6709\u4e00\u4e2a\u72ec\u7acb\u7684 mutex \u9501</p> </li> <li> <p>\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u5185\u90e8\uff0c\u4f7f\u7528 thread_local \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e0e\u5168\u5c40\u5206\u7247\u540c\u6837\u7ed3\u6784\u7684\u672c\u5730\u5206\u7247\u3002\u5728\u6838\u5fc3\u7684\u65e5\u5fd7\u89e3\u6790\u9636\u6bb5\uff0c\u6240\u6709\u64cd\u4f5c\u90fd\u5728\u7ebf\u7a0b\u5c40\u90e8\u7f13\u5b58\u4e0a\u8fdb\u884c\uff0c\u5b8c\u5168\u65e0\u9501</p> </li> <li> <p>\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\u5b8c\u81ea\u5df1\u7684\u6570\u636e\u5757\u540e\uff0c\u5b83\u4f1a\u904d\u5386\u81ea\u5df1\u7684\u672c\u5730\u5206\u7247\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u672c\u5730\u5206\u7247\uff0c\u5b83\u4f1a\u83b7\u53d6\u5bf9\u5e94\u5168\u5c40\u5206\u7247\u7684\u9501\uff0c\u7136\u540e\u5c06\u6570\u636e\u5408\u5e76\u8fdb\u53bb\u3002\u56e0\u4e3a\u67091024\u4e2a\u5206\u7247\u548c\u9501\uff0c\u4e0d\u540c\u7ebf\u7a0b\u540c\u65f6\u9700\u8981\u9501\u5b9a\u540c\u4e00\u4e2a\u5206\u7247\u7684\u6982\u7387\u5927\u5927\u964d\u4f4e\uff0c\u9501\u7ade\u4e89\u88ab\u964d\u5230\u4e86\u6700\u4f4e</p> </li> <li> <p>\u4f7f\u7528 #pragma omp parallel for \u6765\u5e76\u884c\u5904\u7406\u5168\u5c40\u5206\u7247\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u4e00\u90e8\u5206\u5206\u7247\u7684\u7edf\u8ba1\u5de5\u4f5c\uff0c\u5c06\u7ed3\u679c\u5b58\u5165\u7ebf\u7a0b\u81ea\u5df1\u7684\u5c40\u90e8 hash_map\u3002\u6700\u540e\uff0c\u901a\u8fc7 #pragma omp critical \u4e34\u754c\u533a\u5c06\u5404\u4e2a\u7ebf\u7a0b\u7684\u5c40\u90e8\u7edf\u8ba1\u7ed3\u679c\u5b89\u5168\u5730\u5408\u5e76\u5230\u6700\u7ec8\u7684\u603b\u8868\u4e2d</p> </li> </ul> <p>\u901a\u8fc7\u8fd9\u4e9b\u4f18\u5316\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u4ece\u9700\u8981 <code>9.473</code> \u52a0\u901f\u5230\u4e86\u53ea\u9700\u9700\u8981 <code>1.721s</code>\uff0c\u52a0\u901f\u7ea6 5.5 \u500d</p> <p>\u603b\u7ed3\u4e0b\u6765\uff0c\u6211\u4eec\u6240\u505a\u7684\u4e09\u9636\u6bb5\u4f18\u5316\uff0c\u5c06\u7a0b\u5e8f\u4ece\u9700\u8981 <code>233.565s</code> \u52a0\u901f\u5230\u4e86\u53ea\u9700\u8981 <code>1.721s</code>\uff0c\u603b\u5171\u52a0\u901f\u7ea6 135.7 \u500d\uff0c\u53ef\u559c\u53ef\u8d3a\u53ef\u559c\u53ef\u8d3a</p> \u6700\u7ec8\u4f18\u5316\u4ee3\u7801 (196.6pts) <pre><code>// mmap_minimal_change.cpp\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;omp.h&gt;\n#include &lt;cstdint&gt;\n#include &lt;mutex&gt;\n#include &lt;array&gt;\n#include \"absl/container/flat_hash_map.h\"\n#include \"absl/strings/str_format.h\"\n\nconstexpr int compare_num_str(int x, int y) {\n    if (x &lt; 10) {\n        if (y &lt; 10) {\n            return x - y;\n        } else if (y &lt; 100) {\n            int cmp = x - (y / 10);\n            if (cmp != 0) return cmp;\n            return -1;\n        } else {\n            int cmp = x - (y / 100);\n            if (cmp != 0) return cmp;\n            return -1;\n        }\n    } else if (x &lt; 100) {\n        if (y &lt; 10) {\n            int cmp = (x / 10) - y;\n            if (cmp != 0) return cmp;\n            return 1;\n        } else if (y &lt; 100) {\n            int cmp = (x / 10) - (y / 10);\n            if (cmp != 0) return cmp;\n            return (x % 10) - (y % 10);\n        } else {\n            int cmp = (x / 10) - (y / 100);\n            if (cmp != 0) return cmp;\n            cmp = (x % 10) - (y / 10 % 10);\n            if (cmp != 0) return cmp;\n            return -1;\n        }\n    } else {\n        if (y &lt; 10) {\n            int cmp = (x / 100) - y;\n            if (cmp != 0) return cmp;\n            return 1;\n        } else if (y &lt; 100) {\n            int cmp = (x / 100) - (y / 10);\n            if (cmp != 0) return cmp;\n            cmp = (x / 10 % 10) - (y % 10);\n            if (cmp != 0) return cmp;\n            return 1;\n        } else {\n            int cmp = (x / 100) - (y / 100);\n            if (cmp != 0) return cmp;\n            cmp = (x / 10 % 10) - (y / 10 % 10);\n            if (cmp != 0) return cmp;\n            return (x % 10) - (y % 10);\n        }\n    }\n}\n\ntemplate&lt;typename T&gt;\nconstexpr void constexpr_swap(T&amp; a, T&amp; b) {\n    T temp = a;\n    a = b;\n    b = temp;\n}\n\nconstexpr auto generate_lex_lut() {\n    std::array&lt;int, 256&gt; nums{};\n    std::array&lt;int, 256&gt; lut{};\n    for (int i = 0; i &lt; 256; ++i) nums[i] = i;\n    for (int i = 0; i &lt; 256; ++i) {\n        int min_idx = i;\n        for (int j = i + 1; j &lt; 256; ++j) {\n            if (compare_num_str(nums[j], nums[min_idx]) &lt; 0) min_idx = j;\n        }\n        if (min_idx != i) constexpr_swap(nums[i], nums[min_idx]);\n    }\n    for (int rank = 0; rank &lt; 256; ++rank) lut[nums[rank]] = rank;\n    return lut;\n}\nconstexpr auto g_lex_lut = generate_lex_lut();\n\ninline bool ip_str_less(uint32_t ip1, uint32_t ip2) {\n    int a1 = (ip1 &gt;&gt; 24) &amp; 0xFF, b1 = (ip1 &gt;&gt; 16) &amp; 0xFF, c1 = (ip1 &gt;&gt; 8) &amp; 0xFF, d1 = ip1 &amp; 0xFF;\n    int a2 = (ip2 &gt;&gt; 24) &amp; 0xFF, b2 = (ip2 &gt;&gt; 16) &amp; 0xFF, c2 = (ip2 &gt;&gt; 8) &amp; 0xFF, d2 = ip2 &amp; 0xFF;\n    if (g_lex_lut[a1] != g_lex_lut[a2]) return g_lex_lut[a1] &lt; g_lex_lut[a2];\n    if (g_lex_lut[b1] != g_lex_lut[b2]) return g_lex_lut[b1] &lt; g_lex_lut[b2];\n    if (g_lex_lut[c1] != g_lex_lut[c2]) return g_lex_lut[c1] &lt; g_lex_lut[c2];\n    return g_lex_lut[d1] &lt; g_lex_lut[d2];\n}\n\ninline uint32_t make_sort_key(uint32_t ip) {\n    uint8_t a = (ip &gt;&gt; 24) &amp; 0xFF;\n    uint8_t b = (ip &gt;&gt; 16) &amp; 0xFF;\n    uint8_t c = (ip &gt;&gt;  8) &amp; 0xFF;\n    uint8_t d = (ip      ) &amp; 0xFF;\n    return (static_cast&lt;uint32_t&gt;(g_lex_lut[a]) &lt;&lt; 24) |\n           (static_cast&lt;uint32_t&gt;(g_lex_lut[b]) &lt;&lt; 16) |\n           (static_cast&lt;uint32_t&gt;(g_lex_lut[c]) &lt;&lt;  8) |\n           (static_cast&lt;uint32_t&gt;(g_lex_lut[d]));\n}\n\nstruct FiveTuple {\n    uint32_t src_ip, dst_ip;\n    int16_t src_port, dst_port;\n\n    bool operator==(const FiveTuple&amp; o) const {\n        return src_ip == o.src_ip &amp;&amp; dst_ip == o.dst_ip &amp;&amp;\n               src_port == o.src_port &amp;&amp; dst_port == o.dst_port;\n    }\n};\n\nstruct FastFiveTupleHash {\n    ssize_t operator()(const FiveTuple&amp; t) const noexcept {\n        return static_cast&lt;ssize_t&gt;(t.src_ip ^ t.dst_ip ^\n               static_cast&lt;uint32_t&gt;(t.src_port) ^\n               static_cast&lt;uint32_t&gt;(t.dst_port));\n    }\n};\n\nstruct FastIPHash {\n    ssize_t operator()(uint32_t ip) const noexcept {\n        return static_cast&lt;ssize_t&gt;(ip);\n    }\n};\n\ntemplate &lt;typename H&gt;\nH AbslHashValue(H h, const FiveTuple&amp; t) {\n    return H::combine(std::move(h), t.src_ip, t.dst_ip, t.src_port, t.dst_port);\n}\n\ninline int parse_int(const char*&amp; p) {\n    int res = 0;\n    while (*p &gt;= '0' &amp;&amp; *p &lt;= '9') {\n        res = res * 10 + (*p - '0');\n        ++p;\n    }\n    return res;\n}\n\ninline void skip_ws(const char*&amp; p) {\n    while (*p == ' ') ++p;\n}\n\ninline uint32_t parse_ip_inline(const char*&amp; p) {\n    uint32_t a = 0, b = 0, c = 0, d = 0;\n    while (*p &gt;= '0' &amp;&amp; *p &lt;= '9') {\n        a = a * 10 + (*p - '0');\n        p++;\n    }\n    if (*p == '.') p++;\n    while (*p &gt;= '0' &amp;&amp; *p &lt;= '9') {\n        b = b * 10 + (*p - '0');\n        p++;\n    }\n    if (*p == '.') p++;\n    while (*p &gt;= '0' &amp;&amp; *p &lt;= '9') {\n        c = c * 10 + (*p - '0');\n        p++;\n    }\n    if (*p == '.') p++;\n    while (*p &gt;= '0' &amp;&amp; *p &lt;= '9') {\n        d = d * 10 + (*p - '0');\n        p++;\n    }\n    return (a &lt;&lt; 24) | (b &lt;&lt; 16) | (c &lt;&lt; 8) | d;\n}\n\nstd::string ipv4_to_string(uint32_t ip) {\n    return absl::StrFormat(\"%d.%d.%d.%d\",\n        (ip &gt;&gt; 24) &amp; 0xFF,\n        (ip &gt;&gt; 16) &amp; 0xFF,\n        (ip &gt;&gt; 8) &amp; 0xFF,\n        ip &amp; 0xFF);\n}\n\n// ------------------ main ------------------\nint main() {\n    // I/O: Assume stdin is a regular file and use mmap\n    struct stat st;\n    if (fstat(fileno(stdin), &amp;st) != 0 || !S_ISREG(st.st_mode)) {\n        std::cerr &lt;&lt; \"\u8f93\u5165\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u89c4\u6587\u4ef6\u3002\\n\";\n        return 1;\n    }\n\n    size_t file_size = st.st_size;\n    if (file_size == 0) {\n        return 0; // Empty file, nothing to do\n    }\n\n    // mmap the file\n    int fd = fileno(stdin);\n    posix_fadvise(fd, 0, 0, POSIX_FADV_SEQUENTIAL);\n    void* mapped = mmap(nullptr, file_size, PROT_READ, MAP_PRIVATE, fd, 0);\n    if (mapped == MAP_FAILED) {\n        perror(\"mmap failed\");\n        return 1;\n    }\n    const char* data = static_cast&lt;const char*&gt;(mapped);\n\n    // --- Start of processing logic ---\n\n    int num_threads = omp_get_max_threads();\n    if (num_threads &gt; 40) num_threads = 40;\n\n    std::vector&lt;std::pair&lt;size_t, size_t&gt;&gt; chunks;\n    size_t chunk_size_val = (file_size + num_threads - 1) / num_threads;\n    size_t start = 0;\n    for (int i = 0; i &lt; num_threads; ++i) {\n        size_t end = start + chunk_size_val;\n        if (end &gt; file_size) end = file_size;\n\n        // Align end to the next newline to avoid splitting lines\n        size_t pos = end;\n        while (pos &lt; file_size &amp;&amp; data[pos] != '\\n' &amp;&amp; data[pos] != '\\r') ++pos;\n        if (pos &lt; file_size) {\n            ++pos;\n        }\n        end = pos;\n\n        // Align start to the previous newline (for chunks &gt; 0)\n        if (start &gt; 0) {\n            size_t pos2 = start;\n            while (pos2 &gt; 0 &amp;&amp; data[pos2-1] != '\\n' &amp;&amp; data[pos2-1] != '\\r') --pos2;\n            start = pos2;\n        }\n\n        if (start &lt; end &amp;&amp; start &lt; file_size) {\n            chunks.push_back({start, end});\n        }\n\n        start = end;\n        if (start &gt;= file_size) break;\n    }\n\n    const int num_shards = 1024;\n    std::vector&lt;absl::flat_hash_map&lt;FiveTuple, int, FastFiveTupleHash&gt;&gt; global_syn_shards(num_shards);\n    std::vector&lt;absl::flat_hash_map&lt;uint32_t, int, FastIPHash&gt;&gt; global_dns_shards(num_shards);\n    std::vector&lt;std::mutex&gt; syn_mutexes(num_shards);\n    std::vector&lt;std::mutex&gt; dns_mutexes(num_shards);\n\n    #pragma omp parallel for schedule(static)\n    for (int i = 0; i &lt; static_cast&lt;int&gt;(chunks.size()); ++i) {\n        thread_local std::vector&lt;absl::flat_hash_map&lt;FiveTuple, int, FastFiveTupleHash&gt;&gt; tls_syn_shards(num_shards);\n        thread_local std::vector&lt;absl::flat_hash_map&lt;uint32_t, int, FastIPHash&gt;&gt; tls_dns_shards(num_shards);\n\n        size_t chunk_start = chunks[i].first;\n        size_t chunk_end = chunks[i].second;\n\n        const char* p = data + chunk_start;\n        const char* end_ptr = data + chunk_end;\n\n        while (p &lt; end_ptr) {\n            while (p &lt; end_ptr &amp;&amp; (*p == '\\r' || *p == '\\n')) ++p;\n            if (p &gt;= end_ptr) break;\n\n            // Skip timestamp\n            while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n            if (p &gt;= end_ptr) break;\n            skip_ws(p);\n\n            // Parse protocol\n            const char* prot_start = p;\n            while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n            if (p == prot_start) continue;\n            int prot_len = p - prot_start;\n            skip_ws(p);\n\n            if (prot_len == 3 &amp;&amp; memcmp(prot_start, \"TCP\", 3) == 0) {\n                uint32_t src_ip = parse_ip_inline(p);\n                skip_ws(p);\n\n                uint32_t dst_ip = parse_ip_inline(p);\n                skip_ws(p);\n\n                int src_port = parse_int(p);\n                skip_ws(p);\n\n                int dst_port = parse_int(p);\n                skip_ws(p);\n\n                const char* flag_start = p;\n                while (p &lt; end_ptr &amp;&amp; *p != ' ' &amp;&amp; *p != '\\r' &amp;&amp; *p != '\\n') ++p;\n                bool is_syn = (p - flag_start == 3 &amp;&amp; memcmp(flag_start, \"SYN\", 3) == 0);\n\n                FiveTuple key{src_ip, dst_ip, static_cast&lt;int16_t&gt;(src_port), static_cast&lt;int16_t&gt;(dst_port)};\n\n                size_t shard_idx = absl::HashOf(key) % num_shards;\n                if (is_syn) {\n                    tls_syn_shards[shard_idx].try_emplace(key, 1);\n                } else {\n                    tls_syn_shards[shard_idx][key] = -1;\n                }\n\n            } else if (prot_len == 3 &amp;&amp; memcmp(prot_start, \"DNS\", 3) == 0) {\n                uint32_t src_ip = parse_ip_inline(p);\n                skip_ws(p);\n\n                // Skip fields to get to domain name\n                for (int j = 0; j &lt; 4; ++j) {\n                    while (p &lt; end_ptr &amp;&amp; *p != ' ') ++p;\n                    skip_ws(p);\n                }\n\n                const char* domain_start = p;\n                while (p &lt; end_ptr &amp;&amp; *p != '\\r' &amp;&amp; *p != '\\n' &amp;&amp; *p != ' ') ++p;\n\n                const char* dot = domain_start;\n                while (dot &lt; p &amp;&amp; *dot != '.') ++dot;\n                int prefix_len = dot - domain_start;\n\n                if (prefix_len &gt;= 30) {\n                    size_t shard_idx = absl::HashOf(src_ip) % num_shards;\n                    tls_dns_shards[shard_idx][src_ip] += prefix_len;\n                }\n            }\n\n            // Go to the next line\n            while (p &lt; end_ptr &amp;&amp; *p != '\\n') ++p;\n            if (p &lt; end_ptr) ++p;\n        } // end parse loop\n\n        // Merge thread-local shards into global shards\n        for (int shard_idx = 0; shard_idx &lt; num_shards; ++shard_idx) {\n            if (!tls_syn_shards[shard_idx].empty()) {\n                std::lock_guard&lt;std::mutex&gt; lock(syn_mutexes[shard_idx]);\n                for (const auto&amp; [flow, value] : tls_syn_shards[shard_idx]) {\n                    auto it = global_syn_shards[shard_idx].find(flow);\n                    if (it == global_syn_shards[shard_idx].end()) {\n                        global_syn_shards[shard_idx][flow] = value;\n                    } else {\n                        if (value == -1) {\n                            it-&gt;second = -1;\n                        }\n                    }\n                }\n                tls_syn_shards[shard_idx].clear();\n            }\n\n            if (!tls_dns_shards[shard_idx].empty()) {\n                std::lock_guard&lt;std::mutex&gt; lock(dns_mutexes[shard_idx]);\n                for (const auto&amp; [ip, count] : tls_dns_shards[shard_idx]) {\n                    global_dns_shards[shard_idx][ip] += count;\n                }\n                tls_dns_shards[shard_idx].clear();\n            }\n        }\n    } // end parallel for\n\n    // --- Aggregate and output results ---\n    absl::flat_hash_map&lt;uint32_t, int&gt; portscan_merged;\n    absl::flat_hash_map&lt;uint32_t, int&gt; tunnelling_merged;\n\n    #pragma omp parallel for schedule(static)\n    for (int shard_idx = 0; shard_idx &lt; num_shards; ++shard_idx) {\n        absl::flat_hash_map&lt;uint32_t, int&gt; local_portscan;\n        for (const auto&amp; [flow, value] : global_syn_shards[shard_idx]) {\n            if (value == 1) {\n                local_portscan[flow.src_ip]++;\n            }\n        }\n        #pragma omp critical\n        for (const auto&amp; [ip, count] : local_portscan) {\n            portscan_merged[ip] += count;\n        }\n    }\n\n    #pragma omp parallel for schedule(static)\n    for (int shard_idx = 0; shard_idx &lt; num_shards; ++shard_idx) {\n        absl::flat_hash_map&lt;uint32_t, int&gt; local_tunnelling;\n        for (const auto&amp; [ip, count] : global_dns_shards[shard_idx]) {\n            if (count &gt; 0) {\n                local_tunnelling[ip] += count;\n            }\n        }\n        #pragma omp critical\n        for (const auto&amp; [ip, count] : local_tunnelling) {\n            tunnelling_merged[ip] += count;\n        }\n    }\n\n    // Sort and print portscan results\n    std::vector&lt;std::pair&lt;uint32_t, std::pair&lt;uint32_t, int&gt;&gt;&gt; portscan_with_key;\n    portscan_with_key.reserve(portscan_merged.size());\n    for (const auto&amp; [ip, count] : portscan_merged) {\n        uint32_t sort_key = make_sort_key(ip);\n        portscan_with_key.emplace_back(sort_key, std::make_pair(ip, count));\n    }\n    std::sort(portscan_with_key.begin(), portscan_with_key.end());\n\n    // Sort and print tunnelling results\n    std::vector&lt;std::pair&lt;uint32_t, std::pair&lt;uint32_t, int&gt;&gt;&gt; tunnelling_with_key;\n    tunnelling_with_key.reserve(tunnelling_merged.size());\n    for (const auto&amp; [ip, count] : tunnelling_merged) {\n        uint32_t sort_key = make_sort_key(ip);\n        tunnelling_with_key.emplace_back(sort_key, std::make_pair(ip, count));\n    }\n    std::sort(tunnelling_with_key.begin(), tunnelling_with_key.end());\n\n    for (const auto&amp; p : portscan_with_key) {\n        std::cout &lt;&lt; ipv4_to_string(p.second.first) &lt;&lt; \" portscan \" &lt;&lt; p.second.second &lt;&lt; '\\n';\n    }\n    for (const auto&amp; p : tunnelling_with_key) {\n        std::cout &lt;&lt; ipv4_to_string(p.second.first) &lt;&lt; \" tunnelling \" &lt;&lt; p.second.second &lt;&lt; '\\n';\n    }\n\n    // --- Cleanup ---\n    munmap(mapped, file_size);\n\n    return 0;\n}\n</code></pre>"},{"location":"2025/08/22/zxhpc-2025-writeup/#_4","title":"\u540e\u8bb0","text":"<p>\u6211\u5728\u6bd4\u8d5b\u65f6\u5de8\u91cf\u4f7f\u7528\u4e86 LLM\uff0c\u51e0\u4e4e\u6240\u6709\u4ee3\u7801\u90fd\u662f\u6211\u63d0\u4f9b\u601d\u8def\uff0c\u7531 LLM \u5b9e\u9645\u7f16\u5199\u7684\uff0c\u611f\u8c22\u4ee5\u4e0b\u6a21\u578b\u5bf9\u6211\u7684\u9f0e\u529b\u652f\u6301</p> <ul> <li> <p>Qwen3-235B-A22B-Thinking-2507</p> </li> <li> <p>DeepSeek-V3.1</p> </li> <li> <p>Gemini 2.5 pro</p> </li> <li> <p>GPT 5</p> </li> <li> <p>Grok 4</p> </li> <li> <p>Claude Sonnet 4</p> </li> </ul> <ol> <li> <p>kotoha \u3061\u3083\u3093\u771f\u7684\u5f88\u53ef\u7231\u00a0\u21a9</p> </li> </ol>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/","title":"BUPT \u8f6c\u4e13\u4e1a\u5c0f\u8bb0","text":"<p>\u6d41\u79bb\u5728\u6ca1\u548c\u6211\u5546\u91cf\u8fc7\u7684\u60c5\u51b5\u4e0b\u64c5\u81ea\u5c31\u4f5c\u4e86\u8f6c\u4e13\u4e1a\u7684\u51b3\u5b9a\uff0c\u771f\u662f\u592a\u5dee\u52b2\u4e86\u3002</p>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_1","title":"\u8f6c\u4e13\u4e1a\u6d41\u7a0b","text":"<p>Notice</p> <p>\u5b66\u6821\u901a\u5e38\u5728\u5bd2\u5047\uff08\u800c\u4e0d\u662f\u5f00\u5b66\uff09\u53d1\u5e03\u8f6c\u4e13\u4e1a\u901a\u77e5\uff0c\u60f3\u8981\u8f6c\u4e13\u4e1a\u7684\u540c\u5b66\u8981\u6ce8\u610f\u6821\u5185\u901a\u77e5\uff0c\u5c0f\u5fc3\u9519\u8fc7\u4e86</p> <p>\u300a\u5317\u4eac\u90ae\u7535\u5927\u5b66\u672c\u79d1\u751f\u6821\u5185\u8f6c\u4e13\u4e1a\u529e\u6cd5\u300b<sup>1</sup>\u4e2d\u6709\u4ee5\u4e0b\u89c4\u5b9a\uff1a</p> <ul> <li>\u5404\u4e13\u4e1a\u63a5\u6536\u8f6c\u5165\u5b66\u751f\u6570\u4e0d\u5f97\u8d85\u8fc7\u5f53\u5e74\u62db\u751f\u8ba1\u5212\u4eba\u6570\u768415%\uff0c\u4e14\u4eba\u6570\u4e0a\u9650\u4e3a60\u4eba</li> <li>\u83b7\u51c6\u8f6c\u4e13\u4e1a\u7684\u5b66\u751f\uff0c\u7531\u8f6c\u5165\u5b66\u9662\u786e\u5b9a\u7f16\u5165\u540c\u4e00\u5e74\u7ea7\u6216\u4f4e\u4e00\u5e74\u7ea7</li> <li>\u5b66\u751f\u7533\u8bf7\u8f6c\u4e13\u4e1a\uff0c\u987b\u7b26\u5408\u4ee5\u4e0b\u57fa\u672c\u6761\u4ef6: \u672c\u79d1\u4e00\u5e74\u7ea7\u6216\u4e8c\u5e74\u7ea7\u5728\u7c4d</li> </ul> <p>\u672c\u79d1\u751f\u5728\u5927\u4e00\u4e0b\u548c\u5927\u4e8c\u4e0a\u521a\u5f00\u5b66\u5404\u6709\u4e00\u6b21\u8f6c\u4e13\u4e1a\u673a\u4f1a\u3002</p> <p>\u6d41\u79bb\u53c2\u52a0\u7684\u662f\u672c\u79d1\u751f\u6625\u5b63\u8f6c\u4e13\u4e1a\uff0c\u5373\u5927\u4e00\u4e0b\u5f00\u5b66\u8f6c\u4e13\u4e1a\u3002</p> <p>Tip</p> <p>\u8ba1\u7b97\u673a\u5b66\u9662\u8fdb\u5165\u9762\u8bd5\u7684\u4eba\u6570\u6625\u5b63\u8f83\u591a\u800c\u79cb\u5b63\u8f83\u5c11\uff0c\u7b14\u8005\u5c1a\u4e0d\u6e05\u695a\u5176\u4e2d\u7684\u539f\u56e0\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u8be2\u95ee\u5176\u4ed6\u6709\u7ecf\u9a8c\u7684\u5b66\u957f\uff0c\u5e76\u7efc\u5408\u5224\u65ad\u53c2\u52a0\u6625\u5b63or\u79cb\u5b63\u8f6c\u4e13\u4e1a</p> <p>\u5317\u90ae\u8f6c\u4e13\u4e1a\u96be\u5ea6\u8f83\u4f4e\uff0c\u8f6c\u51fa\u4e0d\u53d7\u9650\uff0c\u53ea\u6709\u8f6c\u5165\u8ba1\u7b97\u673a\u5b66\u9662\u548c\u4eba\u5de5\u667a\u80fd\u5b66\u9662\u9700\u8981\u8fdb\u884c\u673a\u8bd5\u3002</p> <p>\u8f6c\u5165\u8ba1\u7b97\u673a\u7c7b\u7684\u8003\u6838\u4e2d\uff0c\u5b66\u751f\u7efc\u5408\u6210\u7ee9\u91c7\u7528\u767e\u5206\u5236\uff0c\u5176\u4e2d50%\u7531\u5b66\u751f\u5df2\u83b7\u5f97\u7684\u52a0\u6743\u6210\u7ee9\u6838\u7b97\uff0c50%\u7531\u673a\u8bd5\u6210\u7ee9\u6838\u7b97\u3002\u7efc\u5408\u6210\u7ee9\u4f18\u79c0\u8005\u53ef\u8fdb\u5165\u9762\u8bd5\u73af\u8282\u3002</p> <p>\u6d41\u79bb\u5728\u4eba\u5de5\u667a\u80fd\u5b66\u9662\u7684\u5747\u5206rank\u7ea6\u4e3a25%\uff0c\u673a\u8bd5\u5b8c\u6210\u4e865\u9053\u3002</p> <p>\u6839\u636e\u6d41\u79bb\u7684\u62ff\u5230\u7684\u901a\u77e5\u6587\u4ef6\u8ba1\u7b97\uff0c2025\u5e74\u8ba1\u7b97\u673a\u5b66\u9662\u6625\u5b63\u8f6c\u4e13\u4e1a\u8fdb\u5165\u9762\u8bd5\u7684\u6210\u529f\u7387\u4e3a 40/62\uff1b\u901a\u8fc7\u9762\u8bd5\u7684\u6210\u529f\u7387\u4e3a 35/40.</p>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_2","title":"\u673a\u8bd5","text":""},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_3","title":"\u673a\u8bd5\u73af\u5883","text":"<p>\u6210\u7ee9\u4ee5 ICPC \u5236\u8ba1\u7b97\uff0c\u6ca1\u6709\u90e8\u5206\u5206\uff0c\u8bc4\u6d4b\u59ec\u4ec5\u8fd4\u56de\u5bf9\u9519\u3002</p> <p>\u53ef\u4f7f\u7528 C / C++ / Java \u63d0\u4ea4\u4ee3\u7801\uff0c\u8003\u8bd5\u673a\u5668\u73af\u5883\u4e3a Windows10\uff0c\u53ef\u4f7f\u7528 Dev-C++ / IntelliJ IDEA / VS / VSCode \u672c\u5730\u7f16\u8f91\u548c\u6d4b\u8bd5\u4ee3\u7801\u3002\u6d41\u79bb\u4f7f\u7528 Dev-C++ \u5b8c\u6210\u673a\u8bd5\u3002</p> <p>Tip</p> <p>VSCode \u5e76\u672a\u5b89\u88c5 Clangd \u7b49 C/C++ \u8f85\u52a9\u63d2\u4ef6\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\uff1bVS\u7248\u672c\u662f2010</p> <p>OJ \u4e3a PTA \u5e73\u53f0\u3002</p>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_4","title":"\u90e8\u5206\u8003\u9898","text":"<p>\u5171 7 \u9898\uff0c\u5176\u4e2d\u524d 5 \u9898\u96be\u5ea6\u5bf9\u5e94\u6d1b\u8c37\u5165\u95e8\u9898\u3002\u65f6\u95f4\u9650\u5236\u4e3a 1.5h</p> <p>\u6b64\u90e8\u5206\u4ec5\u8bb0\u5f55\u6d41\u79bb\u7684\u8bb0\u5fc6\u91cc\u4ec5\u5b58\u7684\u51e0\u9053\u9898\uff0c<code>?</code>\u8868\u660e\u6b64\u8bb0\u5fc6\u5df2\u635f\u6bc1\u65e0\u6cd5\u590d\u539f\uff0c\u6ca1\u63d0\u5230\u7684\u9898\u90fd\u90fd\u662f\u7b7e\u5230\u9898\u3002</p> \u7b2c\u4e8c\u9898 <p>\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u4ece\u7ed9\u5b9a\u7684\u6570\u5b57 n \u9006\u5e8f\u6253\u5370\u5230\u6570\u5b57 1\uff0c\u4e0d\u5f97\u4f7f\u7528\u5faa\u73af\u3001goto\u7b49\u8bed\u53e5\u3002</p> \u7b2c\u4e09\u9898 <p>\u7ed9\u5b9a n \u4e2a\u6b63\u6574\u6570\uff0c\u627e\u5230\u5176\u4e2d\u6240\u6709\u7684\u8d28\u6570\u5e76\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u3002</p> \u7b2c?\u9898 <p>\u7ed9\u5b9a\u56db\u4e2a\u56fd\u5bb6\u7684\u540d\u5b57\u3001\u8fdb\u7403\u6570\u3001\u5931\u7403\u6570\u3001?\u6570\u3002\u4f9d\u7167\u4ee5\u4e0b\u6bd4\u8f83\u987a\u5e8f\u5bf9\u8fd9\u56db\u4e2a\u56fd\u5bb6\u6392\u5e8f</p> <ol> <li>\u5fd8\u4e86</li> <li>\u5fd8\u4e86</li> <li>\u5fd8\u4e86</li> </ol> <p>\u6309\u6392\u5e8f\u8f93\u51fa\u56fd\u5bb6\u540d</p> \u7b2c?\u9898 <p>\u7b97\u662f\u6a21\u62df\u9898\uff0c\u9898\u9762\u6709\u70b9\u590d\u6742\uff0c\u5927\u6982\u662f\u6309\u7167\u67d0\u79cd\u89c4\u5219\u7528 [1..=n*n] \u7684\u6570\u5b57\u628a\u4e00\u4e2a n*n \u68cb\u76d8\u7684\u68cb\u76d8\u586b\u6ee1\u5e76\u8f93\u51fa\uff0c\u96be\u5ea6\u4e0d\u5927\uff0c\u5c31\u662f\u8981debug\u4e00\u4f1a</p> \u7b2c6\u9898 <p>\u7ed9\u5b9a\u67d0\u4e8c\u53c9\u6811\u7684?\u5e8f\u6392\u5e8f\u548c\u6309\u6df1\u5ea6\u6392\u5e8f\uff0c\u8f93\u51fa\u6b64\u6811\u7684?\u5e8f\u6392\u5e8f</p> \u7b2c7\u9898 <p>\u6700\u5c0f\u5272\u95ee\u9898\uff0c\u53c2\u8003\u6700\u5c0f\u5272</p>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_5","title":"\u9762\u8bd5","text":"<p>\u65f6\u957f\u7ea6 10 min\uff0c\u9762\u8bd5\u5185\u5bb9\u4e0d\u56fa\u5b9a\u3002</p>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_6","title":"\u6d41\u79bb\u7684\u9762\u7ecf<sup>2</sup>","text":"<p>Warning</p> <p>\u6d41\u79bb\u7531\u4e8e\u81ea\u6211\u4ecb\u7ecd\u65f6\u7ed9\u81ea\u5df1\u6316\u4e86\u592a\u591a\u5751\uff08\u4ed6\u63d0\u5230\u4ed6\u5bf9\u7f16\u8bd1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u611f\u5174\u8da3\uff09\uff0c\u56e0\u6b64\u88ab\u8be6\u7ec6\u8be2\u95ee\u4e86\u81f4\u6b7b\u91cf\u7684\u4e13\u4e1a\u5185\u5bb9\uff0c\u6781\u4e0d\u5177\u6709\u53c2\u8003\u4ef7\u503c\uff0c\u4e0d\u5efa\u8bae\u8bfb\u8005\u5b66\u4e60\u3002</p> <p>Notice</p> <p>\u636e\u6d41\u79bb\u7684\u51e0\u4e2a\u670b\u53cb\u6240\u8bf4\uff0c\u4ed6\u4eec\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u5927\u90e8\u5206\u5185\u5bb9\u662f\u8f6c\u4e13\u4e1a\u7684\u7406\u7531\u3001\u672a\u6765\u7684\u89c4\u5212\u4ee5\u53ca\u4e3a\u4f55\u67d0\u79d1\u6210\u7ee9\u8f83\u4f4e\u7b49\u8bdd\u9898\uff0c\u5c0f\u90e8\u5206\u5185\u5bb9\u662f\u4e13\u4e1a\u77e5\u8bc6\u6216\u9879\u76ee\u7ecf\u9a8c\u3002\u7b14\u8005\u63a8\u6d4b\u9762\u8bd5\u5185\u5bb9\u5927\u90e8\u5206\u4f1a\u4f9d\u636e\u81ea\u6211\u4ecb\u7ecd\u4ee5\u53ca\u6210\u7ee9\u5355\u6765\u8fdb\u884c\uff0c\u56e0\u6b64\u5efa\u8bae\u7b14\u8005\u4ed4\u7ec6\u659f\u914c\u81ea\u6211\u4ecb\u7ecd\u5185\u5bb9\uff0c\u4e0d\u8981\u50cf\u6d41\u79bb\u90a3\u4e2a\u50bb\u7f3a\u4e00\u6837\u3002</p> <p>Q1:   \u5148\u4f5c\u4e2a\u81ea\u6211\u4ecb\u7ecd\u5427\u3002</p> <p>Q2:   \u4f60\u521a\u521a\u63d0\u5230\u4f60\u5bf9\u7f16\u8bd1\u5668\u611f\u5174\u8da3\uff0c\u80fd\u4ecb\u7ecd\u4e00\u4e0b\u5417\uff1f</p> <p>Q3:   \u4f60\u80fd\u4ecb\u7ecd\u4e00\u4e0b\u7f16\u8bd1\u7684\u8fc7\u7a0b\u5417\uff1f</p> <p>Q4:   \u53ef\u6267\u884c\u6587\u4ef6\u4e3a\u4ec0\u4e48\u5728\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u5462\uff1f</p> <p>Q4:   \u4f60\u4e3b\u8981\u5199 Rust\uff0c\u90a3\u4f60\u5199 C++ \u5417\uff1f\uff08\u5f97\u5230\u80af\u5b9a\u7b54\u590d\uff09\u90a3\u4f60\u80fd\u4ecb\u7ecd\u4e00\u4e0b Rust \u548c C++ \u6709\u54ea\u4e9b\u5730\u65b9\u4e0d\u540c\u5417\uff1f</p> <p>Q5:   \u4f60\u521a\u521a\u63d0\u5230\u4f60\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u611f\u5174\u8da3\uff0c\u80fd\u4ecb\u7ecd\u4e00\u4e0b\u5417\uff1f</p> <p>Q6:   \u4f60\u4e86\u89e3\u8fc7 Linux \u4e2d\u7684 Rust \u4ee3\u7801\u5417\uff1f</p> <p>Q7:   \u4f60\u63d0\u5230\u4f60\u7ed9\u67d0\u4e2a\u9879\u76ee\u63d0\u4e86\u5341\u51e0\u6b21 pr\uff0c\u8fd9\u4e9b pr \u90fd merge \u4e86\u5417\uff1f</p>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#c","title":"\u6d41\u79bb\u7684\u670b\u53cb\u5c0fc\u7684\u9762\u7ecf","text":"\u5c0fc\u7684TIP <p>1 2 \u7b97\u662f\u5fc5\u95ee\u7684\u9898 3 \u662f\u770b\u4f60\u4e0a\u5b66\u671f\u6210\u7ee9\u95ee\u7684 \u540e\u8fb9\u90fd\u662f\u6839\u636e\u4f60\u7684\u81ea\u6211\u4ecb\u7ecd\u95ee\u7684</p> <ol> <li> <p>\u81ea\u6211\u4ecb\u7ecd\uff08\u4e0d\u8981\u5f3a\u8c03\u8bf4\u81ea\u5df1\u5bf9\u67d0\u4e00\u95e8\u8bfe\u5b66\u4e60\u7684\u5f88\u591a\uff0c\u9664\u975e\u4f60\u771f\u7684\u4f1a\uff0c\u4e0d\u7136\u4e00\u4f1a\u4ed6\u4f1a\u95ee\u4f60\u76f8\u5173\u4e13\u4e1a\u77e5\u8bc6\uff09</p> </li> <li> <p>AI\u9662\u4e5f\u5f88\u597d\uff0c\u4e5f\u662f\u8ba1\u7b97\u673a\u7c7b\uff0c\u4e3a\u4ec0\u4e48\u8981\u6765\u8ba1\u9662\uff08\u8fd9\u4e2a\u6bcf\u4e2a\u4eba\u5fc5\u987b\u51c6\u5907\uff09</p> </li> <li> <p>\u4e0a\u5b66\u671f\u4f60\u7684 C++ \u8bfe\u6210\u7ee9\u4e0d\u9519\uff0c\u4f60\u5bf9 C++ \u548c C \u8bed\u8a00\u7684\u5b66\u4e60\u6709\u4ec0\u4e48\u611f\u609f\uff1f\uff08\u8fd9\u4e2a\u95ee\u7684\u6709\u70b9\u96be\u56de\u7b54\uff0c\u8001\u5e08\u5c31\u8865\u5145\u95ee\u4e86\u4e00\u4e0b\u4e0a\u8bfe\u65b9\u5f0f\uff0c\u6211\u4e5f\u662f\u968f\u4fbf\u7b54\u4e00\u4e0b\u548b\u4e0a\u8bfe\u7684\u5c31\u6577\u884d\u53bb\u4e86\uff09</p> </li> <li> <p>\u7528\u8fc7\u54ea\u4e9b\u5237\u9898\u7f51\u7ad9</p> </li> <li> <p>\u5e73\u65f6\u6bcf\u5929\u4f1a\u6709\u591a\u957f\u65f6\u95f4\u7ec3\u4e60\u4ee3\u7801</p> </li> <li> <p>\u4f60\u8bf4\u4e0a\u5b66\u671f\u4f60\u81ea\u5b66\u4e86 C \u8bed\u8a00\uff0c\u8bf7\u4f60\u8bf4\u8bf4\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u7684\u533a\u522b</p> </li> </ol>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_7","title":"\u5176\u4ed6","text":""},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_8","title":"\u5982\u4f55\u67e5\u770b\u662f\u5426\u901a\u8fc7\u9762\u8bd5\uff1f","text":"<p>\u6559\u52a1\u7ba1\u7406 -&gt; \u5b66\u7c4d\u5f02\u52a8</p> <p>\u82e5\u663e\u793a\u65b0\u73ed\u7ea7\u5219\u8868\u660e\u901a\u8fc7\u9762\u8bd5\uff0c2025\u5c4a\u5728\u6559\u52a1\u5904\u89c4\u5b9a\u516c\u793a\u65e5\u671f(3\u67087\u53f7)\u7684\u4e24\u5929\u524d(3\u67085\u65e5)\u663e\u793a\u4e86\u65b0\u73ed\u7ea7</p>"},{"location":"2025/02/28/bupt-%E8%BD%AC%E4%B8%93%E4%B8%9A%E5%B0%8F%E8%AE%B0/#_9","title":"\u5173\u4e8e\u8bfe\u7a0b\u66ff\u4ee3\u548c\u8865\u4fee","text":"<p>\u4eba\u5de5\u667a\u80fd\u5927\u7c7b\u548c\u8ba1\u7b97\u673a\u7c7b\u5728\u5927\u4e00\u4e0a\u5b66\u671f\u5b66\u4e60\u5185\u5bb9\u5927\u81f4\u76f8\u4f3c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8865\u4fee\u5927\u91cf\u8bfe\u7a0b\uff08\u4ec5\u6709\u8ba1\u7b97\u5bfc\u8bba\u3001\u4e60\u6982\u9700\u8981\u8865\u4fee\uff09\u3002\u8865\u4fee\u8bfe\u7a0b\u5927\u90e8\u5206\u5b89\u6392\u5728\u5927\u4e8c\u4e0a\u5b66\u671f\u3002</p> <p></p> <p>Notice</p> <p>\u90e8\u5206\u4e13\u4e1a\uff08\u5982\u81ea\u52a8\u5316\uff09\u5927\u4e00\u4e0a\u5b66\u671f\u9ad8\u7b49\u6570\u5b66\uff08\u4e0a\uff09\u7684\u5b66\u5206\u4e0d\u8db3\u4ee5\u66ff\u4ee3\u8ba1\u9662\u7684\u6570\u5b66\u5206\u6790\uff08\u4e0a\uff09\uff0c\u9700\u8981\u5728\u5927\u4e8c\u8865\u4fee\u3002</p> <ol> <li> <p>\u672c\u6587\u5f15\u7528\u7247\u6bb5\u6709\u5220\u51cf\u548c\u4fee\u6539\uff0c\u4e14\u4e0d\u4fdd\u8bc1\u65f6\u6548\u6027\u3002\u00a0\u21a9</p> </li> <li> <p>\u5185\u5bb9\u6709\u5220\u51cf\u548c\u4fee\u6539\uff0c\u7531\u4e8e\u8bb0\u5fc6\u6a21\u7cca\uff0c\u6709\u4e0d\u51c6\u786e\u6216\u9519\u8bef\u7684\u5730\u65b9\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/07/26/%E9%9A%A7%E9%81%93%E7%9A%84%E7%BB%88%E7%82%B9%E4%BA%BA%E7%94%9F%E7%9A%84%E4%B8%8B%E4%B8%80%E7%AB%99/","title":"\u96a7\u9053\u7684\u7ec8\u70b9\uff0c\u4eba\u751f\u7684\u4e0b\u4e00\u7ad9","text":"<p>\u4eca\u5929\u662f2024\u5e747\u670826\u65e5\uff0c\u9ad8\u8003\u7ed3\u675f\u7b2c48\u5929\u3002</p> <p>\u9ad8\u8003\u7ed3\u675f\u4e86\uff0c\u65e0\u8bba\u5982\u4f55\u9057\u61be\uff0c\u6211\u5df2\u7ecf\u8d70\u51fa\u4e86\u9ad8\u4e2d\u7684\u6821\u95e8\uff0c\u6765\u5230\u4e86\u4eba\u751f\u7684\u4e0b\u4e00\u4e2a\u4ea4\u53c9\u8def\u53e3\u3002</p> <p>\u672c\u6765\u60f3\u5199\u4e00\u4e9b\u9ad8\u4e2d\u751f\u6d3b\u7684\u603b\u7ed3\uff0c\u7136\u800c\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u5e76\u4e0d\u6000\u5ff5\u9ad8\u4e2d\u751f\u6d3b\u3002\u5982\u540c\u6211\u6240\u957f\u5927\u7684\u57ce\u5e02\uff0c\u6211\u66f4\u559c\u6b22\u5411\u524d\u770b\u3002</p> <p>\u4ece\u6df1\u5733\u5230\u5317\u4eac\uff0c\u4e0b\u4e00\u7ad9\uff0c\u5317\u90ae\u3002</p>"},{"location":"2024/12/22/homebrew-formula-%E4%BA%8C%E4%B8%89%E4%BA%8B/","title":"Homebrew Formula \u4e8c\u4e09\u4e8b","text":"<p>\u6700\u8fd1\u7ecf\u5e38\u9047\u5230 homebrew \u7684\u6253\u5305\u9700\u6c42\uff0c\u5e72\u8106\u7814\u7a76\u4e86\u4e00\u4e0b homebrew Formula\u3002\u8fd9\u91cc\u4ee5 byrdocs/byrdocs-cli \u4e3e\u4f8b\uff0c\u8bb0\u5f55\u4e00\u4e0b\u6253\u5305\u4e0a\u4f20\u7684\u6d41\u7a0b</p>"},{"location":"2024/12/22/homebrew-formula-%E4%BA%8C%E4%B8%89%E4%BA%8B/#step1-brew-tap","title":"Step.1 <code>brew tap</code>","text":"<p><code>brew tap</code> \u547d\u4ee4\u76f8\u5f53\u4e8e <code>git clone</code> \uff0c\u5c06\u4e00\u4e2a\u5305\u542b\u4e86 Formula \u7684\u4ed3\u5e93 clone \u5230\u672c\u5730\u8def\u5f84 <code>$(brew --prefix)/Library/Taps</code> \u4e0b</p> zsh <pre><code>brew tap byrdocs/homebrew-byrdocs-cli\n</code></pre> <p>\u8fd9\u4e2a\u547d\u4ee4\u5c06 byrdocs/homebrew-byrdocs-cli \u514b\u9686\u5230 <code>$(brew --prefix)/Library/Taps/byrdocs/homebrew-byrdocs-cli</code></p> <p>\u5f85\u540e\u7eed\u6b65\u9aa4\u5b8c\u6210\u540e\u5373\u53ef\u4f7f\u7528 <code>brew install byrdocs-cli</code> \u5b89\u88c5 byrdocs-cli</p>"},{"location":"2024/12/22/homebrew-formula-%E4%BA%8C%E4%B8%89%E4%BA%8B/#step2-formula","title":"Step.2 \u7f16\u5199 Formula","text":"<p><code>byrdocs-cli</code> \u662f\u4e00\u4e2a python command-line tool\uff0c \u4e14\u5df2\u7ecf\u4e0a\u4f20\u5230 PyPI \u4e86\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 homebrew \u5b98\u65b9\u63d0\u4f9b\u7684\u5de5\u5177 homebrew-pypi-poet \u5373 poet \u6765\u5feb\u901f\u751f\u6210 Formula</p> <pre><code>% python3.10 -m venv .venv\n% source .venv/bin/activate.fish\n% pip install homebrew-pypi-poet byrdocs-cli\n% poet -f byrdocs-cli &gt; byrdocs-cli.rb\n</code></pre> <p>\u8fd9\u65f6\u5019 <code>byrdocs-cli.rb</code> \u91cc\u5c31\u662f\u4e00\u4efd\u5305\u542b\u4e86\u5fc5\u8981\u5185\u5bb9\u7684\u5b8c\u6574 <code>formula</code> \u4e86</p> <p>Tip</p> <p>Homebrew \u5bf9 Formula \u7684\u547d\u540d\u6709\u7740\u4e25\u683c\u7684\u8981\u6c42\uff1a</p> <ul> <li><code>class name</code> \u5fc5\u987b\u9075\u5b88 <code>PascalCase</code> \u547d\u540d\u6cd5</li> <li><code>file name</code>\u5fc5\u987b\u9075\u5b88 <code>kebab-case</code> \u547d\u540d\u6cd5</li> <li><code>class name</code> \u548c <code>file name</code> \u5fc5\u987b\u5bf9\u5e94</li> </ul> <p>Tip</p> <p>\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u9a8c\u8bc1\u683c\u5f0f\u548c\u5185\u5bb9\u662f\u5426\u586b\u5199\u6b63\u786e</p> <pre><code>% brew style &lt;your_formula&gt;\n% brew audit --strict &lt;your_formula&gt;\n</code></pre> byrdocs-cli.rb <pre><code>class ByrdocsCli &lt; Formula\n  include Language::Python::Virtualenv\n\n  desc \"Shiny new formula\"\n  homepage \"https://github.com/byrdocs/byrdocs-cli\"\n  url \"https://files.pythonhosted.org/packages/66/37/429a8f524b9e23ed21cbef32fe7d6f20e4a24fdec22b4b2df8de473d2a70/byrdocs_cli-0.5.3.tar.gz\"\n  sha256 \"7413f94f900db6a37ecd400376472c3622dad07fcbd2c2585446685dafa877d9\"\n\n  depends_on \"python3\"\n\n  resource \"argcomplete\" do\n    url \"https://files.pythonhosted.org/packages/5f/39/27605e133e7f4bb0c8e48c9a6b87101515e3446003e0442761f6a02ac35e/argcomplete-3.5.1.tar.gz\"\n    sha256 \"eb1ee355aa2557bd3d0145de7b06b2a45b0ce461e1e7813f5d066039ab4177b4\"\n  end\n\n  ...\n\n  resource \"wcwidth\" do\n    url \"https://files.pythonhosted.org/packages/6c/63/53559446a878410fc5a5974feb13d31d78d752eb18aeba59c7fef1af7598/wcwidth-0.2.13.tar.gz\"\n    sha256 \"72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"\n  end\n\n  def install\n    virtualenv_create(libexec, \"python3\")\n    virtualenv_install_with_resources\n  end\n\n  test do\n    false\n  end\nend\n</code></pre>"},{"location":"2024/12/22/homebrew-formula-%E4%BA%8C%E4%B8%89%E4%BA%8B/#metadata","title":"Metadata","text":"<p>\u6b64\u5904\u5b9a\u4e49\u8f6f\u4ef6\u5305\u7684\u5143\u4fe1\u606f</p> <p>Info</p> <p><code>depends_on \"python3\"</code> \u4e0d\u80fd\u4e25\u683c\u901a\u8fc7\u6d4b\u8bd5\uff0c\u5fc5\u987b\u4fee\u6539\u4e3a\u7279\u5b9a\u7684\u67d0\u4e2a\u7248\u672c\u5982 python@3.10 \u8be6\u89c1 Python declarations for applications</p> <p>Warning</p> <p>Homebrew-core \u4e0d\u63a5\u53d7\u65e0 license \u7684 formula</p> byrdocs-cli.rb <pre><code>include Language::Python::Virtualenv # \u4f7f\u7528 `python` \u865a\u62df\u73af\u5883 \u8be6\u89c1 https://docs.brew.sh/Python-for-Formula-Authors#installing-applications\nhomepage \"https://github.com/byrdocs/byrdocs-cli\"\nurl \"https://files.pythonhosted.org/packages/66/37/429a8f524b9e23ed21cbef32fe7d6f20e4a24fdec22b4b2df8de473d2a70/byrdocs_cli-0.5.3.tar.gz\" # python \u4ee3\u7801\u4ed3\u5e93\uff0c\u6b64\u5904\u4e3aPyPI\nsha256 \"7413f94f900db6a37ecd400376472c3622dad07fcbd2c2585446685dafa877d9\" # \u9a8c\u8bc1\u4e0b\u8f7d\ndepends_on \"python@3.10\"\nlicense \"MIT\" # Homebrew-core \u4e0d\u63a5\u53d7\u65e0 license \u7684 formula\n</code></pre>"},{"location":"2024/12/22/homebrew-formula-%E4%BA%8C%E4%B8%89%E4%BA%8B/#install","title":"Install","text":"<p>\u8fd9\u91cc\u7684\u4ee3\u7801\u4f1a\u5728 <code>brew install &lt;formula&gt;</code> \u65f6\u8fd0\u884c</p> byrdocs-cli.rb <pre><code>def install\n    virtualenv_create(libexec, \"python3\") # \u5e94\u4fee\u6539\u4e3a python3.10\n    virtualenv_install_with_resources # \u5b89\u88c5\u4e0a\u9762\u5b9a\u4e49\u7684\u6240\u6709 resources \u4ee5\u53ca\u7a0b\u5e8f\u672c\u4f53\nend\n</code></pre>"},{"location":"2024/12/22/homebrew-formula-%E4%BA%8C%E4%B8%89%E4%BA%8B/#test","title":"Test","text":"<p>\u8fd9\u91cc\u7684\u4ee3\u7801\u4f1a\u5728\u7528\u6237\u8fd0\u884c <code>brew test &lt;formula&gt;</code> \u547d\u4ee4\u65f6\u8fd0\u884c\uff0c\u7528\u4e8e\u6d4b\u8bd5\u8f6f\u4ef6\u5305\u662f\u5426\u6784\u5efa\u6210\u529f</p> byrdocs-cli.rb <pre><code>test do\n    expect = \"usage: byrdocs [-h] [--token TOKEN] [--manually] [command] [file]\"\n    assert_match expect, pipe_output(\"#{bin}/byrdocs --help 2&gt;&amp;1\")\nend\n</code></pre>"},{"location":"2024/12/22/homebrew-formula-%E4%BA%8C%E4%B8%89%E4%BA%8B/#byrdocs-clirb","title":"\u5b8c\u6210\u54c1\u53c2\u8003 byrdocs-cli.rb","text":"byrdocs-cli.rb <pre><code>class ByrdocsCli &lt; Formula\n  include Language::Python::Virtualenv\n\n  desc \"Command-line tool for uploading files to byrdocs.org\"\n  homepage \"https://github.com/byrdocs/byrdocs-cli\"\n  license \"MIT\"\n\n  url \"https://files.pythonhosted.org/packages/ca/3d/b75a97066d4690cb08009fa7c135342b965b80e96aa46332fa6a3f2dabf1/byrdocs_cli-0.5.5.tar.gz\"\n  sha256 \"6a870124e1f8cddb4e66450436993a9adf221de39e967467de0242b80591fd28\"\n\n  depends_on \"python@3.10\"\n\n  resource \"argcomplete\" do\n    url \"https://files.pythonhosted.org/packages/5f/39/27605e133e7f4bb0c8e48c9a6b87101515e3446003e0442761f6a02ac35e/argcomplete-3.5.1.tar.gz\"\n    sha256 \"eb1ee355aa2557bd3d0145de7b06b2a45b0ce461e1e7813f5d066039ab4177b4\"\n  end\n\n  resource \"boto3\" do\n    url \"https://files.pythonhosted.org/packages/f8/94/8f0eeb6201904c08ffd4f24ad8313162ad72f9c6bfe179cbb9b8d3bcdd49/boto3-1.35.62.tar.gz\"\n    sha256 \"f80eefe7506aa01799b1027d03eddfd3c4a60548d6db5c32f139e1dec9f3f4f5\"\n  end\n\n  resource \"botocore\" do\n    url \"https://files.pythonhosted.org/packages/5b/59/832c6d4dc8812998f2a9211ebaba8f5bd1bb418f020dbfa93dd8e18c917c/botocore-1.35.62.tar.gz\"\n    sha256 \"9df762294d5c727d9ea1c48b98579729a0ba40fd317c3262a6b8d8e12fb67489\"\n  end\n\n  resource \"certifi\" do\n    url \"https://files.pythonhosted.org/packages/0f/bd/1d41ee578ce09523c81a15426705dd20969f5abf006d1afe8aeff0dd776a/certifi-2024.12.14.tar.gz\"\n    sha256 \"b650d30f370c2b724812bee08008be0c4163b163ddaec3f2546c1caf65f191db\"\n  end\n\n  resource \"charset-normalizer\" do\n    url \"https://files.pythonhosted.org/packages/16/b0/572805e227f01586461c80e0fd25d65a2115599cc9dad142fee4b747c357/charset_normalizer-3.4.1.tar.gz\"\n    sha256 \"44251f18cd68a75b56585dd00dae26183e102cd5e0f9f1466e6df5da2ed64ea3\"\n  end\n\n  resource \"idna\" do\n    url \"https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz\"\n    sha256 \"12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9\"\n  end\n\n  resource \"inquirerpy\" do\n    url \"https://files.pythonhosted.org/packages/64/73/7570847b9da026e07053da3bbe2ac7ea6cde6bb2cbd3c7a5a950fa0ae40b/InquirerPy-0.3.4.tar.gz\"\n    sha256 \"89d2ada0111f337483cb41ae31073108b2ec1e618a49d7110b0d7ade89fc197e\"\n  end\n\n  resource \"isbnlib\" do\n    url \"https://files.pythonhosted.org/packages/9e/6d/55b9ee89fdfb3aacb92b975a60357c7aa547db358817e16be3b6f8f5d781/isbnlib-3.10.14.tar.gz\"\n    sha256 \"96f90864c77b01f55fa11e5bfca9fd909501d9842f3bc710d4eab85195d90539\"\n  end\n\n  resource \"jmespath\" do\n    url \"https://files.pythonhosted.org/packages/00/2a/e867e8531cf3e36b41201936b7fa7ba7b5702dbef42922193f05c8976cd6/jmespath-1.0.1.tar.gz\"\n    sha256 \"90261b206d6defd58fdd5e85f478bf633a2901798906be2ad389150c5c60edbe\"\n  end\n\n  resource \"pfzy\" do\n    url \"https://files.pythonhosted.org/packages/d9/5a/32b50c077c86bfccc7bed4881c5a2b823518f5450a30e639db5d3711952e/pfzy-0.3.4.tar.gz\"\n    sha256 \"717ea765dd10b63618e7298b2d98efd819e0b30cd5905c9707223dceeb94b3f1\"\n  end\n\n  resource \"pinyin\" do\n    url \"https://files.pythonhosted.org/packages/32/95/d2969f1071b7bc0afff407d1d7b4b3f445e8e6b59df7921c9c09e35ee375/pinyin-0.4.0.tar.gz\"\n    sha256 \"8842ae53cb7a81c8c3ec03d1cd7dba9aedb20d8d6962aebc620fad74da0868f5\"\n  end\n\n  resource \"prompt-toolkit\" do\n    url \"https://files.pythonhosted.org/packages/2d/4f/feb5e137aff82f7c7f3248267b97451da3644f6cdc218edfe549fb354127/prompt_toolkit-3.0.48.tar.gz\"\n    sha256 \"d6623ab0477a80df74e646bdbc93621143f5caf104206aa29294d53de1a03d90\"\n  end\n\n  resource \"python-dateutil\" do\n    url \"https://files.pythonhosted.org/packages/66/c0/0c8b6ad9f17a802ee498c46e004a0eb49bc148f2fd230864601a86dcf6db/python-dateutil-2.9.0.post0.tar.gz\"\n    sha256 \"37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3\"\n  end\n\n  resource \"PyYAML\" do\n    url \"https://files.pythonhosted.org/packages/54/ed/79a089b6be93607fa5cdaedf301d7dfb23af5f25c398d5ead2525b063e17/pyyaml-6.0.2.tar.gz\"\n    sha256 \"d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e\"\n  end\n\n  resource \"requests\" do\n    url \"https://files.pythonhosted.org/packages/63/70/2bf7780ad2d390a8d301ad0b550f1581eadbd9a20f896afe06353c2a2913/requests-2.32.3.tar.gz\"\n    sha256 \"55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760\"\n  end\n\n  resource \"s3transfer\" do\n    url \"https://files.pythonhosted.org/packages/c0/0a/1cdbabf9edd0ea7747efdf6c9ab4e7061b085aa7f9bfc36bb1601563b069/s3transfer-0.10.4.tar.gz\"\n    sha256 \"29edc09801743c21eb5ecbc617a152df41d3c287f67b615f73e5f750583666a7\"\n  end\n\n  resource \"six\" do\n    url \"https://files.pythonhosted.org/packages/94/e7/b2c673351809dca68a0e064b6af791aa332cf192da575fd474ed7d6f16a2/six-1.17.0.tar.gz\"\n    sha256 \"ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81\"\n  end\n\n  resource \"tqdm\" do\n    url \"https://files.pythonhosted.org/packages/e8/4f/0153c21dc5779a49a0598c445b1978126b1344bab9ee71e53e44877e14e0/tqdm-4.67.0.tar.gz\"\n    sha256 \"fe5a6f95e6fe0b9755e9469b77b9c3cf850048224ecaa8293d7d2d31f97d869a\"\n  end\n\n  resource \"urllib3\" do\n    url \"https://files.pythonhosted.org/packages/aa/63/e53da845320b757bf29ef6a9062f5c669fe997973f966045cb019c3f4b66/urllib3-2.3.0.tar.gz\"\n    sha256 \"f8c5449b3cf0861679ce7e0503c7b44b5ec981bec0d1d3795a07f1ba96f0204d\"\n  end\n\n  resource \"wcwidth\" do\n    url \"https://files.pythonhosted.org/packages/6c/63/53559446a878410fc5a5974feb13d31d78d752eb18aeba59c7fef1af7598/wcwidth-0.2.13.tar.gz\"\n    sha256 \"72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"\n  end\n\n  def install\n    virtualenv_create(libexec, \"python3.10\")\n    virtualenv_install_with_resources\n  end\n\n  test do\n    expect = \"usage: byrdocs [-h] [--token TOKEN] [--manually] [command] [file]\"\n    assert_match expect, pipe_output(\"#{bin}/byrdocs --help 2&gt;&amp;1\")\n  end\nend\n</code></pre>"},{"location":"2024/12/22/homebrew-formula-%E4%BA%8C%E4%B8%89%E4%BA%8B/#step3-homebrew-core-pr","title":"Step.3 \u5411 homebrew-core \u63d0\u4ea4 PR","text":"<p>\u5411 homebrew-core \u63d0\u4ea4 PR, \u4f60\u53ef\u4ee5\u53c2\u8003:</p> <ul> <li> <p>guidelines for contributing</p> </li> <li> <p>commit style guide</p> </li> <li> <p>pull requests</p> </li> </ul> <p>\u6210\u529f merge \u6216 push \u5230\u4e2a\u4eba\u4ed3\u5e93\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 <code>brew tap</code> \u547d\u4ee4\u6765\u5bfc\u5165\u4f60\u7684 Homebrew Formula \u4e86\uff0c\u53ef\u559c\u53ef\u8d3a\uff0c\u53ef\u559c\u53ef\u8d3a\u3002</p>"},{"location":"records/","title":"Records","text":"<p>\u8fd9\u91cc\u4f1a\u8bb0\u5f55\u4e00\u4e9b Crack / Deploy \u76f8\u5173\u5185\u5bb9</p>"},{"location":"records/2024/11/24/crossover-crack-record/","title":"CrossOver Crack Record","text":"<p>Tip</p> <p>\u7b14\u8005\u4f7f\u7528\u7684\u7248\u672c\u4e3a 24.0.5</p> <p>CrossOver \u5728\u542f\u52a8\u65f6\u4f1a\u68c0\u67e5\u672c\u5730\u8bb8\u53ef\u8bc1\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u9010\u4e2a\u66f4\u65b0\u8bb8\u53ef\u8bc1\u5373\u53ef\u5b8c\u6210 unlimited trial crack\u3002</p> <p>\u8bb8\u53ef\u8bc1\u6587\u4ef6:</p> <ul> <li> <p><code>~/Library/Application Support/CrossOver/Bottles/*/system.reg</code></p> <ul> <li>\u5220\u9664\u8fd9\u4e2a wine \u7684\u6ce8\u518c\u8868\u6587\u4ef6\u4e0b\u7684[Software\\CodeWeavers\\CrossOver\\cxoffice]\u5b57\u6bb5</li> </ul> </li> <li> <p><code>~/Library/Application Support/CrossOver/Bottles/*/.update-timestamp</code></p> <ul> <li>\u76f4\u63a5\u5220\u9664\u8fd9\u4e2a\u6587\u4ef6</li> </ul> </li> <li> <p><code>~/Library/Preferences/com.codeweavers.CrossOver.plist</code></p> <ul> <li>\u66f4\u65b0<code>FirstRunDate</code>\u548c<code>SULastCheckTime</code>\u5b57\u6bb5</li> </ul> </li> </ul> <p>\u53ef\u4ee5\u8bbe\u7f6e\u5b9a\u65f6\u811a\u672c\u81ea\u52a8\u5904\u7406\uff0c\u6b64\u5904\u4e0d\u63d0\u4f9b\u3002</p>"},{"location":"records/2024/11/14/live2d-cubism-editor-crack-record/","title":"Live2D Cubism Editor Crack Record","text":"<p>Notice</p> <p>\u4ee5\u9632\u81ea\u5df1\u5fd8\u8bb0\uff0c\u5728\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e0b</p> <p>\u7b14\u8005\u4f7f\u7528\u7684\u662f MacOS \u7248\u672c\u7684 Live2D Cubism Editor 5.1</p>"},{"location":"records/2024/11/14/live2d-cubism-editor-crack-record/#_1","title":"\u5c1d\u8bd5","text":"<p>\u6309\u7167\u5e38\u89c4\u601d\u8def\uff0c\u627e\u627e\u8fd9\u4e2a\u8f6f\u4ef6\u7684\u8bb8\u53ef\u8bc1\u653e\u5728\u54ea\uff0c\u7ffb\u4e86\u4e00\u4e0b\u53d1\u73b0\u5728 <code>/Library/Application Support/Live2D/Cubism License</code> \u8fd9\u4e2a\u76ee\u5f55\u4e0b</p> <p>\u8bd5\u8bd5\u5220\u9664\uff0c\u7136\u800c <code>live2d_editorE.lic</code> \u5728\u8f6f\u4ef6\u91cd\u542f\u540e\u4ecd\u7136\u4f1a\u81ea\u52a8\u751f\u6210 </p> <p>\u6253\u5f00\u770b\u4e00\u773c</p> live2d_editorE.lic <pre><code># This license created by RLM Internet Activation\n</code></pre> <p>\u770b\u6765\u662f\u8054\u7f51\u6fc0\u6d3b\u7684\uff0c\u968f\u540e\u5728\u7f51\u4e0a\u627e\u5230\u4e00\u4e2a\u4ed3\u5e93 RLM_1221_Mod \u5305\u542b\u6709\u5bf9 Live2D Cubism Editor \u7684 RLM Crack</p> <p>\u5c1d\u8bd5\u76f4\u63a5\u7528\u4ed3\u5e93\u91cc\u7684 <code>rlm1603.jar</code> \u66ff\u6362 <code>/Applications/Live2D Cubism 5.1/res/rlm1603.jar</code>\uff0c\u53d1\u73b0\u8f6f\u4ef6\u6253\u4e0d\u5f00</p> <p>\u540e\u6765\u624d\u770b\u5230\u6709 SHA-256 \u68c0\u9a8c\uff0c\u8fd9\u91cc\u4f5c\u8005\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\u89e3\u9664\u68c0\u9a8c</p> Way 1Way 2 (WTF is this way lol) <ul> <li>As they added file SHA-256 check, we have to patch the main jar</li> <li>Use jadx and other tools to locate the CEAppDef file (in 4.2.0.1 it's g.class)</li> <li>modify the checksum (using 010 editor or other tool, original checksum is 6b80a0f06acb44524d65d72edf4a097062f41edab54a53063f926d553f9647fa)</li> <li>Remove the .RSA .SF and MANIFEST.MF file in META-INF</li> <li>Move back the main jar and the rlm1221.jar</li> <li>Done~ just enjoy!</li> </ul> <ul> <li>As they added the SHA-256 check, we can also change the .bat file</li> <li>Modify the CLASS_PATH, rename the app\\lib\\rlm1221.jar to rlm1221_mod</li> <li>Also modify your jar file to rlm1221_mod.jar and copy that into app\\lib</li> <li>Change all 4 .bat files and you are ready to go</li> <li>LOL</li> </ul>"},{"location":"records/2024/11/14/live2d-cubism-editor-crack-record/#_2","title":"\u89e3\u51b3\u65b9\u6848","text":"<p>\u4f7f\u7528\u65b9\u6cd52:</p> <ol> <li> <p>\u627e\u5230 <code>/Applications/Live2D Cubism 5.1/res/CubismEditor.cfg</code></p> </li> <li> <p>\u628a<code>app.classpath=$APPDIR/rlm1603.jar</code> \u66ff\u6362\u4e3a <code>app.classpath=$APPDIR/rlm1603_mod.jar</code></p> </li> <li> <p>\u628a\u4ed3\u5e93\u5185\u7684<code>rlm1603.jar</code> \u6539\u540d\u4e3a <code>rlm1603_mod.jar</code>, \u653e\u5165 <code>/Applications/Live2D Cubism 5.1/res</code> \u5185</p> </li> </ol> <p>\u5927\u529f\u544a\u6210, Enjoy it</p>"},{"location":"records/2025/01/08/%E9%83%A8%E7%BD%B2-mkdocs-%E8%87%B3-cloudflare-pages/","title":"\u90e8\u7f72 MkDocs \u81f3 Cloudflare Pages","text":"<p>\u53d7\u4e0d\u4e86 Hexo \u4e86, \u4e8e\u662f\u628a\u535a\u5ba2\u8fc1\u79fb\u5230\u4e86 Material for MkDocs.</p> <p>\u7136\u800c\u5047\u5982\u4f60\u76f4\u63a5\u4f7f\u7528 Cloudflare Pages \u5b98\u65b9\u7ed9\u51fa\u7684 MkDocs \u9884\u8bbe...</p> Error <pre><code>Executing user command: mkdocs build\n/bin/sh: 1: mkdocs: not found\nFailed: Error while executing user command. Exited with error code: 127\nFailed: build command exited with code: 1\nFailed: error occurred while running build command\n</code></pre> <p>\u8fd9\u8bf4\u660e Cloudflare Pages \u5bf9 MkDocs \u7684\u652f\u6301\u5e76\u4e0d\u5230\u4f4d, \u4f46\u662f\u6ca1\u5173\u7cfb\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e24\u79cd\u89e3\u51b3\u65b9\u6848</p>"},{"location":"records/2025/01/08/%E9%83%A8%E7%BD%B2-mkdocs-%E8%87%B3-cloudflare-pages/#github-action-recommended","title":"\u65b9\u6848\u4e00: \u4f7f\u7528 Github Action \u63d0\u524d\u6784\u5efa ( Recommended )","text":"action.yml <pre><code>name: CI\non:\n  push:\n    branches: [ \"main\" ]\njobs:\n  build:\n    env:\n      PYTHONPATH: .\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        fetch-depth: 0\n\n    - name: Set up Python 3.8\n      uses: actions/setup-python@v3\n      with:\n        python-version: \"3.8\"\n\n    - name: \u2699\ufe0f Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install mkdocs\n        pip install $(mkdocs get-deps)\n\n    - name: Setup GIT user\n      uses: fregante/setup-git-user@v1\n\n    - name: \ud83c\udfd7\ufe0f Publish Site\n      run: mkdocs gh-deploy\n</code></pre> <p>\u8fd9\u6837\u6bcf\u6b21 push \u540e action \u5c31\u4f1a\u81ea\u52a8\u5c06\u6784\u5efa\u597d\u7684\u7248\u672c\u4e0a\u4f20\u5230\u4ed3\u5e93\u7684 gh-pages \u5206\u652f</p> <p>\u4e4b\u540e\u53ea\u9700\u8981\u5728 Cloudflare Pages \u4e2d\u8bbe\u7f6e\u597d\u76ee\u6807\u4ed3\u5e93\u7684\u5206\u652f\u5c31\u5b8c\u6210\u5566</p>"},{"location":"records/2025/01/08/%E9%83%A8%E7%BD%B2-mkdocs-%E8%87%B3-cloudflare-pages/#cloudflare-pages","title":"\u65b9\u6848\u4e8c: \u7f16\u8f91 Cloudflare Pages \u6784\u5efa\u547d\u4ee4","text":"<p>\u7f16\u8f91\u6784\u5efa\u547d\u4ee4:</p> Configuration option Value Production branch <code>main</code> Build command <code>pip install mkdocs &amp;&amp; pip install $(mkdocs get-deps) &amp;&amp; PYTHONPATH=. mkdocs build</code> Build directory <code>site</code> <p>\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf (Environment variables (advanced): \u8bbe\u7f6e <code>PYTHON_VERSION</code> \u4e3a <code>3.8</code>  &gt; Add variable)</p>"},{"location":"records/2025/01/08/%E9%83%A8%E7%BD%B2-mkdocs-%E8%87%B3-cloudflare-pages/#_1","title":"\u603b\u7ed3","text":"<p>\u4e24\u79cd\u65b9\u6848\u5747\u53ef\u884c\uff0c\u5b9e\u6d4b Github Action \u65b9\u6848\u90e8\u7f72\u901f\u5ea6\u66f4\u5feb</p>"},{"location":"records/2025/01/10/macos-%E4%BD%BF%E7%94%A8-touch-id-%E9%AA%8C%E8%AF%81/","title":"MacOS \u4f7f\u7528 Touch ID \u9a8c\u8bc1 sudo \u6743\u9650","text":"<p>\u4e00\u76f4\u5f88\u70e6\u6bcf\u6b21 sudo \u90fd\u8981\u8f93\u5165\u5bc6\u7801, \u95f2\u6765\u65e0\u4e8b\u627e\u4e86\u4e00\u4e0b\u6709\u6ca1\u6709\u7528 Touch ID \u9a8c\u8bc1 sudo \u6743\u9650\u7684\u65b9\u6cd5, \u5728\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e0b.</p> /etc/pam.d/sudo <pre><code># sudo: auth account password session\nauth       include        sudo_local\nauth       sufficient     pam_smartcard.so\nauth       required       pam_opendirectory.so\naccount    required       pam_permit.so\npassword   required       pam_deny.so\nsession    required       pam_permit.so\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 /etc/pam.d/sudo \u6587\u4ef6\u5bfc\u5165\u4e86\u540d\u4e3a sudo_local \u7684\u5b50\u6a21\u5757, \u4f46\u5b9e\u9645\u4e0a /etc/pam.d/sudo_local \u8fd9\u4e2a\u6587\u4ef6\u662f\u4e0d\u5b58\u5728\u7684.</p> <p>Apple \u63d0\u4f9b\u4e86\u4e00\u4e2a sudo_local.template \u6a21\u7248:</p> /etc/pam.d/sudo_local.template <pre><code># sudo_local: local config file which survives system update and is included for sudo\n# uncomment following line to enable Touch ID for sudo\n#auth       sufficient     pam_tid.so\n</code></pre> <p>\u6240\u4ee5\u5b9e\u9645\u4e0a\u8981\u6267\u884c\u7684\u547d\u4ee4\u5f88\u7b80\u5355:</p> <pre><code>sudo cp /etc/pam.d/sudo_local.template /etc/pam.d/sudo_local\n</code></pre> <p>\u968f\u540e\u4f7f\u7528 vim \u53bb\u6389 <code>auth       sufficient     pam_tid.so</code> \u524d\u9762\u7684\u6ce8\u91ca\u5c31\u53ef\u4ee5\u4e86, pam_tid.so \u662f Touch ID \u6a21\u5757.</p>"},{"location":"archive/2025/08/","title":"\u516b\u6708 2025","text":""},{"location":"archive/2025/02/","title":"\u4e8c\u6708 2025","text":""},{"location":"archive/2024/12/","title":"\u5341\u4e8c\u6708 2024","text":""},{"location":"archive/2024/07/","title":"\u4e03\u6708 2024","text":""},{"location":"category/tech/","title":"Tech","text":""},{"location":"category/bupt/","title":"BUPT","text":""},{"location":"category/%E7%94%9F%E6%B4%BB/","title":"\u751f\u6d3b","text":""},{"location":"records/category/tech/","title":"Tech","text":""}]}